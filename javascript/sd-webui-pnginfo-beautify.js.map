{
  "version": 3,
  "sources": ["../../node_modules/crlf-normalize/src/index.ts", "../../node_modules/split-smartly2/src/types.ts", "../../node_modules/split-smartly2/src/util.ts", "../../node_modules/split-smartly2/src/searchResults/buildIndexesObject.ts", "../../node_modules/split-smartly2/src/searchResults.ts", "../../node_modules/split-smartly2/src/split.ts", "../../node_modules/split-smartly2/src/createSplitFunction.ts", "../../node_modules/split-smartly2/src/util/getSplitSmartlyArgs.ts", "../../node_modules/split-smartly2/src/util/arrayToPattern.ts", "../../node_modules/split-smartly2/src/util/newDefaultSettings.ts", "../../node_modules/split-smartly2/src/prepareSearch.ts", "../../node_modules/split-smartly2/src/util/initSettings.ts", "../../node_modules/split-smartly2/src/util/mergeSettings.ts", "../../node_modules/split-smartly2/src/util/createBracketsMap.ts", "../../node_modules/split-smartly2/src/util/createBracketsSearch.ts", "../../node_modules/split-smartly2/src/util/createSeparatorsSearch.ts", "../../node_modules/split-smartly2/src/index.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/utils.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/split.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/parser.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/png.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/handler.ts", "../../node_modules/@bluelovers/auto1111-pnginfo/src/index.ts", "../../src/const.ts", "../../src/row-config.ts", "../../node_modules/@shikijs/core/dist/types.mjs", "../../node_modules/@shikijs/core/dist/textmate.mjs", "../../node_modules/@shikijs/core/dist/index.mjs", "../../src/grammar.ts", "../../node_modules/@shikijs/core/dist/wasm-inlined.mjs", "../../src/highlighter.ts", "../../src/layout.tsx", "../../src/render.ts", "../../src/style.scss", "../../src/style.ts", "../../src/index.mts"],
  "sourcesContent": ["import { ITSAndTypeAndStringLiteral, ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport const enum EnumLineBreak\n{\n\tCR = \"\\r\",\n\tCRLF = \"\\r\\n\",\n\tLF = \"\\n\",\n}\n\nexport const enum EnumLineBreakCharCode\n{\n\tCR = 0x0d,\n\tLF = 0x0a,\n}\n\nconst CR = EnumLineBreak.CR as const;\nconst CRLF = EnumLineBreak.CRLF as const;\nconst LF = EnumLineBreak.LF as const;\n\nconst R_CRLF = /\\r\\n|\\r(?!\\n)|\\n/g;\nconst R_CRLF_MATCH = new RegExp(`(${R_CRLF.source})`, R_CRLF.flags);\n\nexport { CR, CRLF, LF, R_CRLF, R_CRLF_MATCH }\n\nexport type ILineBreak = ITSTypeAndStringLiteral<EnumLineBreak>;\n\nexport type ILineBreakInput = ITSAndTypeAndStringLiteral<EnumLineBreak>;\n\nexport interface IOptions\n{\n\tdisable?: {\n\t\tlf?: boolean,\n\t\tcrlf?: boolean,\n\t\tcr?: boolean,\n\t}\n}\n\nexport function crlf(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\treturn text.replace(R_CRLF, newline);\n}\n\nexport function chkcrlf(text: string, options?: IOptions)\n{\n\tconst disable = options?.disable ?? {};\n\n\treturn {\n\t\tlf: !disable.lf && /\\n/.test(text.replace(/\\r\\n/g, '')),\n\t\tcrlf: !disable.crlf && /\\r\\n/.test(text),\n\t\tcr: !disable.cr && /\\r(?!\\n)/.test(text),\n\t} as const;\n}\n\nexport type IChkCrlf = ReturnType<typeof chkcrlf>;\n\nexport function detectLineBreak(text: string, options?: IOptions)\n{\n\tconst _lb = chkcrlf(text, options);\n\treturn _detectLineBreakCore(_lb)\n}\n\nexport function _detectLineBreakCore(_lb: IChkCrlf)\n{\n\treturn _lb.crlf ? EnumLineBreak.CRLF : (_lb.lf || !_lb.cr) ? EnumLineBreak.LF : EnumLineBreak.CR\n}\n\nexport function isCRLF(newline: string): newline is EnumLineBreak.CRLF\n{\n\treturn newline === EnumLineBreak.CRLF\n}\n\nexport function isLF(newline: string): newline is EnumLineBreak.LF\n{\n\treturn newline === EnumLineBreak.LF\n}\n\nexport function isCR(newline: string): newline is EnumLineBreak.CR\n{\n\treturn newline === EnumLineBreak.CR\n}\n\nexport function charCodeIsLF(charCode: number): charCode is EnumLineBreakCharCode.LF\n{\n\treturn charCode === EnumLineBreakCharCode.LF\n}\n\nexport function charCodeIsCR(charCode: number): charCode is EnumLineBreakCharCode.CR\n{\n\treturn charCode === EnumLineBreakCharCode.CR\n}\n\nexport function lineSplit(text: string)\n{\n\treturn text.split(R_CRLF);\n}\n\nexport function crlf_unicode_normalize(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\tconst ln3 = newline + newline + newline;\n\tconst ln2 = newline + newline;\n\n\treturn text\n\t\t.replace(/\\u000C/g, ln3)\n\t\t.replace(/\\u2028/g, newline)\n\t\t.replace(/\\u2029/g, ln2)\n\t\t;\n}\n\nexport function isEqualWithIgnoreLineSeparators(a: string, b: string)\n{\n\tconst _lb_a: IChkCrlf = chkcrlf(a);\n\tconst _lb_b: IChkCrlf = chkcrlf(b);\n\n\tlet bool = false;\n\n\tif (_lb_a.cr === _lb_b.cr && _lb_a.crlf === _lb_b.crlf && _lb_a.lf === _lb_b.lf)\n\t{\n\t\tbool = crlf(a) === crlf(b);\n\t}\n\n\treturn {\n\t\tbool,\n\t\t_lb_a,\n\t\t_lb_b,\n\t}\n}\n\nexport type ILineBreakName = keyof typeof EnumLineBreak;\n\nexport function toLineBreakName(newline: ILineBreakInput): ILineBreakName\n{\n\tswitch (newline)\n\t{\n\t\tcase EnumLineBreak.LF:\n\t\t\treturn 'LF'\n\t\tcase EnumLineBreak.CR:\n\t\t\treturn 'CR'\n\t\tcase EnumLineBreak.CRLF:\n\t\t\treturn 'CRLF'\n\t}\n\n\tthrow new TypeError(`Invalid line break`);\n}\n\nexport function nameToLineBreak(name: ILineBreakName | Lowercase<ILineBreakName> | Capitalize<Lowercase<ILineBreakName>> | string): EnumLineBreak\n{\n\tswitch (name?.toUpperCase())\n\t{\n\t\tcase 'LF':\n\t\t\treturn EnumLineBreak.LF\n\t\tcase 'CR':\n\t\t\treturn EnumLineBreak.CR\n\t\tcase 'CRLF':\n\t\t\treturn EnumLineBreak.CRLF\n\t}\n\n\tthrow new TypeError(`Invalid line break name: ${name}`);\n}\n\nexport function detectCurrentIndexLineBreakFromBufferLike<T extends number, A extends {\n\t[n: number]: number\n}>(buffer: A, index: T)\n{\n\tconst cur = buffer[index];\n\tconst next = index + 1;\n\tif (charCodeIsLF(cur))\n\t{\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.LF as const,\n\t\t\tcur: cur as EnumLineBreakCharCode.LF,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\telse if (charCodeIsCR(cur))\n\t{\n\t\tif (charCodeIsLF(buffer[next]))\n\t\t{\n\t\t\treturn {\n\t\t\t\tnewline: EnumLineBreak.CRLF as const,\n\t\t\t\tcur: cur as EnumLineBreakCharCode.CR,\n\t\t\t\tindex,\n\t\t\t\tnext: next + 1,\n\t\t\t\tlength: 2 as const,\n\t\t\t} as const\n\t\t}\n\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.CR as const,\n\t\t\tcur: cur as EnumLineBreakCharCode.CR,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\n\treturn {\n\t\tnewline: void 0 as undefined,\n\t\tcur,\n\t\tindex,\n\t\tnext,\n\t\tlength: 0 as const,\n\t} as const\n}\n\nexport function detectCurrentIndexLineBreak<T extends number, A extends {\n\t[n: number]: string\n}>(buffer: A, index: T)\n{\n\tconst cur = buffer[index];\n\tconst next = index + 1;\n\tif (isLF(cur))\n\t{\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.LF as const,\n\t\t\tcur: cur as EnumLineBreak.LF,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\telse if (isCR(cur))\n\t{\n\t\tif (isLF(buffer[next]))\n\t\t{\n\t\t\treturn {\n\t\t\t\tnewline: EnumLineBreak.CRLF as const,\n\t\t\t\tcur: cur as EnumLineBreak.CR,\n\t\t\t\tindex,\n\t\t\t\tnext: next + 1,\n\t\t\t\tlength: 2 as const,\n\t\t\t} as const\n\t\t}\n\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.CR as const,\n\t\t\tcur: cur as EnumLineBreak.CR,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\n\treturn {\n\t\tnewline: void 0 as void,\n\t\tcur,\n\t\tindex,\n\t\tnext,\n\t\tlength: 0 as const,\n\t} as const\n}\n\nexport default crlf;\n", "import { SearchResults } from './searchResults';\nimport { ITSValueOrArray } from 'ts-type/lib/type/base';\nimport { ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport type IBracketsItem = [open: IBracketsObject[\"open\"], close: IBracketsObject[\"close\"], searchLevels?: IBracketsObject[\"searchLevels\"], ignoreMode?: IBracketsObject[\"ignoreMode\"]];\n\nexport type IBrackets = IBracketsItem[];\n\nexport type IBracketsInput = true | string | IBrackets | Record<string, string>;\n\nexport interface IBracketsObject\n{\n\topen: string;\n\tclose: string;\n\tsearchLevels: true | number[];\n\tignoreMode: boolean;\n\topenPosition?: number;\n}\n\nexport interface IBracketsMap\n{\n\t[k: string]: IBracketsObject\n}\n\nexport type IMentionsRecord = Record<string, string>;\n\nexport type IMentionsInput = string | boolean | string[] | IMentionsRecord;\n\nexport interface ISplitSettings<M extends IIncludeSeparatorMode>\n{\n\tbrackets: IBracketsInput;\n\tmentions: IMentionsInput;\n\tignoreInsideQuotes: boolean;\n\tincludeSeparatorMode: M;\n\tignoreCase: boolean;\n\ttrimResult: boolean;\n\ttrimSeparators: boolean;\n\n\tcheck(checkParams: ICheckParams): boolean;\n\n\tdefaultBrackets: IBrackets;\n\tseparators: ISeparators;\n\n\tinit(): ISplitSettings<M>;\n\n\tmerge<M2 extends IIncludeSeparatorMode = M>(settings: ISplitSettingsInput<M2>): ISplitSettings<M2>;\n\n\tarrayToPattern(arr: (string | RegExp)[]): string;\n\n\tcreateRegExp(pattern: string): RegExp;\n\n\tcreateBracketsMap(): ISplitSettings<M>;\n\n\tcreateBracketsSearch(): ISplitSettings<M>;\n\n\tcreateSeparatorsSearch(): ISplitSettings<M>;\n\n\tbracketsMap: IBracketsMap;\n\tbracketsSearch: RegExp;\n\tseparatorSearch: RegExp;\n\tsearchWithin: boolean\n\tindexes: ITSValueOrArray<number>\n\treturnIterator: boolean\n\n\tincludePositions: boolean,\n}\n\nexport interface ISplitSettingsInput<M extends IIncludeSeparatorMode> extends Partial<ISplitSettings<M>>\n{\n\n}\n\nexport const enum EnumIncludeSeparatorMode\n{\n\tINCLUDE_SEPARATOR_NONE = 'NONE',\n\tINCLUDE_SEPARATOR_SEPARATELY = 'SEPARATELY',\n\tINCLUDE_SEPARATOR_LEFT = 'LEFT',\n\tINCLUDE_SEPARATOR_RIGHT = 'RIGHT',\n\tINCLUDE_SEPARATOR_ONLY = 'ONLY',\n}\n\nexport interface ISearchSettings<M extends IIncludeSeparatorMode = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY> extends ISplitSettings<M>\n{\n\n}\n\nexport interface ISearchSettingsInput<M extends IIncludeSeparatorMode = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY> extends Partial<ISearchSettings<M>>\n{\n\n}\n\nexport interface ICheckParams\n{\n\tgetString(): string;\n\tgetTextAfter(): string;\n\tgetMentions(): string[];\n\tgetSeparator(): string;\n\n\treadonly string: string;\n\treadonly textAfter: string;\n\treadonly mentions: string[];\n\treadonly separator: string;\n}\n\nexport interface IMention\n{\n\tindex: number\n\tmention: string\n}\n\nexport type IPipeItem = string | [string, ISeparators] | [ISeparators, string] | ISeparators\n\ninterface IPipeItemMap\n{\n\t[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY]: string\n\t[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT]: [string, ISeparators]\n\t[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT]: [ISeparators, string]\n\t[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY]: ISeparators\n}\n\nexport type IGetPipeItemByIncludeSeparatorMode<M extends IIncludeSeparatorMode> =\n\tM extends EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY ?\n\t\tIPipeItemMap[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY] :\n\t\tM extends EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT ?\n\t\t\tIPipeItemMap[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT] :\n\t\t\tM extends EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT ?\n\t\t\t\tIPipeItemMap[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT] :\n\t\t\t\tIPipeItemMap[EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY]\n\t;\nexport type IGetIncludeSeparatorModeBySettings<T extends ISearchSettingsInput<IIncludeSeparatorMode>> = T extends ISearchSettingsInput<infer M>\n\t? M\n\t: IIncludeSeparatorMode\nexport type IGetPipeItemBySettings<T extends ISearchSettingsInput<IIncludeSeparatorMode>> = IGetPipeItemByIncludeSeparatorMode<IGetIncludeSeparatorModeBySettings<T>>\nexport type IIncludeSeparatorMode = ITSTypeAndStringLiteral<EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_NONE\n\t| EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY\n\t| EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT\n\t| EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT\n\t| EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY>\nexport type ISeparators = ITSValueOrArray<string | RegExp>;\nexport type ISeparatorsNode = ISeparators | ITextNodeSeparator;\n\nexport interface ITextNodeBase\n{\n\ttext: string\n\tposition?: number\n\tisSeparator?: never\n\tmentions?: string[]\n}\n\nexport interface ITextNodeSeparator extends Omit<ITextNodeBase, 'isSeparator' | 'text'>\n{\n\ttext: ISeparators\n\tposition: number\n\tisSeparator: true\n}\n\nexport type ITextNodeOrText = string | ITextNodeBase | ITextNodeSeparator;\n\nexport const enum EnumFindBracketsAction\n{\n\tACTION_CLOSE = 1,\n\tACTION_OPEN,\n\tACTION_ADD_FRAGMENT,\n\tACTION_NULL,\n}\n\nexport type IParametersSplitSmartlyReturnQuery<M extends IIncludeSeparatorMode> = [Exclude<ISeparators, string>, ISplitSettingsInput<M>?];\n\nexport type IParametersSplitSmartlyReturnResult<M extends IIncludeSeparatorMode> = [...([string, ISeparators?] | [string]), ISplitSettingsInput<M>?];\n\nexport type IParametersSplitSmartly<M extends IIncludeSeparatorMode> = IParametersSplitSmartlyReturnQuery<M> | IParametersSplitSmartlyReturnResult<M>;\n\nexport interface ISplitFunctionCore<M extends IIncludeSeparatorMode>\n{\n\n\t(string: string, settings: ISearchSettingsInput<M> & {\n\t\treturnIterator: true\n\t}): SearchResults<M>\n\n\t(string: string, settings: ISearchSettingsInput<M> & {\n\t\tindexes: number[]\n\t}): IGetPipeItemByIncludeSeparatorMode<M>[]\n\t(string: string, settings: ISearchSettingsInput<M> & {\n\t\treturnIterator?: false | void\n\t}): IGetPipeItemByIncludeSeparatorMode<M>[]\n\n\t(string: string, settings: ISearchSettingsInput<M> & {\n\t\tindexes: number\n\t}): IGetPipeItemByIncludeSeparatorMode<M>\n\n\t(string: string, settings?: ISearchSettingsInput<M>): SearchResults<M> | IGetPipeItemByIncludeSeparatorMode<M> | IGetPipeItemByIncludeSeparatorMode<M>[]\n\n}\n\nexport interface ISplitFunction<M extends IIncludeSeparatorMode> extends ISplitFunctionCore<M>, ThisType<ISplitSettings<M>>\n{\n\tgetOne<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string, index: number, settings?: T): IGetPipeItemBySettings<T>;\n\tgetFirst<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string, settings?: T): IGetPipeItemBySettings<T>;\n\n\tgetIndexes<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string, indexes: number[], settings?: T): IGetPipeItemBySettings<T>[];\n\n\tgetIndexes<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string, indexes: number, settings?: T): IGetPipeItemBySettings<T>;\n\n\tgetIterator<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string, settings?: T): SearchResults<IGetIncludeSeparatorModeBySettings<T>>;\n}\n\nexport interface IParameterSeparator extends RegExpExecArray\n{\n\tsearchWithinData?: IBracketsObject\n}\n\nexport type IReturnTypeCheckSeparator = [text: string | ITextNodeBase, separator: ISeparatorsNode, checked: boolean];\n", "import { ITextNodeOrText } from './types';\n\nexport const once = <T extends (...args: any[]) => any>(fn: T) =>\n{\n\tlet value: any, hasValue: any\n\treturn function (...args)\n\t{\n\t\tif (!hasValue)\n\t\t{\n\t\t\tvalue = fn(...args)\n\t\t\thasValue = true\n\t\t}\n\t\treturn value\n\t} as T\n}\nexport const isEmpty = <T extends ITextNodeOrText | any[] | Record<any, any>>(value: T) =>\n{\n\tif (!value) return true\n\n\tif (Array.isArray(value))\n\t{\n\t\tif (value.length === 0) return true\n\t}\n\n\telse if (typeof value === 'object')\n\t{\n\t\tif (Object.keys(value).length === 0) return true\n\t}\n\n\treturn false\n}\nexport const first = <T>(value: T[]): T => value[0]\nexport const last = <T>(value: T[]): T => value[value.length - 1]\n", "import { ITSValueOrArray } from 'ts-type/lib/type/base';\nimport { isEmpty } from '../util';\n\nexport function buildIndexesObject(indexes: ITSValueOrArray<number>)\n{\n\tconst indexesArr = [indexes].flat().filter(Boolean)\n\n\treturn !isEmpty(indexesArr) && {\n\t\tvalues: new Set(indexesArr),\n\t\tmax: Math.max(...indexesArr),\n\t\tcount: 0,\n\n\t\thasIndex()\n\t\t{\n\t\t\treturn this.max === -Infinity || this.values.has(this.count++)\n\t\t},\n\n\t\tisOverMax()\n\t\t{\n\t\t\treturn this.max !== -Infinity && this.count > this.max\n\t\t},\n\t}\n}\n", "import {\n\tEnumFindBracketsAction,\n\tEnumIncludeSeparatorMode,\n\tIBracketsObject,\n\tICheckParams,\n\tIGetPipeItemByIncludeSeparatorMode,\n\tIGetPipeItemBySettings,\n\tIIncludeSeparatorMode,\n\tIMention, IMentionsInput,\n\tIParameterSeparator,\n\tIReturnTypeCheckSeparator,\n\tISearchSettings,\n\tISearchSettingsInput,\n\tISeparatorsNode,\n\tITextNodeOrText,\n} from './types';\nimport { isEmpty, last, once } from './util';\nimport { buildIndexesObject } from './searchResults/buildIndexesObject';\n\nexport class SearchResults<M extends IIncludeSeparatorMode, T extends IGetPipeItemByIncludeSeparatorMode<IIncludeSeparatorMode> = IGetPipeItemBySettings<ISearchSettingsInput<M>>>\n{\n\n\tbrackets: IBracketsObject[]\n\tpipe: T[]\n\tcurrentMentions: IMention[]\n\tposition: number\n\tisDone: boolean\n\tfreeArea: { start: number, end: number }\n\tlastSeparator: ISeparatorsNode\n\tsearchString: string\n\tindexes: {\n\t\tvalues: Set<any[]>,\n\t\tmax: number,\n\t\tcount: number,\n\t\thasIndex(): boolean,\n\t\tisOverMax(): boolean,\n\t}\n\n\tprotected tempPosition: number\n\n\tconstructor(public string: string, public searchSettings: ISearchSettings<M>)\n\t{\n\t\tthis.prepareSearch()\n\t}\n\n\tprotected prepareSearch()\n\t{\n\t\tfor (const regExp of [this.searchSettings.separatorSearch, this.searchSettings.bracketsSearch]) regExp.lastIndex = 0\n\n\t\tObject.assign(this, {\n\t\t\tbrackets: [],\n\t\t\tpipe: [],\n\t\t\tcurrentMentions: [],\n\t\t\tposition: 0,\n\t\t\tisDone: false,\n\t\t\tfreeArea: { start: 0, end: undefined },\n\t\t\tlastSeparator: undefined,\n\t\t\tsearchString: (this.searchSettings.ignoreCase &&\n\t\t\t\t!this.searchSettings.separatorSearch.ignoreCase)\n\t\t\t\t? this.string.toUpperCase()\n\t\t\t\t: this.string,\n\n\t\t\tindexes: buildIndexesObject(this.searchSettings.indexes),\n\t\t})\n\t}\n\n\tget pipeIsEmpty()\n\t{\n\t\treturn isEmpty(this.pipe)\n\t}\n\n\tgetMentions(indexFrom: number, indexTo: number): [string[], IMention[]]\n\t{\n\t\tconst properMentions = [] as string[], restMentions = [] as IMention[]\n\n\t\tfor (const item of this.currentMentions)\n\t\t{\n\t\t\tif (item.index >= indexFrom && item.index < indexTo)\n\t\t\t{\n\t\t\t\tproperMentions.push(item.mention)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trestMentions.push(item)\n\t\t\t}\n\t\t}\n\n\t\treturn [properMentions.length && properMentions, restMentions]\n\t}\n\n\ttrimResultText(text: string)\n\t{\n\t\treturn this.searchSettings.trimResult ? text.trim() : text\n\t}\n\n\ttrimSeparatorText(text: string)\n\t{\n\t\treturn this.searchSettings.trimSeparators ? text.trim() : text\n\t}\n\n\tcheckSeparator(pSeparator: IParameterSeparator): IReturnTypeCheckSeparator\n\t{\n\t\tconst { string } = this\n\t\tconst { check, includePositions, mentions } = this.searchSettings\n\n\t\tlet {\n\t\t\t0: separatorText = '',\n\t\t\tindex: separatorPosition = string.length,\n\t\t\tsearchWithinData,\n\t\t} = pSeparator ?? {} as IParameterSeparator\n\n\t\tconst separatorLength = separatorText.length\n\n\t\tconst lastPosition = searchWithinData\n\t\t\t? searchWithinData.openPosition\n\t\t\t: this.position\n\n\t\tlet text: ITextNodeOrText = string.substring(lastPosition, separatorPosition)\n\t\tif (!separatorText) this.isDone = true\n\n\t\ttext = this.trimResultText(text)\n\t\tseparatorText = this.trimSeparatorText(separatorText)\n\n\t\tlet separator: any = searchWithinData\n\t\t\t? [searchWithinData.open, searchWithinData.close]\n\t\t\t: separatorText\n\n\t\tif (includePositions)\n\t\t{\n\t\t\ttext = { text, position: lastPosition }\n\t\t\tseparator = { text: separator as any, position: separatorPosition, isSeparator: true }\n\t\t}\n\n\t\tlet restMentions: IMention[]\n\t\tif (mentions)\n\t\t{\n\t\t\ttext = typeof text === 'string' ? { text } : text\n\t\t\tconst [properMentions, restItems] = this.getMentions(lastPosition, separatorPosition)\n\n\t\t\tif (properMentions)\n\t\t\t{\n\t\t\t\ttext.mentions = properMentions\n\t\t\t\trestMentions = restItems\n\t\t\t}\n\t\t}\n\n\t\tif (check && separatorText)\n\t\t{\n\t\t\tconst position = isNaN(this.tempPosition) ? lastPosition : this.tempPosition\n\t\t\tthis.tempPosition = separatorPosition + separatorText.length\n\n\t\t\tconst self = this\n\t\t\tconst checkParams: ICheckParams = {\n\t\t\t\tgetString: once(() => self.trimResultText(string.substring(position, separatorPosition))),\n\t\t\t\tgetTextAfter: once(() => string.substring(separatorPosition + separatorText.length)),\n\t\t\t\tgetMentions: once(() => self.getMentions(position, separatorPosition)[0]),\n\t\t\t\tgetSeparator: once(() => separatorText),\n\n\t\t\t\tget string() { return this.getString() },\n\t\t\t\tget textAfter() { return this.getTextAfter() },\n\t\t\t\tget mentions() { return this.getMentions() },\n\t\t\t\tget separator() { return this.getSeparator() },\n\t\t\t}\n\n\t\t\tif (!check(checkParams)) return [] as any\n\t\t\tdelete this.tempPosition\n\t\t}\n\n\t\tif (restMentions) this.currentMentions = restMentions\n\n\t\tthis.position = separatorPosition + separatorLength\n\t\treturn [text, separator, true]\n\t}\n\n\tpushToPipe(value: T)\n\t{\n\t\tif (this.indexes)\n\t\t{\n\t\t\tif (!this.indexes.hasIndex())\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (this.indexes.isOverMax())\n\t\t\t{\n\t\t\t\tthis.isDone = true\n\t\t\t}\n\t\t}\n\n\t\tthis.pipe.push(value)\n\t}\n\n\taddToPipe(pSeparator?: IParameterSeparator)\n\t{\n\t\tlet [text, separator, checked] = this.checkSeparator(pSeparator)\n\t\tif (!checked) return false\n\n\t\tswitch (this.searchSettings.includeSeparatorMode)\n\t\t{\n\t\t\tcase EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY:\n\t\t\t\tthis.pushToPipe(text as any)\n\t\t\t\tif (separator)\n\t\t\t\t{\n\t\t\t\t\tthis.pushToPipe(separator as any)\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT:\n\t\t\t\tthis.pushToPipe([text, separator] as any)\n\t\t\t\tbreak\n\n\t\t\tcase EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT:\n\t\t\t\tconst textIsEmpty = !(typeof text === 'object' ? text.text : text)\n\t\t\t\tif (!textIsEmpty || this.lastSeparator)\n\t\t\t\t{\n\t\t\t\t\tthis.pushToPipe([this.lastSeparator, text] as any)\n\t\t\t\t}\n\t\t\t\tthis.lastSeparator = separator\n\t\t\t\tbreak\n\n\t\t\tcase EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY:\n\t\t\t\tif (separator) this.pushToPipe(separator as any)\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tthis.pushToPipe(text as any)\n\t\t}\n\n\t\treturn !this.pipeIsEmpty\n\t}\n\n\tfindBrackets()\n\t{\n\t\tconst { searchString: string, brackets, freeArea, searchSettings } = this\n\t\tconst { bracketsSearch, separatorSearch, searchWithin } = searchSettings\n\n\t\tconst condition = searchWithin ? () => this.pipeIsEmpty : () => {\n\n\t\t\t// avoid run forever when string.length = 1\n\t\t\tif (typeof freeArea.start === 'number' && freeArea.start === freeArea.end)\n\t\t\t{\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn !freeArea.end\n\t\t}\n\n\t\twhile (condition())\n\t\t{\n\t\t\tconst match = bracketsSearch.exec(string)\n\t\t\tif (!match)\n\t\t\t{\n\t\t\t\tif (searchWithin || isNaN(freeArea.start)) return false\n\n\t\t\t\tfreeArea.end = string.length - 1\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst fragment = match[0]\n\t\t\tconst { close, ignoreMode, searchLevels } = last(brackets) || {}\n\n\t\t\tlet block\n\t\t\t//const ACTION_CLOSE = 1, ACTION_OPEN = 2, ACTION_ADD_FRAGMENT = 3, ACTION_NULL = 4\n\n\t\t\tconst action: EnumFindBracketsAction =\n\t\t\t\t(fragment === close && EnumFindBracketsAction.ACTION_CLOSE) ||\n\t\t\t\t(ignoreMode && EnumFindBracketsAction.ACTION_NULL) ||\n\t\t\t\t((block = searchSettings.bracketsMap[fragment]) && EnumFindBracketsAction.ACTION_OPEN) ||\n\t\t\t\t(searchSettings.mentions?.[fragment as keyof IMentionsInput] && EnumFindBracketsAction.ACTION_ADD_FRAGMENT)\n\n\t\t\tswitch (action)\n\t\t\t{\n\t\t\t\tcase EnumFindBracketsAction.ACTION_CLOSE:\n\t\t\t\t\tconst bracketData = brackets.pop()\n\t\t\t\t\tif (searchWithin)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (searchLevels === true || searchLevels.includes(brackets.length + 1))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.addToPipe(Object.assign(match, { searchWithinData: bracketData }))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (isEmpty(brackets))\n\t\t\t\t\t{\n\t\t\t\t\t\tfreeArea.start = match.index\n\t\t\t\t\t\tif (separatorSearch && separatorSearch.lastIndex < freeArea.start)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tseparatorSearch.lastIndex = freeArea.start\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\tcase EnumFindBracketsAction.ACTION_OPEN:\n\t\t\t\t\tbrackets.push({ ...block, openPosition: match.index + fragment.length })\n\t\t\t\t\tif (brackets.length === 1 && !searchWithin)\n\t\t\t\t\t{\n\t\t\t\t\t\tfreeArea.end = match.index\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tcase EnumFindBracketsAction.ACTION_ADD_FRAGMENT:\n\t\t\t\t\tconst mention = searchSettings.mentions[fragment as keyof IMentionsInput]\n\t\t\t\t\tthis.currentMentions.push({ mention, index: match.index })\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n\n\tfindSeparator(separator: IParameterSeparator)\n\t{\n\t\tconst { searchString: string, freeArea } = this\n\t\tconst { separatorSearch } = this.searchSettings\n\n\t\tlet stopSearching: boolean\n\t\twhile (!stopSearching)\n\t\t{\n\t\t\tseparator = separator || separatorSearch.exec(string)\n\t\t\tif (!separator)\n\t\t\t{\n\t\t\t\tthis.addToPipe()\n\t\t\t}\n\n\t\t\telse if (separator.index <= freeArea.end)\n\t\t\t{\n\t\t\t\tconst isAdded =\n\t\t\t\t\tseparator.index >= freeArea.start &&\n\t\t\t\t\tthis.addToPipe(separator)\n\n\t\t\t\tseparator = null\n\n\t\t\t\tif (!isAdded) continue\n\t\t\t}\n\n\t\t\telse\n\t\t\t{\n\t\t\t\tfreeArea.start = freeArea.end = undefined\n\t\t\t}\n\n\t\t\tstopSearching = true\n\t\t}\n\n\t\treturn separator\n\t}\n\n\tgetNext(): T\n\t{\n\t\tlet separator: IParameterSeparator\n\t\twhile (this.pipeIsEmpty && !this.isDone)\n\t\t{\n\t\t\tif (!this.findBrackets())\n\t\t\t{\n\t\t\t\tthis.isDone = true\n\t\t\t}\n\t\t\telse if (!this.searchSettings.searchWithin)\n\t\t\t{\n\t\t\t\tseparator = this.findSeparator(separator)\n\t\t\t}\n\t\t}\n\t\treturn this.pipeIsEmpty ? null : this.pipe.shift()\n\t}\n\n\tgetAll() { return [...this] }\n\n\tgetRest()\n\t{\n\t\tconst res: T[] = []\n\t\tlet value: T\n\t\twhile (null !== (value = this.getNext()))\n\t\t{\n\t\t\tres.push(value)\n\t\t}\n\t\treturn res\n\t}\n\n\t// @ts-ignore\n\t* [Symbol.iterator]()\n\t{\n\t\tthis.prepareSearch()\n\t\tconst object = this\n\n\t\tlet value: T;\n\n\t\tdo\n\t\t{\n\t\t\tvalue = object.getNext()\n\t\t\tif (value !== null)\n\t\t\t{\n\t\t\t\tyield value\n\t\t\t}\n\t\t}\n\t\twhile (value !== null)\n\n\t\t/*\n\t\treturn {\n\t\t\t//object,\n\n\t\t\tnext () {\n\t\t\t\tconst value = object.getNext()\n\t\t\t\tif (value === null) return { done: true }\n\n\t\t\t\treturn { value, done: false }\n\t\t\t}\n\t\t}\n\t\t */\n\t}\n}\n", "import { IIncludeSeparatorMode, ISearchSettingsInput, ISplitSettings } from './types';\nimport { SearchResults } from './searchResults';\n\nexport function split<M extends IIncludeSeparatorMode, M2 extends IIncludeSeparatorMode = M>(this: ISplitSettings<any>, string: string, settings?: ISearchSettingsInput<M2>)\n{\n\tconst splitSettings = (this as ISplitSettings<M>).merge(settings)\n\tlet res = new SearchResults(string, splitSettings)\n\n\tif (typeof splitSettings.indexes === 'number')\n\t{\n\t\treturn res.getNext()\n\t}\n\telse if (!splitSettings.returnIterator)\n\t{\n\t\treturn res.getAll()\n\t}\n\n\treturn res\n}\n", "import {\n\tIGetIncludeSeparatorModeBySettings,\n\tIGetPipeItemBySettings,\n\tIIncludeSeparatorMode,\n\tISearchSettingsInput,\n\tISplitFunction,\n\tISplitFunctionCore,\n\tISplitSettings,\n} from './types';\nimport { split } from './split';\nimport { SearchResults } from './searchResults';\n\nexport function createSplitFunction<M extends IIncludeSeparatorMode>(settings: ISearchSettingsInput<M>): ISplitFunction<M>\n{\n\tconst splitFn = split.bind(settings as ISplitSettings<M>) as unknown as ISplitFunctionCore<M> & ThisType<ISplitSettings<M>>\n\n\treturn Object.assign(splitFn, {\n\t\tgetOne<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string,\n\t\t\tindex: number,\n\t\t\tsettings = {} as T,\n\t\t): IGetPipeItemBySettings<T>\n\t\t{\n\t\t\tif (isNaN(index))\n\t\t\t{\n\t\t\t\tthrow new TypeError('second parameter of `getOne` function should be index')\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\treturn splitFn(string, { ...settings, indexes: index })\n\t\t},\n\n\t\tgetFirst<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string,\n\t\t\tsettings = {} as T,\n\t\t): IGetPipeItemBySettings<T>\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\treturn splitFn(string, { ...settings, indexes: 0 })\n\t\t},\n\n\t\tgetIndexes<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string,\n\t\t\tindexes: number[],\n\t\t\tsettings = {} as T,\n\t\t): IGetPipeItemBySettings<T>\n\t\t{\n\t\t\tif (!Array.isArray(indexes))\n\t\t\t{\n\t\t\t\tthrow new TypeError('second parameter of `getOne` function should be array of indexes')\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\treturn splitFn(string, { ...settings, indexes })\n\t\t},\n\n\t\tgetIterator<T extends ISearchSettingsInput<IIncludeSeparatorMode> = ISearchSettingsInput<M>>(string: string,\n\t\t\tsettings = {} as T,\n\t\t): SearchResults<IGetIncludeSeparatorModeBySettings<T>>\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\treturn splitFn(string, { ...settings, returnIterator: true })\n\t\t},\n\t} as ISplitFunction<M>)\n}\n", "import {\n\tIIncludeSeparatorMode,\n\tIParametersSplitSmartly,\n\tISeparators,\n\tISplitSettings,\n\tISplitSettingsInput,\n} from '../types';\nimport { first } from '../util';\n\nexport function getSplitSmartlyArgs<M extends IIncludeSeparatorMode, M2 extends IIncludeSeparatorMode = M>(args: IParametersSplitSmartly<M>,\n\textraSettings?: ISplitSettingsInput<M2>,\n): [string, ISeparators, ISplitSettings<M2>]\n{\n\n\tif (!args?.length)\n\t{\n\t\tthrow new RangeError('empty arguments')\n\t}\n\telse if (args.length === 3)\n\t{\n\t\tif (!extraSettings) return args as any\n\t}\n\telse if (args.length === 1)\n\t{\n\t\t// @ts-ignore\n\t\tconst arg = first(args)\n\t\tif (typeof arg === 'string')\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\targs.push(',', {})\n\t\t}\n\t\telse if (Array.isArray(arg))\n\t\t{\n\t\t\targs.unshift(null)\n\t\t\targs.push({})\n\t\t}\n\t\telse if (typeof arg === 'object')\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\targs.unshift(null, ',')\n\t\t}\n\t}\n\telse if (args.length === 2)\n\t{\n\t\tif (typeof args[0] === 'string' && args[1] instanceof RegExp)\n\t\t{\n\t\t\targs.push({})\n\t\t}\n\t\telse if (typeof args[1] === 'string' || Array.isArray(args[1]))\n\t\t{\n\t\t\targs.push({})\n\t\t}\n\t\telse\n\t\t{\n\t\t\targs.unshift(null)\n\t\t}\n\t}\n\telse if (args.length > 3)\n\t{\n\t\tthrow new RangeError('Too many arguments passed to splitSmartly function!!!')\n\t}\n\n\t// @ts-ignore\n\tif (extraSettings) args[2] = { ...args[2], ...extraSettings }\n\n\treturn args as any\n}\n", "let screenedSymbols: Set<string>;\n\nexport function arrayToPattern(arr: (string | RegExp)[])\n{\n\tscreenedSymbols ??= new Set('.{}[]^()+*?\\\\/$|'.split(''))\n\n\treturn arr\n\t\t.map(s => {\n\n\t\t\tif (s instanceof RegExp)\n\t\t\t{\n\t\t\t\treturn s.source;\n\t\t\t}\n\n\t\t\treturn s.split('').map(s => screenedSymbols.has(s) ? '\\\\' + s : s).join('')\n\t\t})\n\t\t.join('|')\n}\n", "import {\n\tEnumIncludeSeparatorMode,\n\tIBrackets,\n\tISplitSettingsInput,\n} from '../types';\n\nexport function newDefaultBrackets()\n{\n\treturn [['(', ')'], ['[', ']'], ['{', '}']] as const satisfies IBrackets\n}\n\nexport function newDefaultSettings()\n{\n\treturn {\n\t\tbrackets: [] as IBrackets,\n\t\tmentions: [] as string[],\n\t\tignoreInsideQuotes: true as const,\n\t\tincludeSeparatorMode: EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_NONE as const,\n\t\tignoreCase: true as const,\n\t\ttrimResult: true as const,\n\t\ttrimSeparators: false as const,\n\t\t//check: undefined,\n\t\tdefaultBrackets: newDefaultBrackets() as IBrackets,\n\t} satisfies ISplitSettingsInput<EnumIncludeSeparatorMode>\n}\n", "import {\n\tIIncludeSeparatorMode,\n\tISeparators,\n\tISplitSettings,\n\tISplitSettingsInput,\n} from './types';\nimport { arrayToPattern } from './util/arrayToPattern';\nimport { createSeparatorsSearch } from './util/createSeparatorsSearch';\nimport { createBracketsSearch } from './util/createBracketsSearch';\nimport { createBracketsMap } from './util/createBracketsMap';\nimport { mergeSettings } from './util/mergeSettings';\nimport { initSettings } from './util/initSettings';\nimport { newDefaultSettings } from './util/newDefaultSettings';\n\nexport function prepareSearch<M extends IIncludeSeparatorMode>(separators: ISeparators,\n\tsettings: ISplitSettingsInput<M>,\n)\n{\n\tconst splitSettings: ISplitSettings<M> = {\n\t\t...newDefaultSettings() as ISplitSettings<M>,\n\t\t...settings,\n\n\t\tseparators,\n\n\t\tinit()\n\t\t{\n\t\t\treturn initSettings(this)\n\t\t},\n\n\t\tmerge<M2 extends IIncludeSeparatorMode = M>(this, settings: ISplitSettingsInput<M2>): ISplitSettings<M2>\n\t\t{\n\t\t\treturn mergeSettings(this, settings)\n\t\t},\n\n\t\tarrayToPattern(arr)\n\t\t{\n\t\t\treturn arrayToPattern(arr)\n\t\t},\n\n\t\tcreateRegExp(pattern)\n\t\t{\n\t\t\treturn RegExp(pattern, 'g')\n\t\t},\n\n\t\tcreateBracketsMap()\n\t\t{\n\t\t\treturn createBracketsMap(this)\n\t\t},\n\n\t\tcreateBracketsSearch()\n\t\t{\n\t\t\treturn createBracketsSearch(this)\n\t\t},\n\n\t\tcreateSeparatorsSearch()\n\t\t{\n\t\t\treturn createSeparatorsSearch(this)\n\t\t},\n\t}\n\n\treturn splitSettings.init()\n}\n", "import { IIncludeSeparatorMode, ISplitSettings } from '../types';\nimport { isEmpty } from '../util';\n\nexport function initSettings<M extends IIncludeSeparatorMode>(settings: ISplitSettings<M>)\n{\n\tif (Array.isArray(settings.mentions) || typeof settings.mentions === 'string')\n\t{\n\t\tconst mentionsMap =\n\t\t\t[settings.mentions].flat().filter(Boolean).reduce((map, keyword: string) =>\n\t\t\t{\n\t\t\t\tconst key = settings.ignoreCase ? keyword.toUpperCase() : keyword\n\t\t\t\tmap[key] = keyword\n\t\t\t\treturn map\n\t\t\t}, {} as Record<string, string>)\n\n\t\tsettings.mentions = !isEmpty(mentionsMap) && mentionsMap\n\t}\n\n\treturn settings\n\t\t.createBracketsMap()\n\t\t.createBracketsSearch()\n\t\t.createSeparatorsSearch()\n}\n", "import { IIncludeSeparatorMode, ISplitSettings, ISplitSettingsInput } from '../types';\n\nexport function mergeSettings<M extends IIncludeSeparatorMode, M2 extends IIncludeSeparatorMode = M>(_this: ISplitSettingsInput<M>, settings: ISplitSettingsInput<M2>): ISplitSettings<M2>\n{\n\t// @ts-ignore\n\tif (!settings) return _this\n\n\t// @ts-ignore\n\tsettings = { ..._this, ...settings }\n\tif (['brackets', 'mentions'].some(prop => prop in settings))\n\t{\n\t\tsettings.init()\n\t}\n\n\t// @ts-ignore\n\treturn settings\n}\n", "import { IBrackets, IBracketsInput, IBracketsMap, IIncludeSeparatorMode, ISplitSettings } from '../types';\nimport { first } from '../util';\n\nexport function normalizeBrackets(brackets: IBracketsInput, defaultBrackets: IBrackets)\n{\n\tif (brackets === true)\n\t{\n\t\tbrackets = defaultBrackets.slice()\n\t}\n\telse if (typeof brackets === 'object' && !Array.isArray(brackets))\n\t{\n\t\tbrackets = Object.entries(brackets) as IBrackets\n\t}\n\telse if (typeof brackets === 'string')\n\t{\n\t\tbrackets = brackets\n\t\t\t.split(',')\n\t\t\t.map(pairText =>\n\t\t\t{\n\t\t\t\tlet pair = pairText.trim().split(' ')\n\t\t\t\tif (pair.length !== 2)\n\t\t\t\t{\n\t\t\t\t\tif (first(pair).length === 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tpair = first(pair).split('')\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new TypeError(`open and close parts of brackets should be separated by space symbol`)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn pair as any\n\t\t\t}) as IBrackets\n\t}\n\n\treturn brackets ?? []\n}\n\nexport function buildBracketsMap(brackets: IBrackets, searchWithin?: boolean)\n{\n\treturn brackets.reduce((map, [open, close, ...args]) =>\n\t{\n\t\tif (args.length === 1 && !searchWithin)\n\t\t{\n\t\t\targs.unshift(undefined)\n\t\t}\n\t\tlet [searchLevels = searchWithin && 1, ignoreMode] = args\n\t\tif (typeof searchLevels === 'number')\n\t\t{\n\t\t\tsearchLevels = [searchLevels]\n\t\t}\n\t\tmap[open] = { open, ignoreMode, searchLevels, close: close || open }\n\t\treturn map\n\t}, {} as IBracketsMap)\n}\n\nexport function handleBracketsMapOptions(brackets: IBrackets, settings: ISplitSettings<IIncludeSeparatorMode>)\n{\n\tif (settings.ignoreInsideQuotes)\n\t{\n\t\tbrackets.unshift([`'`, , , true], [`\"`, , , true])\n\t}\n\n\treturn brackets\n}\n\nexport function createBracketsMap<T extends ISplitSettings<IIncludeSeparatorMode>>(settings: T): T & {\n\tbrackets: IBrackets,\n\tbracketsMap: IBracketsMap,\n}\n{\n\tlet brackets = settings.brackets = normalizeBrackets(settings.brackets, settings.defaultBrackets)\n\n\t//let brackets = settings.brackets.slice();\n\n\tbrackets = handleBracketsMapOptions(brackets, settings);\n\n\tsettings.bracketsMap = buildBracketsMap(brackets, settings.searchWithin);\n\n\treturn settings as any\n}\n", "import { IIncludeSeparatorMode, ISplitSettings } from '../types';\n\nexport function createBracketsSearch<M extends IIncludeSeparatorMode>(settings: ISplitSettings<M>)\n{\n\tconst patternParts = Object.entries(settings.bracketsMap)\n\t\t// @ts-ignore\n\t\t.flatMap(([, { close, open }]) => close !== open ? [open, close] : open)\n\t\t.concat(Object.keys(settings.mentions || {}))\n\t\t.filter(Boolean)\n\n\tconst pattern = settings.arrayToPattern(patternParts)\n\tsettings.bracketsSearch = settings.createRegExp(pattern)\n\n\treturn settings\n}\n", "import { IIncludeSeparatorMode, ISplitSettings } from '../types';\n\nexport function createSeparatorsSearch<M extends IIncludeSeparatorMode>(settings: ISplitSettings<M>)\n{\n\tconst { separators } = settings\n\n\tif (typeof separators === 'string' || Array.isArray(separators))\n\t{\n\t\tconst pattern = settings.arrayToPattern([separators].flat().filter(Boolean))\n\t\tsettings.separatorSearch = settings.createRegExp(pattern)\n\t}\n\telse if (separators)\n\t{\n\t\tsettings.separatorSearch = separators\n\t\tsettings.ignoreCase = separators.ignoreCase\n\t}\n\telse\n\t{\n\t\tsettings.separatorSearch = /empty/\n\t}\n\n\treturn settings\n}\n", "import {\r\n\tEnumIncludeSeparatorMode,\r\n\tIBracketsInput,\r\n\tIGetPipeItemByIncludeSeparatorMode,\r\n\tIIncludeSeparatorMode,\r\n\tIParametersSplitSmartly,\r\n\tIParametersSplitSmartlyReturnQuery,\r\n\tIParametersSplitSmartlyReturnResult,\r\n\tISeparators,\r\n\tISplitFunction,\r\n\tISplitSettings,\r\n} from \"./types\"\r\nimport { createSplitFunction } from './createSplitFunction';\r\nimport { getSplitSmartlyArgs } from './util/getSplitSmartlyArgs';\r\nimport { prepareSearch } from './prepareSearch';\r\n\r\nexport { SearchResults } from './searchResults';\r\nexport { newDefaultSettings, newDefaultBrackets } from './util/newDefaultSettings';\r\n\r\nexport { createSplitFunction, getSplitSmartlyArgs, prepareSearch }\r\nexport { EnumIncludeSeparatorMode }\r\nexport type *  from \"./types\"\r\n\r\nexport function _splitSmartlyCore<M extends IIncludeSeparatorMode>(separators: ISeparators, settings: ISplitSettings<M>)\r\n{\r\n\tconst splitSettings = prepareSearch(separators, settings)\r\n\tconst splitFn = createSplitFunction(splitSettings)\r\n\r\n\treturn {\r\n\t\tsplitSettings,\r\n\t\tsplitFn,\r\n\t}\r\n}\r\n\r\nexport function splitSmartly<M extends IIncludeSeparatorMode>(...args: IParametersSplitSmartlyReturnQuery<M>): ISplitFunction<M>\r\nexport function splitSmartly<M extends IIncludeSeparatorMode>(...args: IParametersSplitSmartlyReturnResult<M>): IGetPipeItemByIncludeSeparatorMode<M> | IGetPipeItemByIncludeSeparatorMode<M>[]\r\nexport function splitSmartly<M extends IIncludeSeparatorMode>(...args: IParametersSplitSmartly<M>): ISplitFunction<M> | IGetPipeItemByIncludeSeparatorMode<M> | IGetPipeItemByIncludeSeparatorMode<M>[]\r\n{\r\n\tlet [str, separators, settings] = getSplitSmartlyArgs<M, M>(args as any)\r\n\r\n\tconst {\r\n\t\tsplitFn,\r\n\t} = _splitSmartlyCore(separators, settings);\r\n\r\n\t// @ts-ignore\r\n\treturn str !== null ? splitFn(str) : splitFn\r\n}\r\n\r\nexport function searchWithin<M extends IIncludeSeparatorMode>(...args: IParametersSplitSmartly<M> | [string, IBracketsInput])\r\n{\r\n\tif (args.length === 1)\r\n\t{\r\n\t\tif (typeof args[0] === 'string')\r\n\t\t{\r\n\t\t\targs.push(null, {})\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\targs.unshift(null)\r\n\t\t}\r\n\t}\r\n\r\n\t// @ts-ignore\r\n\tif (typeof args[1] !== 'object' || !args[1].brackets)\r\n\t{\r\n\t\t// @ts-ignore\r\n\t\targs[1] = { brackets: args[1] }\r\n\t}\r\n\r\n\targs.splice(1, 0, null)\r\n\r\n\treturn splitSmartly(...getSplitSmartlyArgs<M>(args as any, { searchWithin: true })) as string[]\r\n}\r\n\r\n//splitSmartly.searchWithin = searchWithin;\r\n\r\nexport function search(...args: IParametersSplitSmartly<EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY>)\r\n{\r\n\treturn splitSmartly(...getSplitSmartlyArgs(args, { includeSeparatorMode: EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY }))\r\n}\r\n\r\n//splitSmartly.search = search;\r\n\r\n/*\r\nexport const INCLUDE_SEPARATOR_NONE = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_NONE\r\nexport const INCLUDE_SEPARATOR_SEPARATELY = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_SEPARATELY\r\nexport const INCLUDE_SEPARATOR_LEFT = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_LEFT\r\nexport const INCLUDE_SEPARATOR_RIGHT = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_RIGHT\r\nexport const INCLUDE_SEPARATOR_ONLY = EnumIncludeSeparatorMode.INCLUDE_SEPARATOR_ONLY\r\n*\r\n */\r\n\r\nexport default splitSmartly\r\n", "import { crlf } from 'crlf-normalize';\n\nexport function inputToBytes(png: Uint8Array | string)\n{\n\t/**\n\t * if (typeof Buffer !== 'undefined' && Buffer.isBuffer(png))\n\t *   {\n\t *     bytes = Uint8Array.from(png)\n\t *     bin_str = png.toString()\n\t *   }\n\t *   else if (png instanceof Uint8Array)\n\t *   {\n\t *     bytes = png\n\t *     bin_str = png.toString()\n\t *   }\n\t */\n\tif (typeof Buffer !== 'undefined' && Buffer.isBuffer(png) || png instanceof Uint8Array)\n\t{\n\t\treturn png\n\t}\n\n\t/**\n\t * bin_str = atob(png.slice(0, 8192))\n\t * bytes = Uint8Array.from(bin_str, c => c.charCodeAt(0))\n\t */\n\treturn Uint8Array.from(atob(png.slice(0, 8192)), c => c.charCodeAt(0))\n}\n\n/**\n * get int32 from png compensating for endianness\n */\nexport function i32(a: Uint8Array, i: number)\n{\n\treturn new Uint32Array(new Uint8Array([...a.slice(i, i + 4)].reverse()).buffer)[0];\n}\n\nexport function _normalizeInputRaw(raw_info: string)\n{\n\traw_info = crlf(raw_info)\n\t\t.replace(/[ \\t\\xa0]+(?=\\n)/g, '')\n\t\t.replace(/\\n{3,}/g, '\\n\\n')\n\t\t.replace(/^[\\r\\n]+|[\\s\\r\\n]+$/g, '')\n\t;\n\n\treturn raw_info\n}\n", "/**\n * \\n\n */\nexport const RE_LINE_SPLIT_BASE = /\\r?\\n/;\n/**\n * ```\n * \\x00\\x00\\x00\\n\n * \\u200b\\u200b\\u200b\\n zero-width space\n * ```\n */\nexport const RE_LINE_SPLIT_PLUS = /(?:\\x00\\x00\\x00|\\u200b\\u200b\\u200b)\\r?\\n/;\n\n/**\n * Splits a raw string into an array of lines.\n *\n * @param raw_info - The raw string to split into lines.\n * @returns An array of lines extracted from the raw string.\n *\n * @example\n * ```typescript\n * const rawInfo = \"line1\\nline2\\r\\nline3\";\n * const lines = _splitRawToLines(rawInfo);\n * console.log(lines); // Output: [\"line1\", \"line2\", \"line3\"]\n * ```\n */\nexport function _splitRawToLines(raw_info: string)\n{\n\treturn raw_info.split(_isRawVersionPlus(raw_info) ? RE_LINE_SPLIT_PLUS : RE_LINE_SPLIT_BASE)\n}\n\n/**\n * Checks if the given raw string is in \"\\x00\\x00\\x00\\n\" format.\n *\n * @see https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/15713\n *\n * @param raw_info - The raw string to check.\n * @returns A boolean indicating whether the raw string is in \"\\x00\\x00\\x00\\n\" format.\n *\n * @example\n * ```typescript\n * const rawInfo = \"line1\\nline2\\x00\\x00\\x00\\r\\nline3\";\n * const isPlusFormat = _isRawVersionPlus(rawInfo);\n * console.log(isPlusFormat); // Output: true\n * ```\n */\nexport function _isRawVersionPlus(raw_info: string)\n{\n\treturn RE_LINE_SPLIT_PLUS.test(raw_info)\n}\n", "import { splitSmartly } from 'split-smartly2';\nimport { _isRawVersionPlus, _splitRawToLines } from './split';\nimport { _normalizeInputRaw } from './utils';\n\n/**\n * `${key}: ${value}`\n */\nexport function _parseLine(line: string)\n{\n\tconst [, key, value] = line.match(/^([^:]+)\\s*:\\s*(.*)$/);\n\treturn [key, value] as const\n}\n\n/**\n * Parses an info line into key-value pairs.\n *\n * @param infoline - The info line to parse.\n * @returns An array of tuples, where each tuple contains a key-value pair.\n *\n * @remarks\n * This function uses the `splitSmartly` function from the 'split-smartly2' package to split the info line into key-value pairs.\n * The info line is expected to be in the format `${key}: ${value}`, separated by commas.\n * The `splitSmartly` function is configured to handle nested brackets and trim separators.\n *\n * @example\n * ```typescript\n * const infoLine = 'key1: value1, key2: value2, key3: value3';\n * const result = _parseInfoLine(infoLine);\n * // result: [['key1', 'value1'], ['key2', 'value2'], ['key3', 'value3']]\n * ```\n */\nexport function _parseInfoLine(infoline: string)\n{\n\tinfoline = _normalizeInputRaw(infoline);\n\n\tconst entries = splitSmartly(infoline, [','], {\n\t\tbrackets: true,\n\t\ttrimSeparators: true,\n\t}) as string[];\n\n\treturn entries.reduce((entries, line) => {\n\t\t/**\n\t\t * avoid empty line\n\t\t */\n\t\tif (line?.length)\n\t\t{\n\t\t\tconst entry = _parseLine(line);\n\t\t\tentries.push(entry)\n\t\t}\n\n\t\treturn entries\n\t}, [] as (readonly [string, string])[])\n}\n\n/**\n * Extracts prompt, negative prompt, info line, and extra info from a raw info string.\n *\n * @param raw_info - The raw info string to extract data from.\n * @returns An object containing the extracted prompt, negative prompt, info line, extra info, and the original lines.\n *\n * @throws Will throw a TypeError if the raw info string is in Plus version and contains more than 3 lines.\n *\n * @remarks\n * This function first checks if the raw info string is in Plus version using the `_isRawVersionPlus` function.\n * It then splits the raw info string into lines using the `_splitRawToLines` function.\n * Depending on the version, it extracts the prompt, negative prompt, info line, and extra info.\n * If the raw info string is in Plus version, it follows a specific order to extract the data.\n * If the raw info string is not in Plus version, it uses the `findIndex` method to find the indices of the negative prompt and steps,\n * and then extracts the data accordingly.\n * Finally, it returns an object containing the extracted data and the original lines.\n *\n * @example\n * ```typescript\n * const rawInfo = 'Prompt:...\\nNegative prompt:...\\nSteps:...';\n * const result = extractPromptAndInfoFromRaw(rawInfo);\n * // result: {\n * //   prompt: '...',\n * //   negative_prompt: '...',\n * //   infoline: 'Steps:...',\n * //   infoline_extra: [],\n * //   lines_raw: ['Prompt:...', 'Negative prompt:...', 'Steps:...'],\n * // }\n * ```\n */\nexport function extractPromptAndInfoFromRaw(raw_info: string)\n{\n\traw_info = _normalizeInputRaw(raw_info);\n\n\tconst isPlus = _isRawVersionPlus(raw_info);\n\tlet lines = _splitRawToLines(raw_info);\n\n\tlet prompt: string = '';\n\tlet negative_prompt: string = '';\n\tlet infoline: string = '';\n\tlet infoline_extra: string[] = [];\n\n\tconst lines_raw = lines.slice();\n\n\tif (lines.length)\n\t{\n\t\tif (isPlus)\n\t\t{\n\t\t\tif (lines.length > 3)\n\t\t\t{\n\t\t\t\tthrow new TypeError()\n\t\t\t}\n\n\t\t\tlet line = lines.pop();\n\n\t\t\tif (line.startsWith('Steps: '))\n\t\t\t{\n\t\t\t\tinfoline = line;\n\t\t\t\tline = void 0\n\t\t\t}\n\n\t\t\tline ??= lines.pop();\n\n\t\t\tif (line.startsWith('Negative prompt: '))\n\t\t\t{\n\t\t\t\tnegative_prompt = line.slice('Negative prompt: '.length);\n\t\t\t\tline = void 0\n\t\t\t}\n\n\t\t\tline ??= lines.pop();\n\n\t\t\tprompt = line;\n\n\t\t\tif (lines.length)\n\t\t\t{\n\t\t\t\tthrow new TypeError()\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet line = lines[lines.length - 1];\n\t\t\tif (line.startsWith('Steps: '))\n\t\t\t{\n\t\t\t\tinfoline = lines.pop();\n\t\t\t\tline = void 0\n\t\t\t}\n\n\t\t\tif (lines.length)\n\t\t\t{\n\t\t\t\tlet idx = -1;\n\t\t\t\tfor (let i = lines.length - 1; i >= 0; i--)\n\t\t\t\t{\n\t\t\t\t\tline = lines[i];\n\t\t\t\t\tif (line.startsWith('Negative prompt: '))\n\t\t\t\t\t{\n\t\t\t\t\t\tidx = i;\n\t\t\t\t\t\tlines[i] = line.slice('Negative prompt: '.length);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (idx !== -1)\n\t\t\t\t{\n\t\t\t\t\tnegative_prompt = lines.splice(idx).join('\\n');\n\t\t\t\t}\n\n\t\t\t\tprompt = lines.join('\\n');\n\t\t\t}\n\t\t}\n\n\t\tprompt = prompt.replace(/\\x00\\x00\\x00/g, '');\n\t\tnegative_prompt = negative_prompt.replace(/\\x00\\x00\\x00/g, '');\n\t}\n\n\treturn {\n\t\tprompt,\n\t\tnegative_prompt,\n\t\tinfoline,\n\t\tinfoline_extra,\n\t\tlines_raw,\n\t}\n}\n", "import { i32 } from './utils';\n\nconst BYTES_pngmagic = '137,80,78,71,13,10,26,10';\nconst BYTES_tEXt = Uint8Array.from('tEXt', c => c.charCodeAt(0)).join(',');\n\nconst OFFSET_parameters = \"parameters\\u0000\".length\n\nexport function uint8arrayToString(uint8array: Uint8Array)\n{\n\treturn new TextDecoder().decode(uint8array)\n}\n\n/**\n * ```\n * new TextEncoder().encode(inputString)\n * String.fromCharCode(...raw_info)\n * ```\n */\nexport function stringToUint8Array(inputString: string)\n{\n\treturn new TextEncoder().encode(inputString);\n}\n\n/**\n * Extracts raw data from a PNG byte array.\n *\n * @param bytes - The Uint8Array containing the PNG data.\n * @returns An object containing the width, height, and raw_info extracted from the PNG data,\n *          or `undefined` if the PNG data does not contain a valid tEXt chunk.\n */\nexport function extractRawFromBytes(bytes: Uint8Array)\n{\n\t// Check if the bytes represent a valid PNG file by comparing the magic number\n\tconst pngmagic = bytes.slice(0, 8).join(',') === BYTES_pngmagic\n\tif (!pngmagic) return undefined\n\n\t// Extract the width, height, and IHDR size from the PNG data\n\tconst [ihdrSize, width, height] = [i32(bytes, 8), i32(bytes, 16), i32(bytes, 20)];\n\n\t// Calculate the offset of the tEXt chunk in the PNG data\n\tconst txtOffset = 8 + ihdrSize + 12;\n\n\t// Check if the tEXt chunk is present by comparing the chunk type\n\tif (bytes.slice(txtOffset + 4, txtOffset + 8).join(',') !== BYTES_tEXt) return undefined\n\n\t// Extract the size of the tEXt chunk data\n\tconst txtSize = i32(bytes, txtOffset);\n\n\t// Extract the raw_info data from the tEXt chunk\n\tconst raw_info = bytes.slice(txtOffset + 8 + OFFSET_parameters, txtOffset + 8 + txtSize);\n\n\t// Convert the raw_info data to a string\n\tconst raw_info_str = uint8arrayToString(raw_info);\n\n\t// Return the extracted data\n\treturn {\n\t\twidth,\n\t\theight,\n\t\traw_info: raw_info_str,\n\t}\n}\n", "import { IOptionsInfoparser } from './index';\n\nexport function keyToSnakeStyle1(key: string)\n{\n\treturn key.toLowerCase().replace(/ /g, '_')\n}\n\nexport function handleInfoEntries(entries: readonly (readonly [string, string])[], opts?: IOptionsInfoparser)\n{\n\tconst cast_to_snake = opts?.cast_to_snake;\n\tconst re = /^0\\d/;\n\n\treturn entries.map(([key, value]) =>\n\t{\n\t\tconst asNum = parseFloat(value);\n\t\tconst isNotNum = (re.test(value)) || isNaN(asNum) || ((value as any as number) - asNum) !== 0;\n\n\t\tif (cast_to_snake) key = keyToSnakeStyle1(key)\n\n\t\tconst out = [key, isNotNum ? value : asNum] as const;\n\t\treturn out\n\t})\n}\n", "import { _normalizeInputRaw, inputToBytes } from './utils';\nimport { _parseInfoLine, _parseLine, extractPromptAndInfoFromRaw } from './parser';\nimport { extractRawFromBytes } from './png';\nimport { handleInfoEntries } from './handler';\n\nexport { _splitRawToLines } from './split';\nexport {\n  extractPromptAndInfoFromRaw,\n  _parseInfoLine,\n  _parseLine,\n  handleInfoEntries,\n  _normalizeInputRaw\n}\n\nexport interface IOptionsInfoparser\n{\n  cast_to_snake?: boolean;\n  /**\n   * If true, prompt and negative_prompt are included in the input\n   */\n  isIncludePrompts?: boolean;\n}\n\nexport interface IRecordInfo\n{\n  prompt: string;\n  negative_prompt: string;\n  [k: string]: string | number;\n}\n\n/**\n * Parses raw info line and returns an object with the extracted data.\n *\n * @param line - The raw info line to parse.\n * @param opts - Optional parameters.\n * @param opts.cast_to_snake - If true, keys will be converted to snake_case. Default is false.\n * @param opts.isIncludePrompts - If true, prompt and negative_prompt will be included in the result. Default is false.\n *\n * @returns An object containing the extracted data.\n *\n * @example\n * ```typescript\n * const rawInfo = \"my prompt, Negative prompt: my negative prompt, width: 512, height: 512\";\n * const parsedData = parseFromRawInfo(rawInfo, { isIncludePrompts: true });\n * console.log(parsedData);\n * // Output: { prompt: 'my prompt', Negative prompt: 'my negative prompt', width: 512, height: 512 }\n * ```\n */\nexport function parseFromRawInfo(line: string, opts?: IOptionsInfoparser): IRecordInfo\n{\n  let base = [] as ReturnType<typeof handleInfoEntries>\n  if (opts?.isIncludePrompts)\n  {\n    const {\n      prompt,\n      negative_prompt,\n      infoline,\n    } = extractPromptAndInfoFromRaw(line);\n\n    base.push(['prompt', prompt]);\n    base.push(['negative_prompt', negative_prompt]);\n    line = infoline;\n  }\n\n  return Object.fromEntries(base.concat(handleInfoEntries(_parseInfoLine(line), opts))) as IRecordInfo\n}\n\n/**\n * @example\n * import fs from 'fs/promises'\n * import parseFromImageBuffer from '@bluelovers/auto1111-pnginfo'\n *\n * const file = await fs.readFile('generate_waifu.png')\n * const info = parseFromImageBuffer(file)\n *\n * console.log(info)\n */\nexport function parseFromImageBuffer(png: Uint8Array | string, cast_to_snake = false)\n{\n  let bytes = inputToBytes(png) as Uint8Array;\n\n  const raw = extractRawFromBytes(bytes);\n  if (!raw) return;\n\n  const {\n    raw_info,\n    width,\n    height\n  } = raw;\n\n  const {\n    prompt,\n    negative_prompt,\n    infoline,\n    infoline_extra,\n    //lines_raw,\n  } = extractPromptAndInfoFromRaw(raw_info as any)\n\n  let data = parseFromRawInfo(infoline, {\n    cast_to_snake\n  });\n\n  let output = {\n    metadata: {\n      width,\n      height,\n      extra: infoline_extra,\n      raw_info\n    },\n    pnginfo: {\n      prompt,\n      negative_prompt,\n      ...data,\n    },\n  }\n\n  return output\n}\n\nexport default parseFromImageBuffer\n", "import { IOptionsInfoparser } from '@bluelovers/auto1111-pnginfo';\n\nexport const EXTENSION_NAME = 'sd-webui-pnginfo-beautify';\n\nexport const CLASS_PREFIX = 'shiki_infotext_';\n\nexport const tabs = [\n\t'#html_info_txt2img',\n\t'#html_info_img2img',\n\t['#tab_pnginfo .html-log.prose', true],\n\t['#html_info_x_extras.prose', true, {\n\t\tisIncludePrompts: false,\n\t}],\n\t['#html_info_extras.prose', true, {\n\t\tisIncludePrompts: false,\n\t}],\n\t['#html_info_replacer.prose', true],\n] satisfies (string | [string, boolean, opts?: IOptionsInfoparser])[];\n", "import { parseFromRawInfo } from '@bluelovers/auto1111-pnginfo';\n\ntype IDecodeFn = (key: string, value: string) => string\n\nexport interface IRowConfigOptions\n{\n\tfull?: boolean,\n\n\tsyntaxHighlighter?: boolean,\n\tsyntaxLang?: string,\n\n\tdecode?: boolean | IDecodeFn,\n\tdisableEscapeHTML?: boolean,\n}\n\nexport const RowConfigMap = new Map<string, IRowConfigOptions>();\n\n[\n\t'Positive Prompt',\n\t'Negative Prompt',\n].forEach(key => RowConfigMap.set(key, {\n\tfull: true,\n\tsyntaxHighlighter: true,\n}));\n\n[\n\t'sv_prompt',\n\t'Template',\n].forEach(key => RowConfigMap.set(key, {\n\tfull: true,\n\tsyntaxHighlighter: true,\n\tdecode: true,\n}));\n\n[\n\t'TI hashes',\n\t'Lora hashes',\n].forEach(key => RowConfigMap.set(key, {\n\tdecode: decodeHashs,\n\tdisableEscapeHTML: true,\n}));\n\n[\n\t'Model hash',\n\t'Model',\n\t'VAE hash',\n\t'VAE',\n\t'ADetailer model',\n].forEach(key => RowConfigMap.set(key, {\n\tdecode(key, value)\n\t{\n\t\treturn `<span>${value}</span> ${_search(value)}`\n\t},\n\tdisableEscapeHTML: true,\n}));\n\nfunction _search(query: unknown, text = '&#x1F50E;')\n{\n\tlet href = `https://civitai.com/search/models?sortBy=models_v9&query=${query}`;\n\treturn `<a href=\"${href.toString()}\" target=\"_blank\">${text}</a>`\n}\n\nfunction decodeHashs(key, input: string)\n{\n\tlet map = parseFromRawInfo(JSON.parse(input));\n\n\tlet list: string[] = [];\n\n\tObject.entries(map)\n\t\t.forEach(([key, value]) => {\n\t\t\tlist.push(`<div>${_search(key, '&#x1F50D;')} <span>${key}</span>: <span>${value}</span> ${_search(value)}</div>`)\n\t\t})\n\t;\n\n\treturn list.join('')\n}\n", "var FontStyle;\n(function (FontStyle) {\n    FontStyle[FontStyle[\"NotSet\"] = -1] = \"NotSet\";\n    FontStyle[FontStyle[\"None\"] = 0] = \"None\";\n    FontStyle[FontStyle[\"Italic\"] = 1] = \"Italic\";\n    FontStyle[FontStyle[\"Bold\"] = 2] = \"Bold\";\n    FontStyle[FontStyle[\"Underline\"] = 4] = \"Underline\";\n})(FontStyle || (FontStyle = {}));\n\nexport { FontStyle };\n", "import { FontStyle } from './types.mjs';\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n({\n    InDebugMode: (typeof process !== 'undefined' && !!process.env['VSCODE_TEXTMATE_DEBUG'])\n});\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nvar EncodedTokenAttributes;\n(function (EncodedTokenAttributes) {\n    function toBinaryStr(encodedTokenAttributes) {\n        return encodedTokenAttributes.toString(2).padStart(32, \"0\");\n    }\n    EncodedTokenAttributes.toBinaryStr = toBinaryStr;\n    function print(encodedTokenAttributes) {\n        const languageId = EncodedTokenAttributes.getLanguageId(encodedTokenAttributes);\n        const tokenType = EncodedTokenAttributes.getTokenType(encodedTokenAttributes);\n        const fontStyle = EncodedTokenAttributes.getFontStyle(encodedTokenAttributes);\n        const foreground = EncodedTokenAttributes.getForeground(encodedTokenAttributes);\n        const background = EncodedTokenAttributes.getBackground(encodedTokenAttributes);\n        console.log({\n            languageId: languageId,\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: foreground,\n            background: background,\n        });\n    }\n    EncodedTokenAttributes.print = print;\n    function getLanguageId(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 255 /* EncodedTokenDataConsts.LANGUAGEID_MASK */) >>>\n            0 /* EncodedTokenDataConsts.LANGUAGEID_OFFSET */);\n    }\n    EncodedTokenAttributes.getLanguageId = getLanguageId;\n    function getTokenType(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 768 /* EncodedTokenDataConsts.TOKEN_TYPE_MASK */) >>>\n            8 /* EncodedTokenDataConsts.TOKEN_TYPE_OFFSET */);\n    }\n    EncodedTokenAttributes.getTokenType = getTokenType;\n    function containsBalancedBrackets(encodedTokenAttributes) {\n        return (encodedTokenAttributes & 1024 /* EncodedTokenDataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    EncodedTokenAttributes.containsBalancedBrackets = containsBalancedBrackets;\n    function getFontStyle(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 30720 /* EncodedTokenDataConsts.FONT_STYLE_MASK */) >>>\n            11 /* EncodedTokenDataConsts.FONT_STYLE_OFFSET */);\n    }\n    EncodedTokenAttributes.getFontStyle = getFontStyle;\n    function getForeground(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 16744448 /* EncodedTokenDataConsts.FOREGROUND_MASK */) >>>\n            15 /* EncodedTokenDataConsts.FOREGROUND_OFFSET */);\n    }\n    EncodedTokenAttributes.getForeground = getForeground;\n    function getBackground(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 4278190080 /* EncodedTokenDataConsts.BACKGROUND_MASK */) >>>\n            24 /* EncodedTokenDataConsts.BACKGROUND_OFFSET */);\n    }\n    EncodedTokenAttributes.getBackground = getBackground;\n    /**\n     * Updates the fields in `metadata`.\n     * A value of `0`, `NotSet` or `null` indicates that the corresponding field should be left as is.\n     */\n    function set(encodedTokenAttributes, languageId, tokenType, containsBalancedBrackets, fontStyle, foreground, background) {\n        let _languageId = EncodedTokenAttributes.getLanguageId(encodedTokenAttributes);\n        let _tokenType = EncodedTokenAttributes.getTokenType(encodedTokenAttributes);\n        let _containsBalancedBracketsBit = EncodedTokenAttributes.containsBalancedBrackets(encodedTokenAttributes) ? 1 : 0;\n        let _fontStyle = EncodedTokenAttributes.getFontStyle(encodedTokenAttributes);\n        let _foreground = EncodedTokenAttributes.getForeground(encodedTokenAttributes);\n        let _background = EncodedTokenAttributes.getBackground(encodedTokenAttributes);\n        if (languageId !== 0) {\n            _languageId = languageId;\n        }\n        if (tokenType !== 8 /* OptionalStandardTokenType.NotSet */) {\n            _tokenType = fromOptionalTokenType(tokenType);\n        }\n        if (containsBalancedBrackets !== null) {\n            _containsBalancedBracketsBit = containsBalancedBrackets ? 1 : 0;\n        }\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            _fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            _foreground = foreground;\n        }\n        if (background !== 0) {\n            _background = background;\n        }\n        return (((_languageId << 0 /* EncodedTokenDataConsts.LANGUAGEID_OFFSET */) |\n            (_tokenType << 8 /* EncodedTokenDataConsts.TOKEN_TYPE_OFFSET */) |\n            (_containsBalancedBracketsBit <<\n                10 /* EncodedTokenDataConsts.BALANCED_BRACKETS_OFFSET */) |\n            (_fontStyle << 11 /* EncodedTokenDataConsts.FONT_STYLE_OFFSET */) |\n            (_foreground << 15 /* EncodedTokenDataConsts.FOREGROUND_OFFSET */) |\n            (_background << 24 /* EncodedTokenDataConsts.BACKGROUND_OFFSET */)) >>>\n            0);\n    }\n    EncodedTokenAttributes.set = set;\n})(EncodedTokenAttributes || (EncodedTokenAttributes = {}));\nfunction toOptionalTokenType(standardType) {\n    return standardType;\n}\nfunction fromOptionalTokenType(standardType) {\n    return standardType;\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction createMatchers(selector, matchesName) {\n    const results = [];\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        let matcher = parseConjunction();\n        results.push({ matcher, priority });\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    return results;\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            return matcherInput => !!expressionToNegate && !expressionToNegate(matcherInput);\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        const matchers = [];\n        let matcher = parseOperand();\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => matchers.every(matcher => matcher(matcherInput)); // and\n    }\n    function parseInnerExpression() {\n        const matchers = [];\n        let matcher = parseConjunction();\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ','); // ignore subsequent commas\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => matchers.some(matcher => matcher(matcherInput)); // or\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    let regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction disposeOnigString(str) {\n    if (typeof str.dispose === 'function') {\n        str.dispose();\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction clone(something) {\n    return doClone(something);\n}\nfunction doClone(something) {\n    if (Array.isArray(something)) {\n        return cloneArray(something);\n    }\n    if (typeof something === 'object') {\n        return cloneObj(something);\n    }\n    return something;\n}\nfunction cloneArray(arr) {\n    let r = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n        r[i] = doClone(arr[i]);\n    }\n    return r;\n}\nfunction cloneObj(obj) {\n    let r = {};\n    for (let key in obj) {\n        r[key] = doClone(obj[key]);\n    }\n    return r;\n}\nfunction mergeObjects(target, ...sources) {\n    sources.forEach(source => {\n        for (let key in source) {\n            target[key] = source[key];\n        }\n    });\n    return target;\n}\nfunction basename(path) {\n    const idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n    if (idx === 0) {\n        return path;\n    }\n    else if (~idx === path.length - 1) {\n        return basename(path.substring(0, path.length - 1));\n    }\n    else {\n        return path.substr(~idx + 1);\n    }\n}\nlet CAPTURING_REGEX_SOURCE = /\\$(\\d+)|\\${(\\d+):\\/(downcase|upcase)}/g;\nclass RegexSource {\n    static hasCaptures(regexSource) {\n        if (regexSource === null) {\n            return false;\n        }\n        CAPTURING_REGEX_SOURCE.lastIndex = 0;\n        return CAPTURING_REGEX_SOURCE.test(regexSource);\n    }\n    static replaceCaptures(regexSource, captureSource, captureIndices) {\n        return regexSource.replace(CAPTURING_REGEX_SOURCE, (match, index, commandIndex, command) => {\n            let capture = captureIndices[parseInt(index || commandIndex, 10)];\n            if (capture) {\n                let result = captureSource.substring(capture.start, capture.end);\n                // Remove leading dots that would make the selector invalid\n                while (result[0] === '.') {\n                    result = result.substring(1);\n                }\n                switch (command) {\n                    case 'downcase':\n                        return result.toLowerCase();\n                    case 'upcase':\n                        return result.toUpperCase();\n                    default:\n                        return result;\n                }\n            }\n            else {\n                return match;\n            }\n        });\n    }\n}\nfunction strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nfunction strArrCmp(a, b) {\n    if (a === null && b === null) {\n        return 0;\n    }\n    if (!a) {\n        return -1;\n    }\n    if (!b) {\n        return 1;\n    }\n    let len1 = a.length;\n    let len2 = b.length;\n    if (len1 === len2) {\n        for (let i = 0; i < len1; i++) {\n            let res = strcmp(a[i], b[i]);\n            if (res !== 0) {\n                return res;\n            }\n        }\n        return 0;\n    }\n    return len1 - len2;\n}\nfunction isValidHexColor(hex) {\n    if (/^#[0-9a-f]{6}$/i.test(hex)) {\n        // #rrggbb\n        return true;\n    }\n    if (/^#[0-9a-f]{8}$/i.test(hex)) {\n        // #rrggbbaa\n        return true;\n    }\n    if (/^#[0-9a-f]{3}$/i.test(hex)) {\n        // #rgb\n        return true;\n    }\n    if (/^#[0-9a-f]{4}$/i.test(hex)) {\n        // #rgba\n        return true;\n    }\n    return false;\n}\n/**\n * Escapes regular expression characters in a given string\n */\nfunction escapeRegExpCharacters(value) {\n    return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&');\n}\nclass CachedFn {\n    fn;\n    cache = new Map();\n    constructor(fn) {\n        this.fn = fn;\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        const value = this.fn(key);\n        this.cache.set(key, value);\n        return value;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n/**\n * References the top level rule of a grammar with the given scope name.\n*/\nclass TopLevelRuleReference {\n    scopeName;\n    constructor(scopeName) {\n        this.scopeName = scopeName;\n    }\n    toKey() {\n        return this.scopeName;\n    }\n}\n/**\n * References a rule of a grammar in the top level repository section with the given name.\n*/\nclass TopLevelRepositoryRuleReference {\n    scopeName;\n    ruleName;\n    constructor(scopeName, ruleName) {\n        this.scopeName = scopeName;\n        this.ruleName = ruleName;\n    }\n    toKey() {\n        return `${this.scopeName}#${this.ruleName}`;\n    }\n}\nclass ExternalReferenceCollector {\n    _references = [];\n    _seenReferenceKeys = new Set();\n    get references() {\n        return this._references;\n    }\n    visitedRule = new Set();\n    add(reference) {\n        const key = reference.toKey();\n        if (this._seenReferenceKeys.has(key)) {\n            return;\n        }\n        this._seenReferenceKeys.add(key);\n        this._references.push(reference);\n    }\n}\nclass ScopeDependencyProcessor {\n    repo;\n    initialScopeName;\n    seenFullScopeRequests = new Set();\n    seenPartialScopeRequests = new Set();\n    Q;\n    constructor(repo, initialScopeName) {\n        this.repo = repo;\n        this.initialScopeName = initialScopeName;\n        this.seenFullScopeRequests.add(this.initialScopeName);\n        this.Q = [new TopLevelRuleReference(this.initialScopeName)];\n    }\n    processQueue() {\n        const q = this.Q;\n        this.Q = [];\n        const deps = new ExternalReferenceCollector();\n        for (const dep of q) {\n            collectReferencesOfReference(dep, this.initialScopeName, this.repo, deps);\n        }\n        for (const dep of deps.references) {\n            if (dep instanceof TopLevelRuleReference) {\n                if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                    // already processed\n                    continue;\n                }\n                this.seenFullScopeRequests.add(dep.scopeName);\n                this.Q.push(dep);\n            }\n            else {\n                if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                    // already processed in full\n                    continue;\n                }\n                if (this.seenPartialScopeRequests.has(dep.toKey())) {\n                    // already processed\n                    continue;\n                }\n                this.seenPartialScopeRequests.add(dep.toKey());\n                this.Q.push(dep);\n            }\n        }\n    }\n}\nfunction collectReferencesOfReference(reference, baseGrammarScopeName, repo, result) {\n    const selfGrammar = repo.lookup(reference.scopeName);\n    if (!selfGrammar) {\n        if (reference.scopeName === baseGrammarScopeName) {\n            throw new Error(`No grammar provided for <${baseGrammarScopeName}>`);\n        }\n        return;\n    }\n    const baseGrammar = repo.lookup(baseGrammarScopeName);\n    if (reference instanceof TopLevelRuleReference) {\n        collectExternalReferencesInTopLevelRule({ baseGrammar, selfGrammar }, result);\n    }\n    else {\n        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { baseGrammar, selfGrammar, repository: selfGrammar.repository }, result);\n    }\n    const injections = repo.injections(reference.scopeName);\n    if (injections) {\n        for (const injection of injections) {\n            result.add(new TopLevelRuleReference(injection));\n        }\n    }\n}\nfunction collectExternalReferencesInTopLevelRepositoryRule(ruleName, context, result) {\n    if (context.repository && context.repository[ruleName]) {\n        const rule = context.repository[ruleName];\n        collectExternalReferencesInRules([rule], context, result);\n    }\n}\nfunction collectExternalReferencesInTopLevelRule(context, result) {\n    if (context.selfGrammar.patterns && Array.isArray(context.selfGrammar.patterns)) {\n        collectExternalReferencesInRules(context.selfGrammar.patterns, { ...context, repository: context.selfGrammar.repository }, result);\n    }\n    if (context.selfGrammar.injections) {\n        collectExternalReferencesInRules(Object.values(context.selfGrammar.injections), { ...context, repository: context.selfGrammar.repository }, result);\n    }\n}\nfunction collectExternalReferencesInRules(rules, context, result) {\n    for (const rule of rules) {\n        if (result.visitedRule.has(rule)) {\n            continue;\n        }\n        result.visitedRule.add(rule);\n        const patternRepository = rule.repository ? mergeObjects({}, context.repository, rule.repository) : context.repository;\n        if (Array.isArray(rule.patterns)) {\n            collectExternalReferencesInRules(rule.patterns, { ...context, repository: patternRepository }, result);\n        }\n        const include = rule.include;\n        if (!include) {\n            continue;\n        }\n        const reference = parseInclude(include);\n        switch (reference.kind) {\n            case 0 /* IncludeReferenceKind.Base */:\n                collectExternalReferencesInTopLevelRule({ ...context, selfGrammar: context.baseGrammar }, result);\n                break;\n            case 1 /* IncludeReferenceKind.Self */:\n                collectExternalReferencesInTopLevelRule(context, result);\n                break;\n            case 2 /* IncludeReferenceKind.RelativeReference */:\n                collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { ...context, repository: patternRepository }, result);\n                break;\n            case 3 /* IncludeReferenceKind.TopLevelReference */:\n            case 4 /* IncludeReferenceKind.TopLevelRepositoryReference */:\n                const selfGrammar = reference.scopeName === context.selfGrammar.scopeName\n                    ? context.selfGrammar\n                    : reference.scopeName === context.baseGrammar.scopeName\n                        ? context.baseGrammar\n                        : undefined;\n                if (selfGrammar) {\n                    const newContext = { baseGrammar: context.baseGrammar, selfGrammar, repository: patternRepository };\n                    if (reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */) {\n                        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, newContext, result);\n                    }\n                    else {\n                        collectExternalReferencesInTopLevelRule(newContext, result);\n                    }\n                }\n                else {\n                    if (reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */) {\n                        result.add(new TopLevelRepositoryRuleReference(reference.scopeName, reference.ruleName));\n                    }\n                    else {\n                        result.add(new TopLevelRuleReference(reference.scopeName));\n                    }\n                }\n                break;\n        }\n    }\n}\nclass BaseReference {\n    kind = 0 /* IncludeReferenceKind.Base */;\n}\nclass SelfReference {\n    kind = 1 /* IncludeReferenceKind.Self */;\n}\nclass RelativeReference {\n    ruleName;\n    kind = 2 /* IncludeReferenceKind.RelativeReference */;\n    constructor(ruleName) {\n        this.ruleName = ruleName;\n    }\n}\nclass TopLevelReference {\n    scopeName;\n    kind = 3 /* IncludeReferenceKind.TopLevelReference */;\n    constructor(scopeName) {\n        this.scopeName = scopeName;\n    }\n}\nclass TopLevelRepositoryReference {\n    scopeName;\n    ruleName;\n    kind = 4 /* IncludeReferenceKind.TopLevelRepositoryReference */;\n    constructor(scopeName, ruleName) {\n        this.scopeName = scopeName;\n        this.ruleName = ruleName;\n    }\n}\nfunction parseInclude(include) {\n    if (include === '$base') {\n        return new BaseReference();\n    }\n    else if (include === '$self') {\n        return new SelfReference();\n    }\n    const indexOfSharp = include.indexOf(\"#\");\n    if (indexOfSharp === -1) {\n        return new TopLevelReference(include);\n    }\n    else if (indexOfSharp === 0) {\n        return new RelativeReference(include.substring(1));\n    }\n    else {\n        const scopeName = include.substring(0, indexOfSharp);\n        const ruleName = include.substring(indexOfSharp + 1);\n        return new TopLevelRepositoryReference(scopeName, ruleName);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nconst HAS_BACK_REFERENCES = /\\\\(\\d+)/;\nconst BACK_REFERENCING_END = /\\\\(\\d+)/g;\n// This is a special constant to indicate that the end regexp matched.\nconst endRuleId = -1;\n// This is a special constant to indicate that the while regexp matched.\nconst whileRuleId = -2;\nfunction ruleIdFromNumber(id) {\n    return id;\n}\nfunction ruleIdToNumber(id) {\n    return id;\n}\nclass Rule {\n    $location;\n    id;\n    _nameIsCapturing;\n    _name;\n    _contentNameIsCapturing;\n    _contentName;\n    constructor($location, id, name, contentName) {\n        this.$location = $location;\n        this.id = id;\n        this._name = name || null;\n        this._nameIsCapturing = RegexSource.hasCaptures(this._name);\n        this._contentName = contentName || null;\n        this._contentNameIsCapturing = RegexSource.hasCaptures(this._contentName);\n    }\n    get debugName() {\n        const location = this.$location ? `${basename(this.$location.filename)}:${this.$location.line}` : 'unknown';\n        return `${this.constructor.name}#${this.id} @ ${location}`;\n    }\n    getName(lineText, captureIndices) {\n        if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {\n            return this._name;\n        }\n        return RegexSource.replaceCaptures(this._name, lineText, captureIndices);\n    }\n    getContentName(lineText, captureIndices) {\n        if (!this._contentNameIsCapturing || this._contentName === null) {\n            return this._contentName;\n        }\n        return RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);\n    }\n}\nclass CaptureRule extends Rule {\n    retokenizeCapturedWithRuleId;\n    constructor($location, id, name, contentName, retokenizeCapturedWithRuleId) {\n        super($location, id, name, contentName);\n        this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;\n    }\n    dispose() {\n        // nothing to dispose\n    }\n    collectPatterns(grammar, out) {\n        throw new Error('Not supported!');\n    }\n    compile(grammar, endRegexSource) {\n        throw new Error('Not supported!');\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        throw new Error('Not supported!');\n    }\n}\nclass MatchRule extends Rule {\n    _match;\n    captures;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, match, captures) {\n        super($location, id, name, null);\n        this._match = new RegExpSource(match, this.id);\n        this.captures = captures;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    get debugMatchRegExp() {\n        return `${this._match.source}`;\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._match);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatterns(grammar, this._cachedCompiledPatterns);\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass IncludeOnlyRule extends Rule {\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, contentName, patterns) {\n        super($location, id, name, contentName);\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    collectPatterns(grammar, out) {\n        for (const pattern of this.patterns) {\n            const rule = grammar.getRule(pattern);\n            rule.collectPatterns(grammar, out);\n        }\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatterns(grammar, this._cachedCompiledPatterns);\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass BeginEndRule extends Rule {\n    _begin;\n    beginCaptures;\n    _end;\n    endHasBackReferences;\n    endCaptures;\n    applyEndPatternLast;\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {\n        super($location, id, name, contentName);\n        this._begin = new RegExpSource(begin, this.id);\n        this.beginCaptures = beginCaptures;\n        this._end = new RegExpSource(end ? end : '\\uFFFF', -1);\n        this.endHasBackReferences = this._end.hasBackReferences;\n        this.endCaptures = endCaptures;\n        this.applyEndPatternLast = applyEndPatternLast || false;\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    get debugBeginRegExp() {\n        return `${this._begin.source}`;\n    }\n    get debugEndRegExp() {\n        return `${this._end.source}`;\n    }\n    getEndWithResolvedBackReferences(lineText, captureIndices) {\n        return this._end.resolveBackReferences(lineText, captureIndices);\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._begin);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar, endRegexSource) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            for (const pattern of this.patterns) {\n                const rule = grammar.getRule(pattern);\n                rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n            }\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n            else {\n                this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n        }\n        if (this._end.hasBackReferences) {\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);\n            }\n            else {\n                this._cachedCompiledPatterns.setSource(0, endRegexSource);\n            }\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass BeginWhileRule extends Rule {\n    _begin;\n    beginCaptures;\n    whileCaptures;\n    _while;\n    whileHasBackReferences;\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    _cachedCompiledWhilePatterns;\n    constructor($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {\n        super($location, id, name, contentName);\n        this._begin = new RegExpSource(begin, this.id);\n        this.beginCaptures = beginCaptures;\n        this.whileCaptures = whileCaptures;\n        this._while = new RegExpSource(_while, whileRuleId);\n        this.whileHasBackReferences = this._while.hasBackReferences;\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n        this._cachedCompiledWhilePatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n        if (this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns.dispose();\n            this._cachedCompiledWhilePatterns = null;\n        }\n    }\n    get debugBeginRegExp() {\n        return `${this._begin.source}`;\n    }\n    get debugWhileRegExp() {\n        return `${this._while.source}`;\n    }\n    getWhileWithResolvedBackReferences(lineText, captureIndices) {\n        return this._while.resolveBackReferences(lineText, captureIndices);\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._begin);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            for (const pattern of this.patterns) {\n                const rule = grammar.getRule(pattern);\n                rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n            }\n        }\n        return this._cachedCompiledPatterns;\n    }\n    compileWhile(grammar, endRegexSource) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);\n    }\n    compileWhileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledWhilePatterns(grammar, endRegexSource) {\n        if (!this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns = new RegExpSourceList();\n            this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);\n        }\n        if (this._while.hasBackReferences) {\n            this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : '\\uFFFF');\n        }\n        return this._cachedCompiledWhilePatterns;\n    }\n}\nclass RuleFactory {\n    static createCaptureRule(helper, $location, name, contentName, retokenizeCapturedWithRuleId) {\n        return helper.registerRule((id) => {\n            return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);\n        });\n    }\n    static getCompiledRuleId(desc, helper, repository) {\n        if (!desc.id) {\n            helper.registerRule((id) => {\n                desc.id = id;\n                if (desc.match) {\n                    return new MatchRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.match, RuleFactory._compileCaptures(desc.captures, helper, repository));\n                }\n                if (typeof desc.begin === 'undefined') {\n                    if (desc.repository) {\n                        repository = mergeObjects({}, repository, desc.repository);\n                    }\n                    let patterns = desc.patterns;\n                    if (typeof patterns === 'undefined' && desc.include) {\n                        patterns = [{ include: desc.include }];\n                    }\n                    return new IncludeOnlyRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, RuleFactory._compilePatterns(patterns, helper, repository));\n                }\n                if (desc.while) {\n                    return new BeginWhileRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.while, RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository), RuleFactory._compilePatterns(desc.patterns, helper, repository));\n                }\n                return new BeginEndRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.end, RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository), desc.applyEndPatternLast, RuleFactory._compilePatterns(desc.patterns, helper, repository));\n            });\n        }\n        return desc.id;\n    }\n    static _compileCaptures(captures, helper, repository) {\n        let r = [];\n        if (captures) {\n            // Find the maximum capture id\n            let maximumCaptureId = 0;\n            for (const captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                const numericCaptureId = parseInt(captureId, 10);\n                if (numericCaptureId > maximumCaptureId) {\n                    maximumCaptureId = numericCaptureId;\n                }\n            }\n            // Initialize result\n            for (let i = 0; i <= maximumCaptureId; i++) {\n                r[i] = null;\n            }\n            // Fill out result\n            for (const captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                const numericCaptureId = parseInt(captureId, 10);\n                let retokenizeCapturedWithRuleId = 0;\n                if (captures[captureId].patterns) {\n                    retokenizeCapturedWithRuleId = RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);\n                }\n                r[numericCaptureId] = RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);\n            }\n        }\n        return r;\n    }\n    static _compilePatterns(patterns, helper, repository) {\n        let r = [];\n        if (patterns) {\n            for (let i = 0, len = patterns.length; i < len; i++) {\n                const pattern = patterns[i];\n                let ruleId = -1;\n                if (pattern.include) {\n                    const reference = parseInclude(pattern.include);\n                    switch (reference.kind) {\n                        case 0 /* IncludeReferenceKind.Base */:\n                        case 1 /* IncludeReferenceKind.Self */:\n                            ruleId = RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);\n                            break;\n                        case 2 /* IncludeReferenceKind.RelativeReference */:\n                            // Local include found in `repository`\n                            let localIncludedRule = repository[reference.ruleName];\n                            if (localIncludedRule) {\n                                ruleId = RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);\n                            }\n                            break;\n                        case 3 /* IncludeReferenceKind.TopLevelReference */:\n                        case 4 /* IncludeReferenceKind.TopLevelRepositoryReference */:\n                            const externalGrammarName = reference.scopeName;\n                            const externalGrammarInclude = reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */\n                                ? reference.ruleName\n                                : null;\n                            // External include\n                            const externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);\n                            if (externalGrammar) {\n                                if (externalGrammarInclude) {\n                                    let externalIncludedRule = externalGrammar.repository[externalGrammarInclude];\n                                    if (externalIncludedRule) {\n                                        ruleId = RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);\n                                    }\n                                }\n                                else {\n                                    ruleId = RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);\n                                }\n                            }\n                            break;\n                    }\n                }\n                else {\n                    ruleId = RuleFactory.getCompiledRuleId(pattern, helper, repository);\n                }\n                if (ruleId !== -1) {\n                    const rule = helper.getRule(ruleId);\n                    let skipRule = false;\n                    if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {\n                        if (rule.hasMissingPatterns && rule.patterns.length === 0) {\n                            skipRule = true;\n                        }\n                    }\n                    if (skipRule) {\n                        // console.log('REMOVING RULE ENTIRELY DUE TO EMPTY PATTERNS THAT ARE MISSING');\n                        continue;\n                    }\n                    r.push(ruleId);\n                }\n            }\n        }\n        return {\n            patterns: r,\n            hasMissingPatterns: ((patterns ? patterns.length : 0) !== r.length)\n        };\n    }\n}\nclass RegExpSource {\n    source;\n    ruleId;\n    hasAnchor;\n    hasBackReferences;\n    _anchorCache;\n    constructor(regExpSource, ruleId) {\n        if (regExpSource) {\n            const len = regExpSource.length;\n            let lastPushedPos = 0;\n            let output = [];\n            let hasAnchor = false;\n            for (let pos = 0; pos < len; pos++) {\n                const ch = regExpSource.charAt(pos);\n                if (ch === '\\\\') {\n                    if (pos + 1 < len) {\n                        const nextCh = regExpSource.charAt(pos + 1);\n                        if (nextCh === 'z') {\n                            output.push(regExpSource.substring(lastPushedPos, pos));\n                            output.push('$(?!\\\\n)(?<!\\\\n)');\n                            lastPushedPos = pos + 2;\n                        }\n                        else if (nextCh === 'A' || nextCh === 'G') {\n                            hasAnchor = true;\n                        }\n                        pos++;\n                    }\n                }\n            }\n            this.hasAnchor = hasAnchor;\n            if (lastPushedPos === 0) {\n                // No \\z hit\n                this.source = regExpSource;\n            }\n            else {\n                output.push(regExpSource.substring(lastPushedPos, len));\n                this.source = output.join('');\n            }\n        }\n        else {\n            this.hasAnchor = false;\n            this.source = regExpSource;\n        }\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n        else {\n            this._anchorCache = null;\n        }\n        this.ruleId = ruleId;\n        this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);\n        // console.log('input: ' + regExpSource + ' => ' + this.source + ', ' + this.hasAnchor);\n    }\n    clone() {\n        return new RegExpSource(this.source, this.ruleId);\n    }\n    setSource(newSource) {\n        if (this.source === newSource) {\n            return;\n        }\n        this.source = newSource;\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n    }\n    resolveBackReferences(lineText, captureIndices) {\n        let capturedValues = captureIndices.map((capture) => {\n            return lineText.substring(capture.start, capture.end);\n        });\n        BACK_REFERENCING_END.lastIndex = 0;\n        return this.source.replace(BACK_REFERENCING_END, (match, g1) => {\n            return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || '');\n        });\n    }\n    _buildAnchorCache() {\n        let A0_G0_result = [];\n        let A0_G1_result = [];\n        let A1_G0_result = [];\n        let A1_G1_result = [];\n        let pos, len, ch, nextCh;\n        for (pos = 0, len = this.source.length; pos < len; pos++) {\n            ch = this.source.charAt(pos);\n            A0_G0_result[pos] = ch;\n            A0_G1_result[pos] = ch;\n            A1_G0_result[pos] = ch;\n            A1_G1_result[pos] = ch;\n            if (ch === '\\\\') {\n                if (pos + 1 < len) {\n                    nextCh = this.source.charAt(pos + 1);\n                    if (nextCh === 'A') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = '\\uFFFF';\n                        A1_G0_result[pos + 1] = 'A';\n                        A1_G1_result[pos + 1] = 'A';\n                    }\n                    else if (nextCh === 'G') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = 'G';\n                        A1_G0_result[pos + 1] = '\\uFFFF';\n                        A1_G1_result[pos + 1] = 'G';\n                    }\n                    else {\n                        A0_G0_result[pos + 1] = nextCh;\n                        A0_G1_result[pos + 1] = nextCh;\n                        A1_G0_result[pos + 1] = nextCh;\n                        A1_G1_result[pos + 1] = nextCh;\n                    }\n                    pos++;\n                }\n            }\n        }\n        return {\n            A0_G0: A0_G0_result.join(''),\n            A0_G1: A0_G1_result.join(''),\n            A1_G0: A1_G0_result.join(''),\n            A1_G1: A1_G1_result.join('')\n        };\n    }\n    resolveAnchors(allowA, allowG) {\n        if (!this.hasAnchor || !this._anchorCache) {\n            return this.source;\n        }\n        if (allowA) {\n            if (allowG) {\n                return this._anchorCache.A1_G1;\n            }\n            else {\n                return this._anchorCache.A1_G0;\n            }\n        }\n        else {\n            if (allowG) {\n                return this._anchorCache.A0_G1;\n            }\n            else {\n                return this._anchorCache.A0_G0;\n            }\n        }\n    }\n}\nclass RegExpSourceList {\n    _items;\n    _hasAnchors;\n    _cached;\n    _anchorCache;\n    constructor() {\n        this._items = [];\n        this._hasAnchors = false;\n        this._cached = null;\n        this._anchorCache = {\n            A0_G0: null,\n            A0_G1: null,\n            A1_G0: null,\n            A1_G1: null\n        };\n    }\n    dispose() {\n        this._disposeCaches();\n    }\n    _disposeCaches() {\n        if (this._cached) {\n            this._cached.dispose();\n            this._cached = null;\n        }\n        if (this._anchorCache.A0_G0) {\n            this._anchorCache.A0_G0.dispose();\n            this._anchorCache.A0_G0 = null;\n        }\n        if (this._anchorCache.A0_G1) {\n            this._anchorCache.A0_G1.dispose();\n            this._anchorCache.A0_G1 = null;\n        }\n        if (this._anchorCache.A1_G0) {\n            this._anchorCache.A1_G0.dispose();\n            this._anchorCache.A1_G0 = null;\n        }\n        if (this._anchorCache.A1_G1) {\n            this._anchorCache.A1_G1.dispose();\n            this._anchorCache.A1_G1 = null;\n        }\n    }\n    push(item) {\n        this._items.push(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    }\n    unshift(item) {\n        this._items.unshift(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    }\n    length() {\n        return this._items.length;\n    }\n    setSource(index, newSource) {\n        if (this._items[index].source !== newSource) {\n            // bust the cache\n            this._disposeCaches();\n            this._items[index].setSource(newSource);\n        }\n    }\n    compile(onigLib) {\n        if (!this._cached) {\n            let regExps = this._items.map(e => e.source);\n            this._cached = new CompiledRule(onigLib, regExps, this._items.map(e => e.ruleId));\n        }\n        return this._cached;\n    }\n    compileAG(onigLib, allowA, allowG) {\n        if (!this._hasAnchors) {\n            return this.compile(onigLib);\n        }\n        else {\n            if (allowA) {\n                if (allowG) {\n                    if (!this._anchorCache.A1_G1) {\n                        this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G1;\n                }\n                else {\n                    if (!this._anchorCache.A1_G0) {\n                        this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G0;\n                }\n            }\n            else {\n                if (allowG) {\n                    if (!this._anchorCache.A0_G1) {\n                        this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G1;\n                }\n                else {\n                    if (!this._anchorCache.A0_G0) {\n                        this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G0;\n                }\n            }\n        }\n    }\n    _resolveAnchors(onigLib, allowA, allowG) {\n        let regExps = this._items.map(e => e.resolveAnchors(allowA, allowG));\n        return new CompiledRule(onigLib, regExps, this._items.map(e => e.ruleId));\n    }\n}\nclass CompiledRule {\n    regExps;\n    rules;\n    scanner;\n    constructor(onigLib, regExps, rules) {\n        this.regExps = regExps;\n        this.rules = rules;\n        this.scanner = onigLib.createOnigScanner(regExps);\n    }\n    dispose() {\n        if (typeof this.scanner.dispose === \"function\") {\n            this.scanner.dispose();\n        }\n    }\n    toString() {\n        const r = [];\n        for (let i = 0, len = this.rules.length; i < len; i++) {\n            r.push(\"   - \" + this.rules[i] + \": \" + this.regExps[i]);\n        }\n        return r.join(\"\\n\");\n    }\n    findNextMatchSync(string, startPosition, options) {\n        const result = this.scanner.findNextMatchSync(string, startPosition, options);\n        if (!result) {\n            return null;\n        }\n        return {\n            ruleId: this.rules[result.index],\n            captureIndices: result.captureIndices,\n        };\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass Theme {\n    _colorMap;\n    _defaults;\n    _root;\n    static createFromRawTheme(source, colorMap) {\n        return this.createFromParsedTheme(parseTheme(source), colorMap);\n    }\n    static createFromParsedTheme(source, colorMap) {\n        return resolveParsedThemeRules(source, colorMap);\n    }\n    _cachedMatchRoot = new CachedFn((scopeName) => this._root.match(scopeName));\n    constructor(_colorMap, _defaults, _root) {\n        this._colorMap = _colorMap;\n        this._defaults = _defaults;\n        this._root = _root;\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    getDefaults() {\n        return this._defaults;\n    }\n    match(scopePath) {\n        if (scopePath === null) {\n            return this._defaults;\n        }\n        const scopeName = scopePath.scopeName;\n        const matchingTrieElements = this._cachedMatchRoot.get(scopeName);\n        const effectiveRule = matchingTrieElements.find((v) => _scopePathMatchesParentScopes(scopePath.parent, v.parentScopes));\n        if (!effectiveRule) {\n            return null;\n        }\n        return new StyleAttributes(effectiveRule.fontStyle, effectiveRule.foreground, effectiveRule.background);\n    }\n}\nclass ScopeStack {\n    parent;\n    scopeName;\n    static push(path, scopeNames) {\n        for (const name of scopeNames) {\n            path = new ScopeStack(path, name);\n        }\n        return path;\n    }\n    static from(...segments) {\n        let result = null;\n        for (let i = 0; i < segments.length; i++) {\n            result = new ScopeStack(result, segments[i]);\n        }\n        return result;\n    }\n    constructor(parent, scopeName) {\n        this.parent = parent;\n        this.scopeName = scopeName;\n    }\n    push(scopeName) {\n        return new ScopeStack(this, scopeName);\n    }\n    getSegments() {\n        let item = this;\n        const result = [];\n        while (item) {\n            result.push(item.scopeName);\n            item = item.parent;\n        }\n        result.reverse();\n        return result;\n    }\n    toString() {\n        return this.getSegments().join(' ');\n    }\n    extends(other) {\n        if (this === other) {\n            return true;\n        }\n        if (this.parent === null) {\n            return false;\n        }\n        return this.parent.extends(other);\n    }\n    getExtensionIfDefined(base) {\n        const result = [];\n        let item = this;\n        while (item && item !== base) {\n            result.push(item.scopeName);\n            item = item.parent;\n        }\n        return item === base ? result.reverse() : undefined;\n    }\n}\nfunction _scopePathMatchesParentScopes(scopePath, parentScopes) {\n    if (parentScopes === null) {\n        return true;\n    }\n    let index = 0;\n    let scopePattern = parentScopes[index];\n    while (scopePath) {\n        if (_matchesScope(scopePath.scopeName, scopePattern)) {\n            index++;\n            if (index === parentScopes.length) {\n                return true;\n            }\n            scopePattern = parentScopes[index];\n        }\n        scopePath = scopePath.parent;\n    }\n    return false;\n}\nfunction _matchesScope(scopeName, scopePattern) {\n    return scopePattern === scopeName || (scopeName.startsWith(scopePattern) && scopeName[scopePattern.length] === '.');\n}\nclass StyleAttributes {\n    fontStyle;\n    foregroundId;\n    backgroundId;\n    constructor(fontStyle, foregroundId, backgroundId) {\n        this.fontStyle = fontStyle;\n        this.foregroundId = foregroundId;\n        this.backgroundId = backgroundId;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nfunction parseTheme(source) {\n    if (!source) {\n        return [];\n    }\n    if (!source.settings || !Array.isArray(source.settings)) {\n        return [];\n    }\n    let settings = source.settings;\n    let result = [], resultLen = 0;\n    for (let i = 0, len = settings.length; i < len; i++) {\n        let entry = settings[i];\n        if (!entry.settings) {\n            continue;\n        }\n        let scopes;\n        if (typeof entry.scope === 'string') {\n            let _scope = entry.scope;\n            // remove leading commas\n            _scope = _scope.replace(/^[,]+/, '');\n            // remove trailing commans\n            _scope = _scope.replace(/[,]+$/, '');\n            scopes = _scope.split(',');\n        }\n        else if (Array.isArray(entry.scope)) {\n            scopes = entry.scope;\n        }\n        else {\n            scopes = [''];\n        }\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        if (typeof entry.settings.fontStyle === 'string') {\n            fontStyle = 0 /* FontStyle.None */;\n            let segments = entry.settings.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                let segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.settings.foreground === 'string' && isValidHexColor(entry.settings.foreground)) {\n            foreground = entry.settings.foreground;\n        }\n        let background = null;\n        if (typeof entry.settings.background === 'string' && isValidHexColor(entry.settings.background)) {\n            background = entry.settings.background;\n        }\n        for (let j = 0, lenJ = scopes.length; j < lenJ; j++) {\n            let _scope = scopes[j].trim();\n            let segments = _scope.split(' ');\n            let scope = segments[segments.length - 1];\n            let parentScopes = null;\n            if (segments.length > 1) {\n                parentScopes = segments.slice(0, segments.length - 1);\n                parentScopes.reverse();\n            }\n            result[resultLen++] = new ParsedThemeRule(scope, parentScopes, i, fontStyle, foreground, background);\n        }\n    }\n    return result;\n}\nclass ParsedThemeRule {\n    scope;\n    parentScopes;\n    index;\n    fontStyle;\n    foreground;\n    background;\n    constructor(scope, parentScopes, index, fontStyle, foreground, background) {\n        this.scope = scope;\n        this.parentScopes = parentScopes;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedThemeRules(parsedThemeRules, _colorMap) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        let r = strcmp(a.scope, b.scope);\n        if (r !== 0) {\n            return r;\n        }\n        r = strArrCmp(a.parentScopes, b.parentScopes);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* FontStyle.None */;\n    let defaultForeground = '#000000';\n    let defaultBackground = '#ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === '') {\n        let incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    let colorMap = new ColorMap(_colorMap);\n    let defaults = new StyleAttributes(defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));\n    let root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* FontStyle.NotSet */, 0, 0), []);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        let rule = parsedThemeRules[i];\n        root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new Theme(colorMap, defaults, root);\n}\nclass ColorMap {\n    _isFrozen;\n    _lastColorId;\n    _id2color;\n    _color2id;\n    constructor(_colorMap) {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n        if (Array.isArray(_colorMap)) {\n            this._isFrozen = true;\n            for (let i = 0, len = _colorMap.length; i < len; i++) {\n                this._color2id[_colorMap[i]] = i;\n                this._id2color[i] = _colorMap[i];\n            }\n        }\n        else {\n            this._isFrozen = false;\n        }\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        color = color.toUpperCase();\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        if (this._isFrozen) {\n            throw new Error(`Missing color in color map - ${color}`);\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nclass ThemeTrieElementRule {\n    scopeDepth;\n    parentScopes;\n    fontStyle;\n    foreground;\n    background;\n    constructor(scopeDepth, parentScopes, fontStyle, foreground, background) {\n        this.scopeDepth = scopeDepth;\n        this.parentScopes = parentScopes;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);\n    }\n    static cloneArr(arr) {\n        let r = [];\n        for (let i = 0, len = arr.length; i < len; i++) {\n            r[i] = arr[i].clone();\n        }\n        return r;\n    }\n    acceptOverwrite(scopeDepth, fontStyle, foreground, background) {\n        if (this.scopeDepth > scopeDepth) {\n            console.log('how did this happen?');\n        }\n        else {\n            this.scopeDepth = scopeDepth;\n        }\n        // console.log('TODO -> my depth: ' + this.scopeDepth + ', overwriting depth: ' + scopeDepth);\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            this.fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            this.foreground = foreground;\n        }\n        if (background !== 0) {\n            this.background = background;\n        }\n    }\n}\nclass ThemeTrieElement {\n    _mainRule;\n    _children;\n    _rulesWithParentScopes;\n    constructor(_mainRule, rulesWithParentScopes = [], _children = {}) {\n        this._mainRule = _mainRule;\n        this._children = _children;\n        this._rulesWithParentScopes = rulesWithParentScopes;\n    }\n    static _sortBySpecificity(arr) {\n        if (arr.length === 1) {\n            return arr;\n        }\n        arr.sort(this._cmpBySpecificity);\n        return arr;\n    }\n    static _cmpBySpecificity(a, b) {\n        if (a.scopeDepth === b.scopeDepth) {\n            const aParentScopes = a.parentScopes;\n            const bParentScopes = b.parentScopes;\n            let aParentScopesLen = aParentScopes === null ? 0 : aParentScopes.length;\n            let bParentScopesLen = bParentScopes === null ? 0 : bParentScopes.length;\n            if (aParentScopesLen === bParentScopesLen) {\n                for (let i = 0; i < aParentScopesLen; i++) {\n                    const aLen = aParentScopes[i].length;\n                    const bLen = bParentScopes[i].length;\n                    if (aLen !== bLen) {\n                        return bLen - aLen;\n                    }\n                }\n            }\n            return bParentScopesLen - aParentScopesLen;\n        }\n        return b.scopeDepth - a.scopeDepth;\n    }\n    match(scope) {\n        if (scope === '') {\n            return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n        }\n        let dotIndex = scope.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        if (this._children.hasOwnProperty(head)) {\n            return this._children[head].match(tail);\n        }\n        return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n    }\n    insert(scopeDepth, scope, parentScopes, fontStyle, foreground, background) {\n        if (scope === '') {\n            this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);\n            return;\n        }\n        let dotIndex = scope.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        let child;\n        if (this._children.hasOwnProperty(head)) {\n            child = this._children[head];\n        }\n        else {\n            child = new ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));\n            this._children[head] = child;\n        }\n        child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);\n    }\n    _doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background) {\n        if (parentScopes === null) {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n            return;\n        }\n        // Try to merge into existing rule\n        for (let i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {\n            let rule = this._rulesWithParentScopes[i];\n            if (strArrCmp(rule.parentScopes, parentScopes) === 0) {\n                // bingo! => we get to merge this into an existing one\n                rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n                return;\n            }\n        }\n        // Must add a new rule\n        // Inherit from main rule\n        if (fontStyle === -1 /* FontStyle.NotSet */) {\n            fontStyle = this._mainRule.fontStyle;\n        }\n        if (foreground === 0) {\n            foreground = this._mainRule.foreground;\n        }\n        if (background === 0) {\n            background = this._mainRule.background;\n        }\n        this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass BasicScopeAttributes {\n    languageId;\n    tokenType;\n    constructor(languageId, tokenType) {\n        this.languageId = languageId;\n        this.tokenType = tokenType;\n    }\n}\nclass BasicScopeAttributesProvider {\n    _defaultAttributes;\n    _embeddedLanguagesMatcher;\n    constructor(initialLanguageId, embeddedLanguages) {\n        this._defaultAttributes = new BasicScopeAttributes(initialLanguageId, 8 /* OptionalStandardTokenType.NotSet */);\n        this._embeddedLanguagesMatcher = new ScopeMatcher(Object.entries(embeddedLanguages || {}));\n    }\n    getDefaultAttributes() {\n        return this._defaultAttributes;\n    }\n    getBasicScopeAttributes(scopeName) {\n        if (scopeName === null) {\n            return BasicScopeAttributesProvider._NULL_SCOPE_METADATA;\n        }\n        return this._getBasicScopeAttributes.get(scopeName);\n    }\n    static _NULL_SCOPE_METADATA = new BasicScopeAttributes(0, 0);\n    _getBasicScopeAttributes = new CachedFn((scopeName) => {\n        const languageId = this._scopeToLanguage(scopeName);\n        const standardTokenType = this._toStandardTokenType(scopeName);\n        return new BasicScopeAttributes(languageId, standardTokenType);\n    });\n    /**\n     * Given a produced TM scope, return the language that token describes or null if unknown.\n     * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null\n     */\n    _scopeToLanguage(scope) {\n        return this._embeddedLanguagesMatcher.match(scope) || 0;\n    }\n    _toStandardTokenType(scopeName) {\n        const m = scopeName.match(BasicScopeAttributesProvider.STANDARD_TOKEN_TYPE_REGEXP);\n        if (!m) {\n            return 8 /* OptionalStandardTokenType.NotSet */;\n        }\n        switch (m[1]) {\n            case \"comment\":\n                return 1 /* OptionalStandardTokenType.Comment */;\n            case \"string\":\n                return 2 /* OptionalStandardTokenType.String */;\n            case \"regex\":\n                return 3 /* OptionalStandardTokenType.RegEx */;\n            case \"meta.embedded\":\n                return 0 /* OptionalStandardTokenType.Other */;\n        }\n        throw new Error(\"Unexpected match for standard token type!\");\n    }\n    static STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|meta\\.embedded)\\b/;\n}\nclass ScopeMatcher {\n    values;\n    scopesRegExp;\n    constructor(values) {\n        if (values.length === 0) {\n            this.values = null;\n            this.scopesRegExp = null;\n        }\n        else {\n            this.values = new Map(values);\n            // create the regex\n            const escapedScopes = values.map(([scopeName, value]) => escapeRegExpCharacters(scopeName));\n            escapedScopes.sort();\n            escapedScopes.reverse(); // Longest scope first\n            this.scopesRegExp = new RegExp(`^((${escapedScopes.join(\")|(\")}))($|\\\\.)`, \"\");\n        }\n    }\n    match(scope) {\n        if (!this.scopesRegExp) {\n            return undefined;\n        }\n        const m = scope.match(this.scopesRegExp);\n        if (!m) {\n            // no scopes matched\n            return undefined;\n        }\n        return this.values.get(m[1]);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass TokenizeStringResult {\n    stack;\n    stoppedEarly;\n    constructor(stack, stoppedEarly) {\n        this.stack = stack;\n        this.stoppedEarly = stoppedEarly;\n    }\n}\n/**\n * Tokenize a string\n * @param grammar\n * @param lineText\n * @param isFirstLine\n * @param linePos\n * @param stack\n * @param lineTokens\n * @param checkWhileConditions\n * @param timeLimit Use `0` to indicate no time limit\n * @returns the StackElement or StackElement.TIME_LIMIT_REACHED if the time limit has been reached\n */\nfunction _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {\n    const lineLength = lineText.content.length;\n    let STOP = false;\n    let anchorPosition = -1;\n    if (checkWhileConditions) {\n        const whileCheckResult = _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens);\n        stack = whileCheckResult.stack;\n        linePos = whileCheckResult.linePos;\n        isFirstLine = whileCheckResult.isFirstLine;\n        anchorPosition = whileCheckResult.anchorPosition;\n    }\n    const startTime = Date.now();\n    while (!STOP) {\n        if (timeLimit !== 0) {\n            const elapsedTime = Date.now() - startTime;\n            if (elapsedTime > timeLimit) {\n                return new TokenizeStringResult(stack, true);\n            }\n        }\n        scanNext(); // potentially modifies linePos && anchorPosition\n    }\n    return new TokenizeStringResult(stack, false);\n    function scanNext() {\n        const r = matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n        if (!r) {\n            // No match\n            lineTokens.produce(stack, lineLength);\n            STOP = true;\n            return;\n        }\n        const captureIndices = r.captureIndices;\n        const matchedRuleId = r.matchedRuleId;\n        const hasAdvanced = captureIndices && captureIndices.length > 0\n            ? captureIndices[0].end > linePos\n            : false;\n        if (matchedRuleId === endRuleId) {\n            // We matched the `end` for this rule => pop it\n            const poppedRule = stack.getRule(grammar);\n            lineTokens.produce(stack, captureIndices[0].start);\n            stack = stack.withContentNameScopesList(stack.nameScopesList);\n            handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, poppedRule.endCaptures, captureIndices);\n            lineTokens.produce(stack, captureIndices[0].end);\n            // pop\n            const popped = stack;\n            stack = stack.parent;\n            anchorPosition = popped.getAnchorPos();\n            if (!hasAdvanced && popped.getEnterPos() === linePos) {\n                // See https://github.com/Microsoft/vscode-textmate/issues/12\n                // Let's assume this was a mistake by the grammar author and the intent was to continue in this state\n                stack = popped;\n                lineTokens.produce(stack, lineLength);\n                STOP = true;\n                return;\n            }\n        }\n        else {\n            // We matched a rule!\n            const _rule = grammar.getRule(matchedRuleId);\n            lineTokens.produce(stack, captureIndices[0].start);\n            const beforePush = stack;\n            // push it on the stack rule\n            const scopeName = _rule.getName(lineText.content, captureIndices);\n            const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n            stack = stack.push(matchedRuleId, linePos, anchorPosition, captureIndices[0].end === lineLength, null, nameScopesList, nameScopesList);\n            if (_rule instanceof BeginEndRule) {\n                const pushedRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                const contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n                stack = stack.withContentNameScopesList(contentNameScopesList);\n                if (pushedRule.endHasBackReferences) {\n                    stack = stack.withEndRule(pushedRule.getEndWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else if (_rule instanceof BeginWhileRule) {\n                const pushedRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                const contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n                stack = stack.withContentNameScopesList(contentNameScopesList);\n                if (pushedRule.whileHasBackReferences) {\n                    stack = stack.withEndRule(pushedRule.getWhileWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else {\n                const matchingRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, matchingRule.captures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                // pop rule immediately since it is a MatchRule\n                stack = stack.pop();\n                if (!hasAdvanced) {\n                    stack = stack.safePop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n        }\n        if (captureIndices[0].end > linePos) {\n            // Advance stream\n            linePos = captureIndices[0].end;\n            isFirstLine = false;\n        }\n    }\n}\n/**\n * Walk the stack from bottom to top, and check each while condition in this order.\n * If any fails, cut off the entire stack above the failed while condition. While conditions\n * may also advance the linePosition.\n */\nfunction _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {\n    let anchorPosition = (stack.beginRuleCapturedEOL ? 0 : -1);\n    const whileRules = [];\n    for (let node = stack; node; node = node.pop()) {\n        const nodeRule = node.getRule(grammar);\n        if (nodeRule instanceof BeginWhileRule) {\n            whileRules.push({\n                rule: nodeRule,\n                stack: node\n            });\n        }\n    }\n    for (let whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {\n        const { ruleScanner, findOptions } = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition);\n        const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (r) {\n            const matchedRuleId = r.ruleId;\n            if (matchedRuleId !== whileRuleId) {\n                // we shouldn't end up here\n                stack = whileRule.stack.pop();\n                break;\n            }\n            if (r.captureIndices && r.captureIndices.length) {\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].start);\n                handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].end);\n                anchorPosition = r.captureIndices[0].end;\n                if (r.captureIndices[0].end > linePos) {\n                    linePos = r.captureIndices[0].end;\n                    isFirstLine = false;\n                }\n            }\n        }\n        else {\n            stack = whileRule.stack.pop();\n            break;\n        }\n    }\n    return { stack: stack, linePos: linePos, anchorPosition: anchorPosition, isFirstLine: isFirstLine };\n}\nfunction matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // Look for normal grammar rule\n    const matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    // Look for injected rules\n    const injections = grammar.getInjections();\n    if (injections.length === 0) {\n        // No injections whatsoever => early return\n        return matchResult;\n    }\n    const injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    if (!injectionResult) {\n        // No injections matched => early return\n        return matchResult;\n    }\n    if (!matchResult) {\n        // Only injections matched => early return\n        return injectionResult;\n    }\n    // Decide if `matchResult` or `injectionResult` should win\n    const matchResultScore = matchResult.captureIndices[0].start;\n    const injectionResultScore = injectionResult.captureIndices[0].start;\n    if (injectionResultScore < matchResultScore || (injectionResult.priorityMatch && injectionResultScore === matchResultScore)) {\n        // injection won!\n        return injectionResult;\n    }\n    return matchResult;\n}\nfunction matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    const rule = stack.getRule(grammar);\n    const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition);\n    const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (r) {\n        return {\n            captureIndices: r.captureIndices,\n            matchedRuleId: r.ruleId\n        };\n    }\n    return null;\n}\nfunction matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // The lower the better\n    let bestMatchRating = Number.MAX_VALUE;\n    let bestMatchCaptureIndices = null;\n    let bestMatchRuleId;\n    let bestMatchResultPriority = 0;\n    const scopes = stack.contentNameScopesList.getScopeNames();\n    for (let i = 0, len = injections.length; i < len; i++) {\n        const injection = injections[i];\n        if (!injection.matcher(scopes)) {\n            // injection selector doesn't match stack\n            continue;\n        }\n        const rule = grammar.getRule(injection.ruleId);\n        const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition);\n        const matchResult = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (!matchResult) {\n            continue;\n        }\n        const matchRating = matchResult.captureIndices[0].start;\n        if (matchRating >= bestMatchRating) {\n            // Injections are sorted by priority, so the previous injection had a better or equal priority\n            continue;\n        }\n        bestMatchRating = matchRating;\n        bestMatchCaptureIndices = matchResult.captureIndices;\n        bestMatchRuleId = matchResult.ruleId;\n        bestMatchResultPriority = injection.priority;\n        if (bestMatchRating === linePos) {\n            // No more need to look at the rest of the injections.\n            break;\n        }\n    }\n    if (bestMatchCaptureIndices) {\n        return {\n            priorityMatch: bestMatchResultPriority === -1,\n            captureIndices: bestMatchCaptureIndices,\n            matchedRuleId: bestMatchRuleId\n        };\n    }\n    return null;\n}\nfunction prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    const ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner, findOptions: 0 /* FindOption.None */ };\n}\nfunction prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    const ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner, findOptions: 0 /* FindOption.None */ };\n}\nfunction handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {\n    if (captures.length === 0) {\n        return;\n    }\n    const lineTextContent = lineText.content;\n    const len = Math.min(captures.length, captureIndices.length);\n    const localStack = [];\n    const maxEnd = captureIndices[0].end;\n    for (let i = 0; i < len; i++) {\n        const captureRule = captures[i];\n        if (captureRule === null) {\n            // Not interested\n            continue;\n        }\n        const captureIndex = captureIndices[i];\n        if (captureIndex.length === 0) {\n            // Nothing really captured\n            continue;\n        }\n        if (captureIndex.start > maxEnd) {\n            // Capture going beyond consumed string\n            break;\n        }\n        // pop captures while needed\n        while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {\n            // pop!\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n            localStack.pop();\n        }\n        if (localStack.length > 0) {\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);\n        }\n        else {\n            lineTokens.produce(stack, captureIndex.start);\n        }\n        if (captureRule.retokenizeCapturedWithRuleId) {\n            // the capture requires additional matching\n            const scopeName = captureRule.getName(lineTextContent, captureIndices);\n            const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n            const contentName = captureRule.getContentName(lineTextContent, captureIndices);\n            const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n            const stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);\n            const onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));\n            _tokenizeString(grammar, onigSubStr, (isFirstLine && captureIndex.start === 0), captureIndex.start, stackClone, lineTokens, false, /* no time limit */ 0);\n            disposeOnigString(onigSubStr);\n            continue;\n        }\n        const captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);\n        if (captureRuleScopeName !== null) {\n            // push\n            const base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;\n            const captureRuleScopesList = base.pushAttributed(captureRuleScopeName, grammar);\n            localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));\n        }\n    }\n    while (localStack.length > 0) {\n        // pop!\n        lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n        localStack.pop();\n    }\n}\nclass LocalStackElement {\n    scopes;\n    endPos;\n    constructor(scopes, endPos) {\n        this.scopes = scopes;\n        this.endPos = endPos;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib) {\n    return new Grammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib); //TODO\n}\nfunction collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {\n    const matchers = createMatchers(selector, nameMatcher);\n    const ruleId = RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);\n    for (const matcher of matchers) {\n        result.push({\n            debugSelector: selector,\n            matcher: matcher.matcher,\n            ruleId: ruleId,\n            grammar: grammar,\n            priority: matcher.priority\n        });\n    }\n}\nfunction nameMatcher(identifers, scopes) {\n    if (scopes.length < identifers.length) {\n        return false;\n    }\n    let lastIndex = 0;\n    return identifers.every(identifier => {\n        for (let i = lastIndex; i < scopes.length; i++) {\n            if (scopesAreMatching(scopes[i], identifier)) {\n                lastIndex = i + 1;\n                return true;\n            }\n        }\n        return false;\n    });\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nclass Grammar {\n    _rootScopeName;\n    balancedBracketSelectors;\n    _onigLib;\n    _rootId;\n    _lastRuleId;\n    _ruleId2desc;\n    _includedGrammars;\n    _grammarRepository;\n    _grammar;\n    _injections;\n    _basicScopeAttributesProvider;\n    _tokenTypeMatchers;\n    get themeProvider() { return this._grammarRepository; }\n    constructor(_rootScopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, _onigLib) {\n        this._rootScopeName = _rootScopeName;\n        this.balancedBracketSelectors = balancedBracketSelectors;\n        this._onigLib = _onigLib;\n        this._basicScopeAttributesProvider = new BasicScopeAttributesProvider(initialLanguage, embeddedLanguages);\n        this._rootId = -1;\n        this._lastRuleId = 0;\n        this._ruleId2desc = [null];\n        this._includedGrammars = {};\n        this._grammarRepository = grammarRepository;\n        this._grammar = initGrammar(grammar, null);\n        this._injections = null;\n        this._tokenTypeMatchers = [];\n        if (tokenTypes) {\n            for (const selector of Object.keys(tokenTypes)) {\n                const matchers = createMatchers(selector, nameMatcher);\n                for (const matcher of matchers) {\n                    this._tokenTypeMatchers.push({\n                        matcher: matcher.matcher,\n                        type: tokenTypes[selector],\n                    });\n                }\n            }\n        }\n    }\n    dispose() {\n        for (const rule of this._ruleId2desc) {\n            if (rule) {\n                rule.dispose();\n            }\n        }\n    }\n    createOnigScanner(sources) {\n        return this._onigLib.createOnigScanner(sources);\n    }\n    createOnigString(sources) {\n        return this._onigLib.createOnigString(sources);\n    }\n    getMetadataForScope(scope) {\n        return this._basicScopeAttributesProvider.getBasicScopeAttributes(scope);\n    }\n    _collectInjections() {\n        const grammarRepository = {\n            lookup: (scopeName) => {\n                if (scopeName === this._rootScopeName) {\n                    return this._grammar;\n                }\n                return this.getExternalGrammar(scopeName);\n            },\n            injections: (scopeName) => {\n                return this._grammarRepository.injections(scopeName);\n            },\n        };\n        const result = [];\n        const scopeName = this._rootScopeName;\n        const grammar = grammarRepository.lookup(scopeName);\n        if (grammar) {\n            // add injections from the current grammar\n            const rawInjections = grammar.injections;\n            if (rawInjections) {\n                for (let expression in rawInjections) {\n                    collectInjections(result, expression, rawInjections[expression], this, grammar);\n                }\n            }\n            // add injection grammars contributed for the current scope\n            const injectionScopeNames = this._grammarRepository.injections(scopeName);\n            if (injectionScopeNames) {\n                injectionScopeNames.forEach((injectionScopeName) => {\n                    const injectionGrammar = this.getExternalGrammar(injectionScopeName);\n                    if (injectionGrammar) {\n                        const selector = injectionGrammar.injectionSelector;\n                        if (selector) {\n                            collectInjections(result, selector, injectionGrammar, this, injectionGrammar);\n                        }\n                    }\n                });\n            }\n        }\n        result.sort((i1, i2) => i1.priority - i2.priority); // sort by priority\n        return result;\n    }\n    getInjections() {\n        if (this._injections === null) {\n            this._injections = this._collectInjections();\n        }\n        return this._injections;\n    }\n    registerRule(factory) {\n        const id = ++this._lastRuleId;\n        const result = factory(ruleIdFromNumber(id));\n        this._ruleId2desc[id] = result;\n        return result;\n    }\n    getRule(ruleId) {\n        return this._ruleId2desc[ruleIdToNumber(ruleId)];\n    }\n    getExternalGrammar(scopeName, repository) {\n        if (this._includedGrammars[scopeName]) {\n            return this._includedGrammars[scopeName];\n        }\n        else if (this._grammarRepository) {\n            const rawIncludedGrammar = this._grammarRepository.lookup(scopeName);\n            if (rawIncludedGrammar) {\n                // console.log('LOADED GRAMMAR ' + pattern.include);\n                this._includedGrammars[scopeName] = initGrammar(rawIncludedGrammar, repository && repository.$base);\n                return this._includedGrammars[scopeName];\n            }\n        }\n        return undefined;\n    }\n    tokenizeLine(lineText, prevState, timeLimit = 0) {\n        const r = this._tokenize(lineText, prevState, false, timeLimit);\n        return {\n            tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n    tokenizeLine2(lineText, prevState, timeLimit = 0) {\n        const r = this._tokenize(lineText, prevState, true, timeLimit);\n        return {\n            tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n    _tokenize(lineText, prevState, emitBinaryTokens, timeLimit) {\n        if (this._rootId === -1) {\n            this._rootId = RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository);\n            // This ensures ids are deterministic, and thus equal in renderer and webworker.\n            this.getInjections();\n        }\n        let isFirstLine;\n        if (!prevState || prevState === StateStackImpl.NULL) {\n            isFirstLine = true;\n            const rawDefaultMetadata = this._basicScopeAttributesProvider.getDefaultAttributes();\n            const defaultStyle = this.themeProvider.getDefaults();\n            const defaultMetadata = EncodedTokenAttributes.set(0, rawDefaultMetadata.languageId, rawDefaultMetadata.tokenType, null, defaultStyle.fontStyle, defaultStyle.foregroundId, defaultStyle.backgroundId);\n            const rootScopeName = this.getRule(this._rootId).getName(null, null);\n            let scopeList;\n            if (rootScopeName) {\n                scopeList = AttributedScopeStack.createRootAndLookUpScopeName(rootScopeName, defaultMetadata, this);\n            }\n            else {\n                scopeList = AttributedScopeStack.createRoot(\"unknown\", defaultMetadata);\n            }\n            prevState = new StateStackImpl(null, this._rootId, -1, -1, false, null, scopeList, scopeList);\n        }\n        else {\n            isFirstLine = false;\n            prevState.reset();\n        }\n        lineText = lineText + \"\\n\";\n        const onigLineText = this.createOnigString(lineText);\n        const lineLength = onigLineText.content.length;\n        const lineTokens = new LineTokens(emitBinaryTokens, lineText, this._tokenTypeMatchers, this.balancedBracketSelectors);\n        const r = _tokenizeString(this, onigLineText, isFirstLine, 0, prevState, lineTokens, true, timeLimit);\n        disposeOnigString(onigLineText);\n        return {\n            lineLength: lineLength,\n            lineTokens: lineTokens,\n            ruleStack: r.stack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n}\nfunction initGrammar(grammar, base) {\n    grammar = clone(grammar);\n    grammar.repository = grammar.repository || {};\n    grammar.repository.$self = {\n        $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,\n        patterns: grammar.patterns,\n        name: grammar.scopeName\n    };\n    grammar.repository.$base = base || grammar.repository.$self;\n    return grammar;\n}\nclass AttributedScopeStack {\n    parent;\n    scopePath;\n    tokenAttributes;\n    static fromExtension(namesScopeList, contentNameScopesList) {\n        let current = namesScopeList;\n        let scopeNames = namesScopeList?.scopePath ?? null;\n        for (const frame of contentNameScopesList) {\n            scopeNames = ScopeStack.push(scopeNames, frame.scopeNames);\n            current = new AttributedScopeStack(current, scopeNames, frame.encodedTokenAttributes);\n        }\n        return current;\n    }\n    static createRoot(scopeName, tokenAttributes) {\n        return new AttributedScopeStack(null, new ScopeStack(null, scopeName), tokenAttributes);\n    }\n    static createRootAndLookUpScopeName(scopeName, tokenAttributes, grammar) {\n        const rawRootMetadata = grammar.getMetadataForScope(scopeName);\n        const scopePath = new ScopeStack(null, scopeName);\n        const rootStyle = grammar.themeProvider.themeMatch(scopePath);\n        const resolvedTokenAttributes = AttributedScopeStack.mergeAttributes(tokenAttributes, rawRootMetadata, rootStyle);\n        return new AttributedScopeStack(null, scopePath, resolvedTokenAttributes);\n    }\n    get scopeName() { return this.scopePath.scopeName; }\n    /**\n     * Invariant:\n     * ```\n     * if (parent && !scopePath.extends(parent.scopePath)) {\n     * \tthrow new Error();\n     * }\n     * ```\n     */\n    constructor(parent, scopePath, tokenAttributes) {\n        this.parent = parent;\n        this.scopePath = scopePath;\n        this.tokenAttributes = tokenAttributes;\n    }\n    toString() {\n        return this.getScopeNames().join(' ');\n    }\n    equals(other) {\n        return AttributedScopeStack.equals(this, other);\n    }\n    static equals(a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.scopeName !== b.scopeName || a.tokenAttributes !== b.tokenAttributes) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    }\n    static mergeAttributes(existingTokenAttributes, basicScopeAttributes, styleAttributes) {\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        let foreground = 0;\n        let background = 0;\n        if (styleAttributes !== null) {\n            fontStyle = styleAttributes.fontStyle;\n            foreground = styleAttributes.foregroundId;\n            background = styleAttributes.backgroundId;\n        }\n        return EncodedTokenAttributes.set(existingTokenAttributes, basicScopeAttributes.languageId, basicScopeAttributes.tokenType, null, fontStyle, foreground, background);\n    }\n    pushAttributed(scopePath, grammar) {\n        if (scopePath === null) {\n            return this;\n        }\n        if (scopePath.indexOf(' ') === -1) {\n            // This is the common case and much faster\n            return AttributedScopeStack._pushAttributed(this, scopePath, grammar);\n        }\n        const scopes = scopePath.split(/ /g);\n        let result = this;\n        for (const scope of scopes) {\n            result = AttributedScopeStack._pushAttributed(result, scope, grammar);\n        }\n        return result;\n    }\n    static _pushAttributed(target, scopeName, grammar) {\n        const rawMetadata = grammar.getMetadataForScope(scopeName);\n        const newPath = target.scopePath.push(scopeName);\n        const scopeThemeMatchResult = grammar.themeProvider.themeMatch(newPath);\n        const metadata = AttributedScopeStack.mergeAttributes(target.tokenAttributes, rawMetadata, scopeThemeMatchResult);\n        return new AttributedScopeStack(target, newPath, metadata);\n    }\n    getScopeNames() {\n        return this.scopePath.getSegments();\n    }\n    getExtensionIfDefined(base) {\n        const result = [];\n        let self = this;\n        while (self && self !== base) {\n            result.push({\n                encodedTokenAttributes: self.tokenAttributes,\n                scopeNames: self.scopePath.getExtensionIfDefined(self.parent?.scopePath ?? null),\n            });\n            self = self.parent;\n        }\n        return self === base ? result.reverse() : undefined;\n    }\n}\n/**\n * Represents a \"pushed\" state on the stack (as a linked list element).\n */\nclass StateStackImpl {\n    parent;\n    ruleId;\n    beginRuleCapturedEOL;\n    endRule;\n    nameScopesList;\n    contentNameScopesList;\n    _stackElementBrand = undefined;\n    // TODO remove me\n    static NULL = new StateStackImpl(null, 0, 0, 0, false, null, null, null);\n    /**\n     * The position on the current line where this state was pushed.\n     * This is relevant only while tokenizing a line, to detect endless loops.\n     * Its value is meaningless across lines.\n     */\n    _enterPos;\n    /**\n     * The captured anchor position when this stack element was pushed.\n     * This is relevant only while tokenizing a line, to restore the anchor position when popping.\n     * Its value is meaningless across lines.\n     */\n    _anchorPos;\n    /**\n     * The depth of the stack.\n     */\n    depth;\n    /**\n     * Invariant:\n     * ```\n     * if (contentNameScopesList !== nameScopesList && contentNameScopesList?.parent !== nameScopesList) {\n     * \tthrow new Error();\n     * }\n     * if (this.parent && !nameScopesList.extends(this.parent.contentNameScopesList)) {\n     * \tthrow new Error();\n     * }\n     * ```\n     */\n    constructor(\n    /**\n     * The previous state on the stack (or null for the root state).\n     */\n    parent, \n    /**\n     * The state (rule) that this element represents.\n     */\n    ruleId, enterPos, anchorPos, \n    /**\n     * The state has entered and captured \\n. This means that the next line should have an anchorPosition of 0.\n     */\n    beginRuleCapturedEOL, \n    /**\n     * The \"pop\" (end) condition for this state in case that it was dynamically generated through captured text.\n     */\n    endRule, \n    /**\n     * The list of scopes containing the \"name\" for this state.\n     */\n    nameScopesList, \n    /**\n     * The list of scopes containing the \"contentName\" (besides \"name\") for this state.\n     * This list **must** contain as an element `scopeName`.\n     */\n    contentNameScopesList) {\n        this.parent = parent;\n        this.ruleId = ruleId;\n        this.beginRuleCapturedEOL = beginRuleCapturedEOL;\n        this.endRule = endRule;\n        this.nameScopesList = nameScopesList;\n        this.contentNameScopesList = contentNameScopesList;\n        this.depth = this.parent ? this.parent.depth + 1 : 1;\n        this._enterPos = enterPos;\n        this._anchorPos = anchorPos;\n    }\n    equals(other) {\n        if (other === null) {\n            return false;\n        }\n        return StateStackImpl._equals(this, other);\n    }\n    static _equals(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!this._structuralEquals(a, b)) {\n            return false;\n        }\n        return AttributedScopeStack.equals(a.contentNameScopesList, b.contentNameScopesList);\n    }\n    /**\n     * A structural equals check. Does not take into account `scopes`.\n     */\n    static _structuralEquals(a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.depth !== b.depth ||\n                a.ruleId !== b.ruleId ||\n                a.endRule !== b.endRule) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    }\n    clone() {\n        return this;\n    }\n    static _reset(el) {\n        while (el) {\n            el._enterPos = -1;\n            el._anchorPos = -1;\n            el = el.parent;\n        }\n    }\n    reset() {\n        StateStackImpl._reset(this);\n    }\n    pop() {\n        return this.parent;\n    }\n    safePop() {\n        if (this.parent) {\n            return this.parent;\n        }\n        return this;\n    }\n    push(ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n        return new StateStackImpl(this, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList);\n    }\n    getEnterPos() {\n        return this._enterPos;\n    }\n    getAnchorPos() {\n        return this._anchorPos;\n    }\n    getRule(grammar) {\n        return grammar.getRule(this.ruleId);\n    }\n    toString() {\n        const r = [];\n        this._writeString(r, 0);\n        return \"[\" + r.join(\",\") + \"]\";\n    }\n    _writeString(res, outIndex) {\n        if (this.parent) {\n            outIndex = this.parent._writeString(res, outIndex);\n        }\n        res[outIndex++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`;\n        return outIndex;\n    }\n    withContentNameScopesList(contentNameScopeStack) {\n        if (this.contentNameScopesList === contentNameScopeStack) {\n            return this;\n        }\n        return this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, contentNameScopeStack);\n    }\n    withEndRule(endRule) {\n        if (this.endRule === endRule) {\n            return this;\n        }\n        return new StateStackImpl(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, endRule, this.nameScopesList, this.contentNameScopesList);\n    }\n    // Used to warn of endless loops\n    hasSameRuleAs(other) {\n        let el = this;\n        while (el && el._enterPos === other._enterPos) {\n            if (el.ruleId === other.ruleId) {\n                return true;\n            }\n            el = el.parent;\n        }\n        return false;\n    }\n    toStateStackFrame() {\n        return {\n            ruleId: ruleIdToNumber(this.ruleId),\n            beginRuleCapturedEOL: this.beginRuleCapturedEOL,\n            endRule: this.endRule,\n            nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [],\n            contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? [],\n        };\n    }\n    static pushFrame(self, frame) {\n        const namesScopeList = AttributedScopeStack.fromExtension(self?.nameScopesList ?? null, frame.nameScopesList);\n        return new StateStackImpl(self, ruleIdFromNumber(frame.ruleId), frame.enterPos ?? -1, frame.anchorPos ?? -1, frame.beginRuleCapturedEOL, frame.endRule, namesScopeList, AttributedScopeStack.fromExtension(namesScopeList, frame.contentNameScopesList));\n    }\n}\nclass BalancedBracketSelectors {\n    balancedBracketScopes;\n    unbalancedBracketScopes;\n    allowAny = false;\n    constructor(balancedBracketScopes, unbalancedBracketScopes) {\n        this.balancedBracketScopes = balancedBracketScopes.flatMap((selector) => {\n            if (selector === '*') {\n                this.allowAny = true;\n                return [];\n            }\n            return createMatchers(selector, nameMatcher).map((m) => m.matcher);\n        });\n        this.unbalancedBracketScopes = unbalancedBracketScopes.flatMap((selector) => createMatchers(selector, nameMatcher).map((m) => m.matcher));\n    }\n    get matchesAlways() {\n        return this.allowAny && this.unbalancedBracketScopes.length === 0;\n    }\n    get matchesNever() {\n        return this.balancedBracketScopes.length === 0 && !this.allowAny;\n    }\n    match(scopes) {\n        for (const excluder of this.unbalancedBracketScopes) {\n            if (excluder(scopes)) {\n                return false;\n            }\n        }\n        for (const includer of this.balancedBracketScopes) {\n            if (includer(scopes)) {\n                return true;\n            }\n        }\n        return this.allowAny;\n    }\n}\nclass LineTokens {\n    balancedBracketSelectors;\n    _emitBinaryTokens;\n    /**\n     * defined only if `false`.\n     */\n    _lineText;\n    /**\n     * used only if `_emitBinaryTokens` is false.\n     */\n    _tokens;\n    /**\n     * used only if `_emitBinaryTokens` is true.\n     */\n    _binaryTokens;\n    _lastTokenEndIndex;\n    _tokenTypeOverrides;\n    constructor(emitBinaryTokens, lineText, tokenTypeOverrides, balancedBracketSelectors) {\n        this.balancedBracketSelectors = balancedBracketSelectors;\n        this._emitBinaryTokens = emitBinaryTokens;\n        this._tokenTypeOverrides = tokenTypeOverrides;\n        {\n            this._lineText = null;\n        }\n        this._tokens = [];\n        this._binaryTokens = [];\n        this._lastTokenEndIndex = 0;\n    }\n    produce(stack, endIndex) {\n        this.produceFromScopes(stack.contentNameScopesList, endIndex);\n    }\n    produceFromScopes(scopesList, endIndex) {\n        if (this._lastTokenEndIndex >= endIndex) {\n            return;\n        }\n        if (this._emitBinaryTokens) {\n            let metadata = scopesList?.tokenAttributes ?? 0;\n            let containsBalancedBrackets = false;\n            if (this.balancedBracketSelectors?.matchesAlways) {\n                containsBalancedBrackets = true;\n            }\n            if (this._tokenTypeOverrides.length > 0 || (this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever)) {\n                // Only generate scope array when required to improve performance\n                const scopes = scopesList?.getScopeNames() ?? [];\n                for (const tokenType of this._tokenTypeOverrides) {\n                    if (tokenType.matcher(scopes)) {\n                        metadata = EncodedTokenAttributes.set(metadata, 0, toOptionalTokenType(tokenType.type), null, -1 /* FontStyle.NotSet */, 0, 0);\n                    }\n                }\n                if (this.balancedBracketSelectors) {\n                    containsBalancedBrackets = this.balancedBracketSelectors.match(scopes);\n                }\n            }\n            if (containsBalancedBrackets) {\n                metadata = EncodedTokenAttributes.set(metadata, 0, 8 /* OptionalStandardTokenType.NotSet */, containsBalancedBrackets, -1 /* FontStyle.NotSet */, 0, 0);\n            }\n            if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {\n                // no need to push a token with the same metadata\n                this._lastTokenEndIndex = endIndex;\n                return;\n            }\n            this._binaryTokens.push(this._lastTokenEndIndex);\n            this._binaryTokens.push(metadata);\n            this._lastTokenEndIndex = endIndex;\n            return;\n        }\n        const scopes = scopesList?.getScopeNames() ?? [];\n        this._tokens.push({\n            startIndex: this._lastTokenEndIndex,\n            endIndex: endIndex,\n            // value: lineText.substring(lastTokenEndIndex, endIndex),\n            scopes: scopes\n        });\n        this._lastTokenEndIndex = endIndex;\n    }\n    getResult(stack, lineLength) {\n        if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {\n            // pop produced token for newline\n            this._tokens.pop();\n        }\n        if (this._tokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._tokens[this._tokens.length - 1].startIndex = 0;\n        }\n        return this._tokens;\n    }\n    getBinaryResult(stack, lineLength) {\n        if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {\n            // pop produced token for newline\n            this._binaryTokens.pop();\n            this._binaryTokens.pop();\n        }\n        if (this._binaryTokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._binaryTokens[this._binaryTokens.length - 2] = 0;\n        }\n        const result = new Uint32Array(this._binaryTokens.length);\n        for (let i = 0, len = this._binaryTokens.length; i < len; i++) {\n            result[i] = this._binaryTokens[i];\n        }\n        return result;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass SyncRegistry {\n    _onigLibPromise;\n    _grammars = new Map();\n    _rawGrammars = new Map();\n    _injectionGrammars = new Map();\n    _theme;\n    constructor(theme, _onigLibPromise) {\n        this._onigLibPromise = _onigLibPromise;\n        this._theme = theme;\n    }\n    dispose() {\n        for (const grammar of this._grammars.values()) {\n            grammar.dispose();\n        }\n    }\n    setTheme(theme) {\n        this._theme = theme;\n    }\n    getColorMap() {\n        return this._theme.getColorMap();\n    }\n    /**\n     * Add `grammar` to registry and return a list of referenced scope names\n     */\n    addGrammar(grammar, injectionScopeNames) {\n        this._rawGrammars.set(grammar.scopeName, grammar);\n        if (injectionScopeNames) {\n            this._injectionGrammars.set(grammar.scopeName, injectionScopeNames);\n        }\n    }\n    /**\n     * Lookup a raw grammar.\n     */\n    lookup(scopeName) {\n        return this._rawGrammars.get(scopeName);\n    }\n    /**\n     * Returns the injections for the given grammar\n     */\n    injections(targetScope) {\n        return this._injectionGrammars.get(targetScope);\n    }\n    /**\n     * Get the default theme settings\n     */\n    getDefaults() {\n        return this._theme.getDefaults();\n    }\n    /**\n     * Match a scope in the theme.\n     */\n    themeMatch(scopePath) {\n        return this._theme.match(scopePath);\n    }\n    /**\n     * Lookup a grammar.\n     */\n    async grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n        if (!this._grammars.has(scopeName)) {\n            let rawGrammar = this._rawGrammars.get(scopeName);\n            if (!rawGrammar) {\n                return null;\n            }\n            this._grammars.set(scopeName, createGrammar(scopeName, rawGrammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, this, await this._onigLibPromise));\n        }\n        return this._grammars.get(scopeName);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n/**\n * The registry that will hold all grammars.\n */\nlet Registry$1 = class Registry {\n    _options;\n    _syncRegistry;\n    _ensureGrammarCache;\n    constructor(options) {\n        this._options = options;\n        this._syncRegistry = new SyncRegistry(Theme.createFromRawTheme(options.theme, options.colorMap), options.onigLib);\n        this._ensureGrammarCache = new Map();\n    }\n    dispose() {\n        this._syncRegistry.dispose();\n    }\n    /**\n     * Change the theme. Once called, no previous `ruleStack` should be used anymore.\n     */\n    setTheme(theme, colorMap) {\n        this._syncRegistry.setTheme(Theme.createFromRawTheme(theme, colorMap));\n    }\n    /**\n     * Returns a lookup array for color ids.\n     */\n    getColorMap() {\n        return this._syncRegistry.getColorMap();\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    loadGrammarWithEmbeddedLanguages(initialScopeName, initialLanguage, embeddedLanguages) {\n        return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages });\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    loadGrammarWithConfiguration(initialScopeName, initialLanguage, configuration) {\n        return this._loadGrammar(initialScopeName, initialLanguage, configuration.embeddedLanguages, configuration.tokenTypes, new BalancedBracketSelectors(configuration.balancedBracketSelectors || [], configuration.unbalancedBracketSelectors || []));\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     */\n    loadGrammar(initialScopeName) {\n        return this._loadGrammar(initialScopeName, 0, null, null, null);\n    }\n    async _loadGrammar(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n        const dependencyProcessor = new ScopeDependencyProcessor(this._syncRegistry, initialScopeName);\n        while (dependencyProcessor.Q.length > 0) {\n            await Promise.all(dependencyProcessor.Q.map((request) => this._loadSingleGrammar(request.scopeName)));\n            dependencyProcessor.processQueue();\n        }\n        return this._grammarForScopeName(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors);\n    }\n    async _loadSingleGrammar(scopeName) {\n        if (!this._ensureGrammarCache.has(scopeName)) {\n            this._ensureGrammarCache.set(scopeName, this._doLoadSingleGrammar(scopeName));\n        }\n        return this._ensureGrammarCache.get(scopeName);\n    }\n    async _doLoadSingleGrammar(scopeName) {\n        const grammar = await this._options.loadGrammar(scopeName);\n        if (grammar) {\n            const injections = typeof this._options.getInjections === \"function\" ? this._options.getInjections(scopeName) : undefined;\n            this._syncRegistry.addGrammar(grammar, injections);\n        }\n    }\n    /**\n     * Adds a rawGrammar.\n     */\n    async addGrammar(rawGrammar, injections = [], initialLanguage = 0, embeddedLanguages = null) {\n        this._syncRegistry.addGrammar(rawGrammar, injections);\n        return (await this._grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages));\n    }\n    /**\n     * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.\n     */\n    _grammarForScopeName(scopeName, initialLanguage = 0, embeddedLanguages = null, tokenTypes = null, balancedBracketSelectors = null) {\n        return this._syncRegistry.grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors);\n    }\n};\nconst INITIAL = StateStackImpl.NULL;\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n */\nconst MetadataConsts = {\n    LANGUAGEID_MASK: 0b00000000000000000000000011111111,\n    TOKEN_TYPE_MASK: 0b00000000000000000000001100000000,\n    BALANCED_BRACKETS_MASK: 0b00000000000000000000010000000000,\n    FONT_STYLE_MASK: 0b00000000000000000011100000000000,\n    FOREGROUND_MASK: 0b00000000011111111100000000000000,\n    BACKGROUND_MASK: 0b11111111100000000000000000000000,\n    LANGUAGEID_OFFSET: 0,\n    TOKEN_TYPE_OFFSET: 8,\n    BALANCED_BRACKETS_OFFSET: 10,\n    FONT_STYLE_OFFSET: 11,\n    FOREGROUND_OFFSET: 15,\n    BACKGROUND_OFFSET: 24,\n};\nclass StackElementMetadata {\n    static toBinaryStr(metadata) {\n        let r = metadata.toString(2);\n        while (r.length < 32)\n            r = `0${r}`;\n        return r;\n    }\n    // public static printMetadata(metadata: number): void {\n    //   const languageId = StackElementMetadata.getLanguageId(metadata)\n    //   const tokenType = StackElementMetadata.getTokenType(metadata)\n    //   const fontStyle = StackElementMetadata.getFontStyle(metadata)\n    //   const foreground = StackElementMetadata.getForeground(metadata)\n    //   const background = StackElementMetadata.getBackground(metadata)\n    //   console.log({\n    //     languageId,\n    //     tokenType,\n    //     fontStyle,\n    //     foreground,\n    //     background,\n    //   })\n    // }\n    static getLanguageId(metadata) {\n        return (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n    }\n    static getTokenType(metadata) {\n        return (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n    }\n    static getForeground(metadata) {\n        return (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n    }\n    static getBackground(metadata) {\n        return (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n    }\n    static set(metadata, languageId, tokenType, fontStyle, foreground, background) {\n        let _languageId = StackElementMetadata.getLanguageId(metadata);\n        let _tokenType = StackElementMetadata.getTokenType(metadata);\n        let _fontStyle = StackElementMetadata.getFontStyle(metadata);\n        let _foreground = StackElementMetadata.getForeground(metadata);\n        let _background = StackElementMetadata.getBackground(metadata);\n        const _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(metadata)\n            ? 1\n            : 0;\n        if (languageId !== 0)\n            _languageId = languageId;\n        if (tokenType !== 0 /* TemporaryStandardTokenType.Other */) {\n            _tokenType\n                = tokenType === 8 /* TemporaryStandardTokenType.MetaEmbedded */ ? 0 /* StandardTokenType.Other */ : tokenType;\n        }\n        if (fontStyle !== FontStyle.NotSet)\n            _fontStyle = fontStyle;\n        if (foreground !== 0)\n            _foreground = foreground;\n        if (background !== 0)\n            _background = background;\n        return (((_languageId << MetadataConsts.LANGUAGEID_OFFSET)\n            | (_tokenType << MetadataConsts.TOKEN_TYPE_OFFSET)\n            | (_fontStyle << MetadataConsts.FONT_STYLE_OFFSET)\n            | (_containsBalancedBracketsBit << MetadataConsts.BALANCED_BRACKETS_OFFSET)\n            | (_foreground << MetadataConsts.FOREGROUND_OFFSET)\n            | (_background << MetadataConsts.BACKGROUND_OFFSET))\n            >>> 0);\n    }\n}\n\nexport { INITIAL, Registry$1 as Registry, StackElementMetadata, Theme };\n", "import { StackElementMetadata, INITIAL, Registry as Registry$1, Theme } from './textmate.mjs';\nimport { FontStyle } from './types.mjs';\n\nfunction toArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Slipt a string into lines, each line preserves the line ending.\n */\nfunction splitLines(code, preserveEnding = false) {\n    const parts = code.split(/(\\r?\\n)/g);\n    let index = 0;\n    const lines = [];\n    for (let i = 0; i < parts.length; i += 2) {\n        const line = preserveEnding\n            ? parts[i] + (parts[i + 1] || '')\n            : parts[i];\n        lines.push([line, index]);\n        index += parts[i].length;\n        index += parts[i + 1]?.length || 0;\n    }\n    return lines;\n}\n/**\n * Check if the language is plaintext that is ignored by Shiki.\n *\n * Hard-coded plain text languages: `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isPlainLang(lang) {\n    return !lang || ['plaintext', 'txt', 'text', 'plain'].includes(lang);\n}\n/**\n * Check if the language is specially handled or bypassed by Shiki.\n *\n * Hard-coded languages: `ansi` and plaintexts like `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isSpecialLang(lang) {\n    return lang === 'ansi' || isPlainLang(lang);\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isNoneTheme(theme) {\n    return theme === 'none';\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isSpecialTheme(theme) {\n    return isNoneTheme(theme);\n}\n/**\n * Utility to append class to a hast node\n *\n * If the `property.class` is a string, it will be splitted by space and converted to an array.\n */\nfunction addClassToHast(node, className) {\n    if (!className)\n        return node;\n    node.properties ||= {};\n    node.properties.class ||= [];\n    if (typeof node.properties.class === 'string')\n        node.properties.class = node.properties.class.split(/\\s+/g);\n    if (!Array.isArray(node.properties.class))\n        node.properties.class = [];\n    const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n    for (const c of targets) {\n        if (c && !node.properties.class.includes(c))\n            node.properties.class.push(c);\n    }\n    return node;\n}\n/**\n * Split a token into multiple tokens by given offsets.\n *\n * The offsets are relative to the token, and should be sorted.\n */\nfunction splitToken(token, offsets) {\n    let lastOffset = 0;\n    const tokens = [];\n    for (const offset of offsets) {\n        if (offset > lastOffset) {\n            tokens.push({\n                ...token,\n                content: token.content.slice(lastOffset, offset),\n                offset: token.offset + lastOffset,\n            });\n        }\n        lastOffset = offset;\n    }\n    if (lastOffset < token.content.length) {\n        tokens.push({\n            ...token,\n            content: token.content.slice(lastOffset),\n            offset: token.offset + lastOffset,\n        });\n    }\n    return tokens;\n}\n/**\n * Split 2D tokens array by given breakpoints.\n */\nfunction splitTokens(tokens, breakpoints) {\n    const sorted = Array.from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints))\n        .sort((a, b) => a - b);\n    if (!sorted.length)\n        return tokens;\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            const breakpointsInToken = sorted\n                .filter(i => token.offset < i && i < token.offset + token.content.length)\n                .map(i => i - token.offset)\n                .sort((a, b) => a - b);\n            if (!breakpointsInToken.length)\n                return token;\n            return splitToken(token, breakpointsInToken);\n        });\n    });\n}\nfunction resolveColorReplacements(theme, options) {\n    const replacements = typeof theme === 'string' ? {} : { ...theme.colorReplacements };\n    const themeName = typeof theme === 'string' ? theme : theme.name;\n    for (const [key, value] of Object.entries(options?.colorReplacements || {})) {\n        if (typeof value === 'string')\n            replacements[key] = value;\n        else if (key === themeName)\n            Object.assign(replacements, value);\n    }\n    return replacements;\n}\nfunction applyColorReplacements(color, replacements) {\n    if (!color)\n        return color;\n    return replacements?.[color?.toLowerCase()] || color;\n}\nfunction getTokenStyleObject(token) {\n    const styles = {};\n    if (token.color)\n        styles.color = token.color;\n    if (token.bgColor)\n        styles['background-color'] = token.bgColor;\n    if (token.fontStyle) {\n        if (token.fontStyle & FontStyle.Italic)\n            styles['font-style'] = 'italic';\n        if (token.fontStyle & FontStyle.Bold)\n            styles['font-weight'] = 'bold';\n        if (token.fontStyle & FontStyle.Underline)\n            styles['text-decoration'] = 'underline';\n    }\n    return styles;\n}\nfunction stringifyTokenStyle(token) {\n    return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(';');\n}\n/**\n * Creates a converter between index and position in a code block.\n */\nfunction createPositionConverter(code) {\n    const lines = splitLines(code, true).map(([line]) => line);\n    function indexToPos(index) {\n        let character = index;\n        let line = 0;\n        for (const lineText of lines) {\n            if (character < lineText.length)\n                break;\n            character -= lineText.length;\n            line++;\n        }\n        return { line, character };\n    }\n    function posToIndex(line, character) {\n        let index = 0;\n        for (let i = 0; i < line; i++)\n            index += lines[i].length;\n        index += character;\n        return index;\n    }\n    return {\n        lines,\n        indexToPos,\n        posToIndex,\n    };\n}\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B[\", position);\n  if (nextEscape !== -1) {\n    const nextClose = value.indexOf(\"m\", nextEscape);\n    return {\n      sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n      startPosition: nextEscape,\n      position: nextClose + 1\n    };\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence, index) {\n  let offset = 1;\n  const colorMode = sequence[index + offset++];\n  let color;\n  if (colorMode === \"2\") {\n    const rgb = [\n      sequence[index + offset++],\n      sequence[index + offset++],\n      sequence[index + offset]\n    ].map((x) => Number.parseInt(x));\n    if (rgb.length === 3 && !rgb.some((x) => Number.isNaN(x))) {\n      color = {\n        type: \"rgb\",\n        rgb\n      };\n    }\n  } else if (colorMode === \"5\") {\n    const colorIndex = Number.parseInt(sequence[index + offset]);\n    if (!Number.isNaN(colorIndex)) {\n      color = { type: \"table\", index: Number(colorIndex) };\n    }\n  }\n  return [offset, color];\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const lines = splitLines(fileContents);\n    const colorPalette = createColorPalette(Object.fromEntries(namedColors.map(name => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`],\n    ])));\n    const parser = createAnsiSequenceParser();\n    return lines.map(line => parser.parse(line[0]).map((token) => {\n        let color;\n        let bgColor;\n        if (token.decorations.has('reverse')) {\n            color = token.background ? colorPalette.value(token.background) : theme.bg;\n            bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        }\n        else {\n            color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n            bgColor = token.background ? colorPalette.value(token.background) : undefined;\n        }\n        color = applyColorReplacements(color, colorReplacements);\n        bgColor = applyColorReplacements(bgColor, colorReplacements);\n        if (token.decorations.has('dim'))\n            color = dimColor(color);\n        let fontStyle = FontStyle.None;\n        if (token.decorations.has('bold'))\n            fontStyle |= FontStyle.Bold;\n        if (token.decorations.has('italic'))\n            fontStyle |= FontStyle.Italic;\n        if (token.decorations.has('underline'))\n            fontStyle |= FontStyle.Underline;\n        return {\n            content: token.value,\n            offset: line[1], // TODO: more accurate offset? might need to fork ansi-sequence-parser\n            color,\n            bgColor,\n            fontStyle,\n        };\n    }));\n}\n/**\n * Adds 50% alpha to a hex color string or the \"-dim\" postfix to a CSS variable\n */\nfunction dimColor(color) {\n    const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n    if (hexMatch) {\n        if (hexMatch[3]) {\n            // convert from #rrggbbaa to #rrggbb(aa/2)\n            const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2)\n                .toString(16)\n                .padStart(2, '0');\n            return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n        }\n        else if (hexMatch[2]) {\n            // convert from #rrggbb to #rrggbb80\n            return `#${hexMatch[1]}${hexMatch[2]}80`;\n        }\n        else {\n            // convert from #rgb to #rrggbb80\n            return `#${Array.from(hexMatch[1])\n                .map(x => `${x}${x}`)\n                .join('')}80`;\n        }\n    }\n    const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n    if (cssVarMatch)\n        return `var(${cssVarMatch[1]}-dim)`;\n    return color;\n}\n\n/**\n * Code to tokens, with a simple theme.\n */\nfunction codeToTokensBase(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        return splitLines(code).map(line => [{ content: line[0], offset: line[1] }]);\n    const { theme, colorMap } = internal.setTheme(themeName);\n    if (lang === 'ansi')\n        return tokenizeAnsiWithTheme(theme, code, options);\n    const _grammar = internal.getLanguage(lang);\n    return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const { tokenizeMaxLineLength = 0, tokenizeTimeLimit = 500, } = options;\n    const lines = splitLines(code);\n    let ruleStack = INITIAL;\n    let actual = [];\n    const final = [];\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const [line, lineOffset] = lines[i];\n        if (line === '') {\n            actual = [];\n            final.push([]);\n            continue;\n        }\n        // Do not attempt to tokenize if the line length is longer than the `tokenizationMaxLineLength`\n        if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {\n            actual = [];\n            final.push([{\n                    content: line,\n                    offset: lineOffset,\n                    color: '',\n                    fontStyle: 0,\n                }]);\n            continue;\n        }\n        let resultWithScopes;\n        let tokensWithScopes;\n        let tokensWithScopesIndex;\n        if (options.includeExplanation) {\n            resultWithScopes = grammar.tokenizeLine(line, ruleStack);\n            tokensWithScopes = resultWithScopes.tokens;\n            tokensWithScopesIndex = 0;\n        }\n        const result = grammar.tokenizeLine2(line, ruleStack, tokenizeTimeLimit);\n        const tokensLength = result.tokens.length / 2;\n        for (let j = 0; j < tokensLength; j++) {\n            const startIndex = result.tokens[2 * j];\n            const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n            if (startIndex === nextStartIndex)\n                continue;\n            const metadata = result.tokens[2 * j + 1];\n            const color = applyColorReplacements(colorMap[StackElementMetadata.getForeground(metadata)], colorReplacements);\n            const fontStyle = StackElementMetadata.getFontStyle(metadata);\n            const token = {\n                content: line.substring(startIndex, nextStartIndex),\n                offset: lineOffset + startIndex,\n                color,\n                fontStyle,\n            };\n            if (options.includeExplanation) {\n                token.explanation = [];\n                let offset = 0;\n                while (startIndex + offset < nextStartIndex) {\n                    const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n                    const tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\n                    offset += tokenWithScopesText.length;\n                    token.explanation.push({\n                        content: tokenWithScopesText,\n                        scopes: explainThemeScopes(theme, tokenWithScopes.scopes),\n                    });\n                    tokensWithScopesIndex += 1;\n                }\n            }\n            actual.push(token);\n        }\n        final.push(actual);\n        actual = [];\n        ruleStack = result.ruleStack;\n    }\n    return final;\n}\nfunction explainThemeScopes(theme, scopes) {\n    const result = [];\n    for (let i = 0, len = scopes.length; i < len; i++) {\n        const parentScopes = scopes.slice(0, i);\n        const scope = scopes[i];\n        result[i] = {\n            scopeName: scope,\n            themeMatches: explainThemeScope(theme, scope, parentScopes),\n        };\n    }\n    return result;\n}\nfunction matchesOne(selector, scope) {\n    const selectorPrefix = `${selector}.`;\n    if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix)\n        return true;\n    return false;\n}\nfunction matches(selector, selectorParentScopes, scope, parentScopes) {\n    if (!matchesOne(selector, scope))\n        return false;\n    let selectorParentIndex = selectorParentScopes.length - 1;\n    let parentIndex = parentScopes.length - 1;\n    while (selectorParentIndex >= 0 && parentIndex >= 0) {\n        if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex]))\n            selectorParentIndex -= 1;\n        parentIndex -= 1;\n    }\n    if (selectorParentIndex === -1)\n        return true;\n    return false;\n}\nfunction explainThemeScope(theme, scope, parentScopes) {\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = theme.settings.length; i < len; i++) {\n        const setting = theme.settings[i];\n        let selectors;\n        if (typeof setting.scope === 'string')\n            selectors = setting.scope.split(/,/).map(scope => scope.trim());\n        else if (Array.isArray(setting.scope))\n            selectors = setting.scope;\n        else\n            continue;\n        for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {\n            const rawSelector = selectors[j];\n            const rawSelectorPieces = rawSelector.split(/ /);\n            const selector = rawSelectorPieces[rawSelectorPieces.length - 1];\n            const selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);\n            if (matches(selector, selectorParentScopes, scope, parentScopes)) {\n                // match!\n                result[resultLen++] = setting;\n                // break the loop\n                j = lenJ;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Get tokens with multiple themes\n */\nfunction codeToTokensWithThemes(internal, code, options) {\n    const themes = Object.entries(options.themes)\n        .filter(i => i[1])\n        .map(i => ({ color: i[0], theme: i[1] }));\n    const tokens = syncThemesTokenization(...themes.map(t => codeToTokensBase(internal, code, {\n        ...options,\n        theme: t.theme,\n    })));\n    const mergedTokens = tokens[0]\n        .map((line, lineIdx) => line\n        .map((_token, tokenIdx) => {\n        const mergedToken = {\n            content: _token.content,\n            variants: {},\n            offset: _token.offset,\n        };\n        tokens.forEach((t, themeIdx) => {\n            const { content: _, explanation: __, offset: ___, ...styles } = t[lineIdx][tokenIdx];\n            mergedToken.variants[themes[themeIdx].color] = styles;\n        });\n        return mergedToken;\n    }));\n    return mergedTokens;\n}\n/**\n * Break tokens from multiple themes into same tokenization.\n *\n * For example, given two themes that tokenize `console.log(\"hello\")` as:\n *\n * - `console . log (\" hello \")` (6 tokens)\n * - `console .log ( \"hello\" )` (5 tokens)\n *\n * This function will return:\n *\n * - `console . log ( \" hello \" )` (8 tokens)\n * - `console . log ( \" hello \" )` (8 tokens)\n */\nfunction syncThemesTokenization(...themes) {\n    const outThemes = themes.map(() => []);\n    const count = themes.length;\n    for (let i = 0; i < themes[0].length; i++) {\n        const lines = themes.map(t => t[i]);\n        const outLines = outThemes.map(() => []);\n        outThemes.forEach((t, i) => t.push(outLines[i]));\n        const indexes = lines.map(() => 0);\n        const current = lines.map(l => l[0]);\n        while (current.every(t => t)) {\n            const minLength = Math.min(...current.map(t => t.content.length));\n            for (let n = 0; n < count; n++) {\n                const token = current[n];\n                if (token.content.length === minLength) {\n                    outLines[n].push(token);\n                    indexes[n] += 1;\n                    current[n] = lines[n][indexes[n]];\n                }\n                else {\n                    outLines[n].push({\n                        ...token,\n                        content: token.content.slice(0, minLength),\n                    });\n                    current[n] = {\n                        ...token,\n                        content: token.content.slice(minLength),\n                        offset: token.offset + minLength,\n                    };\n                }\n            }\n        }\n    }\n    return outThemes;\n}\n\nclass ShikiError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ShikiError';\n    }\n}\n\n/**\n * High-level code-to-tokens API.\n *\n * It will use `codeToTokensWithThemes` or `codeToTokensBase` based on the options.\n */\nfunction codeToTokens(internal, code, options) {\n    let bg;\n    let fg;\n    let tokens;\n    let themeName;\n    let rootStyle;\n    if ('themes' in options) {\n        const { defaultColor = 'light', cssVariablePrefix = '--shiki-', } = options;\n        const themes = Object.entries(options.themes)\n            .filter(i => i[1])\n            .map(i => ({ color: i[0], theme: i[1] }))\n            .sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n        if (themes.length === 0)\n            throw new ShikiError('`themes` option must not be empty');\n        const themeTokens = codeToTokensWithThemes(internal, code, options);\n        if (defaultColor && !themes.find(t => t.color === defaultColor))\n            throw new ShikiError(`\\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n        const themeRegs = themes.map(t => internal.getTheme(t.theme));\n        const themesOrder = themes.map(t => t.color);\n        tokens = themeTokens\n            .map(line => line.map(token => mergeToken(token, themesOrder, cssVariablePrefix, defaultColor)));\n        const themeColorReplacements = themes.map(t => resolveColorReplacements(t.theme, options));\n        fg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        bg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        themeName = `shiki-themes ${themeRegs.map(t => t.name).join(' ')}`;\n        rootStyle = defaultColor ? undefined : [fg, bg].join(';');\n    }\n    else if ('theme' in options) {\n        const colorReplacements = resolveColorReplacements(options.theme, options.colorReplacements);\n        tokens = codeToTokensBase(internal, code, options);\n        const _theme = internal.getTheme(options.theme);\n        bg = applyColorReplacements(_theme.bg, colorReplacements);\n        fg = applyColorReplacements(_theme.fg, colorReplacements);\n        themeName = _theme.name;\n    }\n    else {\n        throw new ShikiError('Invalid options, either `theme` or `themes` must be provided');\n    }\n    return {\n        tokens,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    };\n}\nfunction mergeToken(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n    const token = {\n        content: merged.content,\n        explanation: merged.explanation,\n        offset: merged.offset,\n    };\n    const styles = variantsOrder.map(t => getTokenStyleObject(merged.variants[t]));\n    // Get all style keys, for themes that missing some style, we put `inherit` to override as needed\n    const styleKeys = new Set(styles.flatMap(t => Object.keys(t)));\n    const mergedStyles = styles.reduce((acc, cur, idx) => {\n        for (const key of styleKeys) {\n            const value = cur[key] || 'inherit';\n            if (idx === 0 && defaultColor) {\n                acc[key] = value;\n            }\n            else {\n                const keyName = key === 'color' ? '' : key === 'background-color' ? '-bg' : `-${key}`;\n                const varKey = cssVariablePrefix + variantsOrder[idx] + (key === 'color' ? '' : keyName);\n                if (acc[key])\n                    acc[key] += `;${varKey}:${value}`;\n                else\n                    acc[key] = `${varKey}:${value}`;\n            }\n        }\n        return acc;\n    }, {});\n    token.htmlStyle = defaultColor\n        ? stringifyTokenStyle(mergedStyles)\n        : Object.values(mergedStyles).join(';');\n    return token;\n}\n\n/**\n * A built-in transformer to add decorations to the highlighted code.\n */\nfunction transformerDecorations() {\n    const map = new WeakMap();\n    function getContext(shiki) {\n        if (!map.has(shiki.meta)) {\n            const converter = createPositionConverter(shiki.source);\n            function normalizePosition(p) {\n                if (typeof p === 'number') {\n                    return {\n                        ...converter.indexToPos(p),\n                        offset: p,\n                    };\n                }\n                else {\n                    return {\n                        ...p,\n                        offset: converter.posToIndex(p.line, p.character),\n                    };\n                }\n            }\n            const decorations = (shiki.options.decorations || [])\n                .map((d) => ({\n                ...d,\n                start: normalizePosition(d.start),\n                end: normalizePosition(d.end),\n            }));\n            verifyIntersections(decorations);\n            map.set(shiki.meta, {\n                decorations,\n                converter,\n                source: shiki.source,\n            });\n        }\n        return map.get(shiki.meta);\n    }\n    function verifyIntersections(items) {\n        for (let i = 0; i < items.length; i++) {\n            const foo = items[i];\n            if (foo.start.offset > foo.end.offset)\n                throw new ShikiError(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);\n            for (let j = i + 1; j < items.length; j++) {\n                const bar = items[j];\n                const isFooHasBarStart = foo.start.offset < bar.start.offset && bar.start.offset < foo.end.offset;\n                const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset < foo.end.offset;\n                const isBarHasFooStart = bar.start.offset < foo.start.offset && foo.start.offset < bar.end.offset;\n                const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset < bar.end.offset;\n                if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {\n                    if (isFooHasBarEnd && isFooHasBarEnd)\n                        continue; // nested\n                    if (isBarHasFooStart && isBarHasFooEnd)\n                        continue; // nested\n                    throw new ShikiError(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);\n                }\n            }\n        }\n    }\n    return {\n        name: 'shiki:decorations',\n        tokens(tokens) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const breakpoints = ctx.decorations.flatMap(d => [d.start.offset, d.end.offset]);\n            const splitted = splitTokens(tokens, breakpoints);\n            return splitted;\n        },\n        code(codeEl) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const lines = Array.from(codeEl.children).filter(i => i.type === 'element' && i.tagName === 'span');\n            if (lines.length !== ctx.converter.lines.length)\n                throw new ShikiError(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);\n            function applyLineSection(line, start, end, decoration) {\n                const lineEl = lines[line];\n                let text = '';\n                let startIndex = -1;\n                let endIndex = -1;\n                function stringify(el) {\n                    if (el.type === 'text')\n                        return el.value;\n                    if (el.type === 'element')\n                        return el.children.map(stringify).join('');\n                    return '';\n                }\n                if (start === 0)\n                    startIndex = 0;\n                if (end === 0)\n                    endIndex = 0;\n                if (end === Number.POSITIVE_INFINITY)\n                    endIndex = lineEl.children.length;\n                if (startIndex === -1 || endIndex === -1) {\n                    for (let i = 0; i < lineEl.children.length; i++) {\n                        text += stringify(lineEl.children[i]);\n                        if (startIndex === -1 && text.length === start)\n                            startIndex = i + 1;\n                        if (endIndex === -1 && text.length === end)\n                            endIndex = i + 1;\n                    }\n                }\n                if (startIndex === -1)\n                    throw new ShikiError(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);\n                if (endIndex === -1)\n                    throw new ShikiError(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);\n                const children = lineEl.children.slice(startIndex, endIndex);\n                // Full line decoration\n                if (!decoration.alwaysWrap && children.length === lineEl.children.length) {\n                    applyDecoration(lineEl, decoration, 'line');\n                }\n                // Single token decoration\n                else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === 'element') {\n                    applyDecoration(children[0], decoration, 'token');\n                }\n                // Create a wrapper for the decoration\n                else {\n                    const wrapper = {\n                        type: 'element',\n                        tagName: 'span',\n                        properties: {},\n                        children,\n                    };\n                    applyDecoration(wrapper, decoration, 'wrapper');\n                    lineEl.children.splice(startIndex, children.length, wrapper);\n                }\n            }\n            function applyLine(line, decoration) {\n                lines[line] = applyDecoration(lines[line], decoration, 'line');\n            }\n            function applyDecoration(el, decoration, type) {\n                const properties = decoration.properties || {};\n                const transform = decoration.transform || (i => i);\n                el.tagName = decoration.tagName || 'span';\n                el.properties = {\n                    ...el.properties,\n                    ...properties,\n                    class: el.properties.class,\n                };\n                if (decoration.properties?.class)\n                    addClassToHast(el, decoration.properties.class);\n                el = transform(el, type) || el;\n                return el;\n            }\n            const lineApplies = [];\n            // Apply decorations in reverse order so the nested ones get applied first.\n            const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset);\n            for (const decoration of sorted) {\n                const { start, end } = decoration;\n                if (start.line === end.line) {\n                    applyLineSection(start.line, start.character, end.character, decoration);\n                }\n                else if (start.line < end.line) {\n                    applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);\n                    for (let i = start.line + 1; i < end.line; i++)\n                        lineApplies.unshift(() => applyLine(i, decoration));\n                    applyLineSection(end.line, 0, end.character, decoration);\n                }\n            }\n            lineApplies.forEach(i => i());\n        },\n    };\n}\n\nconst builtInTransformers = [\n    /* @__PURE__ */ transformerDecorations(),\n];\nfunction getTransformers(options) {\n    return [\n        ...options.transformers || [],\n        ...builtInTransformers,\n    ];\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n}) {\n    let input = code;\n    for (const transformer of getTransformers(options))\n        input = transformer.preprocess?.call(transformerContext, input, options) || input;\n    let { tokens, fg, bg, themeName, rootStyle, } = codeToTokens(internal, input, options);\n    const { mergeWhitespaces = true, } = options;\n    if (mergeWhitespaces === true)\n        tokens = mergeWhitespaceTokens(tokens);\n    else if (mergeWhitespaces === 'never')\n        tokens = splitWhitespaceTokens(tokens);\n    const contextSource = {\n        ...transformerContext,\n        get source() {\n            return input;\n        },\n    };\n    for (const transformer of getTransformers(options))\n        tokens = transformer.tokens?.call(contextSource, tokens) || tokens;\n    return tokensToHast(tokens, {\n        ...options,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    }, contextSource);\n}\nfunction tokensToHast(tokens, options, transformerContext) {\n    const transformers = getTransformers(options);\n    const lines = [];\n    const root = {\n        type: 'root',\n        children: [],\n    };\n    const { structure = 'classic', } = options;\n    let preNode = {\n        type: 'element',\n        tagName: 'pre',\n        properties: {\n            class: `shiki ${options.themeName || ''}`,\n            style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n            tabindex: '0',\n            ...Object.fromEntries(Array.from(Object.entries(options.meta || {}))\n                .filter(([key]) => !key.startsWith('_'))),\n        },\n        children: [],\n    };\n    let codeNode = {\n        type: 'element',\n        tagName: 'code',\n        properties: {},\n        children: lines,\n    };\n    const lineNodes = [];\n    const context = {\n        ...transformerContext,\n        structure,\n        addClassToHast,\n        get source() {\n            return transformerContext.source;\n        },\n        get tokens() {\n            return tokens;\n        },\n        get options() {\n            return options;\n        },\n        get root() {\n            return root;\n        },\n        get pre() {\n            return preNode;\n        },\n        get code() {\n            return codeNode;\n        },\n        get lines() {\n            return lineNodes;\n        },\n    };\n    tokens.forEach((line, idx) => {\n        if (idx) {\n            if (structure === 'inline')\n                root.children.push({ type: 'element', tagName: 'br', properties: {}, children: [] });\n            else if (structure === 'classic')\n                lines.push({ type: 'text', value: '\\n' });\n        }\n        let lineNode = {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'line' },\n            children: [],\n        };\n        let col = 0;\n        for (const token of line) {\n            let tokenNode = {\n                type: 'element',\n                tagName: 'span',\n                properties: {},\n                children: [{ type: 'text', value: token.content }],\n            };\n            const style = token.htmlStyle || stringifyTokenStyle(getTokenStyleObject(token));\n            if (style)\n                tokenNode.properties.style = style;\n            for (const transformer of transformers)\n                tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode) || tokenNode;\n            if (structure === 'inline')\n                root.children.push(tokenNode);\n            else if (structure === 'classic')\n                lineNode.children.push(tokenNode);\n            col += token.content.length;\n        }\n        if (structure === 'classic') {\n            for (const transformer of transformers)\n                lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n            lineNodes.push(lineNode);\n            lines.push(lineNode);\n        }\n    });\n    if (structure === 'classic') {\n        for (const transformer of transformers)\n            codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n        preNode.children.push(codeNode);\n        for (const transformer of transformers)\n            preNode = transformer?.pre?.call(context, preNode) || preNode;\n        root.children.push(preNode);\n    }\n    let result = root;\n    for (const transformer of transformers)\n        result = transformer?.root?.call(context, result) || result;\n    return result;\n}\nfunction mergeWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        const newLine = [];\n        let carryOnContent = '';\n        let firstOffset = 0;\n        line.forEach((token, idx) => {\n            const isUnderline = token.fontStyle && token.fontStyle & FontStyle.Underline;\n            const couldMerge = !isUnderline;\n            if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n                if (!firstOffset)\n                    firstOffset = token.offset;\n                carryOnContent += token.content;\n            }\n            else {\n                if (carryOnContent) {\n                    if (couldMerge) {\n                        newLine.push({\n                            ...token,\n                            offset: firstOffset,\n                            content: carryOnContent + token.content,\n                        });\n                    }\n                    else {\n                        newLine.push({\n                            content: carryOnContent,\n                            offset: firstOffset,\n                        }, token);\n                    }\n                    firstOffset = 0;\n                    carryOnContent = '';\n                }\n                else {\n                    newLine.push(token);\n                }\n            }\n        });\n        return newLine;\n    });\n}\nfunction splitWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            if (token.content.match(/^\\s+$/))\n                return token;\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n            if (!match)\n                return token;\n            const [, leading, content, trailing] = match;\n            if (!leading && !trailing)\n                return token;\n            const expanded = [{\n                    ...token,\n                    offset: token.offset + leading.length,\n                    content,\n                }];\n            if (leading) {\n                expanded.unshift({\n                    content: leading,\n                    offset: token.offset,\n                });\n            }\n            if (trailing) {\n                expanded.push({\n                    content: trailing,\n                    offset: token.offset + leading.length + content.length,\n                });\n            }\n            return expanded;\n        });\n    });\n}\n\n/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nconst htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n];\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nclass Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new Schema(property, normal, space)\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize(value) {\n  return value.toLowerCase()\n}\n\nclass Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;\n\nlet powers = 0;\n\nconst boolean = increment();\nconst booleanish = increment();\nconst overloadedBoolean = increment();\nconst number = increment();\nconst spaceSeparated = increment();\nconst commaSeparated = increment();\nconst commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return 2 ** ++powers\n}\n\nvar types = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  boolean: boolean,\n  booleanish: booleanish,\n  commaOrSpaceSeparated: commaOrSpaceSeparated,\n  commaSeparated: commaSeparated,\n  number: number,\n  overloadedBoolean: overloadedBoolean,\n  spaceSeparated: spaceSeparated\n});\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\n\nclass DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n\n    super(property, attribute);\n\n    mark(this, 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\nconst own$3 = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nfunction create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n\n  for (prop in definition.properties) {\n    if (own$3.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      );\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n\nconst xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n\nconst xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n});\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n\nconst xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n});\n\nconst aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n\nconst html$3 = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n\nconst svg$1 = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nfunction find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = DefinedInfo;\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nconst html$2 = merge([xml, xlink, xmlns, aria, html$3], 'html');\nconst svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');\n\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it\u2019s value is this function\u2019s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it\u2019s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own$2 = {}.hasOwnProperty;\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nfunction zwitch(key, options) {\n  const settings = options || {};\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn\u2019t have a `key` property, the special\n   * \u201Cinvalid\u201D handler will be called.\n   * If `value` has an unknown `key`, the special \u201Cunknown\u201D handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it\u2019s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it\u2019s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n\n    if (value && own$2.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one\n}\n\n/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nfunction core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  );\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = [];\n  let index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toDecimal(code, next, omit) {\n  const value = '&#' + String(code);\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * List of legacy HTML named character references that don\u2019t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nconst characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n];\n\n/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nconst characterEntitiesHtml4 = {\n  nbsp: '\u00A0',\n  iexcl: '\u00A1',\n  cent: '\u00A2',\n  pound: '\u00A3',\n  curren: '\u00A4',\n  yen: '\u00A5',\n  brvbar: '\u00A6',\n  sect: '\u00A7',\n  uml: '\u00A8',\n  copy: '\u00A9',\n  ordf: '\u00AA',\n  laquo: '\u00AB',\n  not: '\u00AC',\n  shy: '\u00AD',\n  reg: '\u00AE',\n  macr: '\u00AF',\n  deg: '\u00B0',\n  plusmn: '\u00B1',\n  sup2: '\u00B2',\n  sup3: '\u00B3',\n  acute: '\u00B4',\n  micro: '\u00B5',\n  para: '\u00B6',\n  middot: '\u00B7',\n  cedil: '\u00B8',\n  sup1: '\u00B9',\n  ordm: '\u00BA',\n  raquo: '\u00BB',\n  frac14: '\u00BC',\n  frac12: '\u00BD',\n  frac34: '\u00BE',\n  iquest: '\u00BF',\n  Agrave: '\u00C0',\n  Aacute: '\u00C1',\n  Acirc: '\u00C2',\n  Atilde: '\u00C3',\n  Auml: '\u00C4',\n  Aring: '\u00C5',\n  AElig: '\u00C6',\n  Ccedil: '\u00C7',\n  Egrave: '\u00C8',\n  Eacute: '\u00C9',\n  Ecirc: '\u00CA',\n  Euml: '\u00CB',\n  Igrave: '\u00CC',\n  Iacute: '\u00CD',\n  Icirc: '\u00CE',\n  Iuml: '\u00CF',\n  ETH: '\u00D0',\n  Ntilde: '\u00D1',\n  Ograve: '\u00D2',\n  Oacute: '\u00D3',\n  Ocirc: '\u00D4',\n  Otilde: '\u00D5',\n  Ouml: '\u00D6',\n  times: '\u00D7',\n  Oslash: '\u00D8',\n  Ugrave: '\u00D9',\n  Uacute: '\u00DA',\n  Ucirc: '\u00DB',\n  Uuml: '\u00DC',\n  Yacute: '\u00DD',\n  THORN: '\u00DE',\n  szlig: '\u00DF',\n  agrave: '\u00E0',\n  aacute: '\u00E1',\n  acirc: '\u00E2',\n  atilde: '\u00E3',\n  auml: '\u00E4',\n  aring: '\u00E5',\n  aelig: '\u00E6',\n  ccedil: '\u00E7',\n  egrave: '\u00E8',\n  eacute: '\u00E9',\n  ecirc: '\u00EA',\n  euml: '\u00EB',\n  igrave: '\u00EC',\n  iacute: '\u00ED',\n  icirc: '\u00EE',\n  iuml: '\u00EF',\n  eth: '\u00F0',\n  ntilde: '\u00F1',\n  ograve: '\u00F2',\n  oacute: '\u00F3',\n  ocirc: '\u00F4',\n  otilde: '\u00F5',\n  ouml: '\u00F6',\n  divide: '\u00F7',\n  oslash: '\u00F8',\n  ugrave: '\u00F9',\n  uacute: '\u00FA',\n  ucirc: '\u00FB',\n  uuml: '\u00FC',\n  yacute: '\u00FD',\n  thorn: '\u00FE',\n  yuml: '\u00FF',\n  fnof: '\u0192',\n  Alpha: '\u0391',\n  Beta: '\u0392',\n  Gamma: '\u0393',\n  Delta: '\u0394',\n  Epsilon: '\u0395',\n  Zeta: '\u0396',\n  Eta: '\u0397',\n  Theta: '\u0398',\n  Iota: '\u0399',\n  Kappa: '\u039A',\n  Lambda: '\u039B',\n  Mu: '\u039C',\n  Nu: '\u039D',\n  Xi: '\u039E',\n  Omicron: '\u039F',\n  Pi: '\u03A0',\n  Rho: '\u03A1',\n  Sigma: '\u03A3',\n  Tau: '\u03A4',\n  Upsilon: '\u03A5',\n  Phi: '\u03A6',\n  Chi: '\u03A7',\n  Psi: '\u03A8',\n  Omega: '\u03A9',\n  alpha: '\u03B1',\n  beta: '\u03B2',\n  gamma: '\u03B3',\n  delta: '\u03B4',\n  epsilon: '\u03B5',\n  zeta: '\u03B6',\n  eta: '\u03B7',\n  theta: '\u03B8',\n  iota: '\u03B9',\n  kappa: '\u03BA',\n  lambda: '\u03BB',\n  mu: '\u03BC',\n  nu: '\u03BD',\n  xi: '\u03BE',\n  omicron: '\u03BF',\n  pi: '\u03C0',\n  rho: '\u03C1',\n  sigmaf: '\u03C2',\n  sigma: '\u03C3',\n  tau: '\u03C4',\n  upsilon: '\u03C5',\n  phi: '\u03C6',\n  chi: '\u03C7',\n  psi: '\u03C8',\n  omega: '\u03C9',\n  thetasym: '\u03D1',\n  upsih: '\u03D2',\n  piv: '\u03D6',\n  bull: '\u2022',\n  hellip: '\u2026',\n  prime: '\u2032',\n  Prime: '\u2033',\n  oline: '\u203E',\n  frasl: '\u2044',\n  weierp: '\u2118',\n  image: '\u2111',\n  real: '\u211C',\n  trade: '\u2122',\n  alefsym: '\u2135',\n  larr: '\u2190',\n  uarr: '\u2191',\n  rarr: '\u2192',\n  darr: '\u2193',\n  harr: '\u2194',\n  crarr: '\u21B5',\n  lArr: '\u21D0',\n  uArr: '\u21D1',\n  rArr: '\u21D2',\n  dArr: '\u21D3',\n  hArr: '\u21D4',\n  forall: '\u2200',\n  part: '\u2202',\n  exist: '\u2203',\n  empty: '\u2205',\n  nabla: '\u2207',\n  isin: '\u2208',\n  notin: '\u2209',\n  ni: '\u220B',\n  prod: '\u220F',\n  sum: '\u2211',\n  minus: '\u2212',\n  lowast: '\u2217',\n  radic: '\u221A',\n  prop: '\u221D',\n  infin: '\u221E',\n  ang: '\u2220',\n  and: '\u2227',\n  or: '\u2228',\n  cap: '\u2229',\n  cup: '\u222A',\n  int: '\u222B',\n  there4: '\u2234',\n  sim: '\u223C',\n  cong: '\u2245',\n  asymp: '\u2248',\n  ne: '\u2260',\n  equiv: '\u2261',\n  le: '\u2264',\n  ge: '\u2265',\n  sub: '\u2282',\n  sup: '\u2283',\n  nsub: '\u2284',\n  sube: '\u2286',\n  supe: '\u2287',\n  oplus: '\u2295',\n  otimes: '\u2297',\n  perp: '\u22A5',\n  sdot: '\u22C5',\n  lceil: '\u2308',\n  rceil: '\u2309',\n  lfloor: '\u230A',\n  rfloor: '\u230B',\n  lang: '\u2329',\n  rang: '\u232A',\n  loz: '\u25CA',\n  spades: '\u2660',\n  clubs: '\u2663',\n  hearts: '\u2665',\n  diams: '\u2666',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: '\u0152',\n  oelig: '\u0153',\n  Scaron: '\u0160',\n  scaron: '\u0161',\n  Yuml: '\u0178',\n  circ: '\u02C6',\n  tilde: '\u02DC',\n  ensp: '\u2002',\n  emsp: '\u2003',\n  thinsp: '\u2009',\n  zwnj: '\u200C',\n  zwj: '\u200D',\n  lrm: '\u200E',\n  rlm: '\u200F',\n  ndash: '\u2013',\n  mdash: '\u2014',\n  lsquo: '\u2018',\n  rsquo: '\u2019',\n  sbquo: '\u201A',\n  ldquo: '\u201C',\n  rdquo: '\u201D',\n  bdquo: '\u201E',\n  dagger: '\u2020',\n  Dagger: '\u2021',\n  permil: '\u2030',\n  lsaquo: '\u2039',\n  rsaquo: '\u203A',\n  euro: '\u20AC'\n};\n\n/**\n * List of legacy (that don\u2019t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nconst dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n];\n\nconst own$1 = {}.hasOwnProperty;\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {};\n\n/** @type {string} */\nlet key;\n\nfor (key in characterEntitiesHtml4) {\n  if (own$1.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nfunction toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n\n  if (own$1.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n\n/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls \u201Cparse errors\u201D but is otherwise still valid HTML \u2014 don\u2019t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don\u2019t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nfunction formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n  let named;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    );\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n\n/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g;\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>'];\nconst commentEntitySubset = ['<', '>'];\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n\n/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nfunction ccount(value, character) {\n  const source = String(value);\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0;\n  let index = source.indexOf(character);\n\n  while (index !== -1) {\n    count++;\n    index = source.indexOf(character, index + character.length);\n  }\n\n  return count\n}\n\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nfunction stringify$1(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n\n/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nfunction stringify(values) {\n  return values.join(' ').trim()\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nfunction whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n */\n\n\nconst siblingAfter = siblings(1);\nconst siblingBefore = siblings(-1);\n\n/** @type {Array<RootContent>} */\nconst emptyChildren$1 = [];\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren$1;\n    let offset = (index || 0) + increment;\n    let next = siblings[offset];\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment;\n        next = siblings[offset];\n      }\n    }\n\n    // @ts-expect-error: it\u2019s a correct child.\n    return next\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nfunction omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst closing = omission({\n  body: body$1,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html: html$1,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody: tbody$1,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n});\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true);\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1);\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children;\n  /** @type {Array<string>} */\n  const seen = [];\n  let index = -1;\n\n  while (++index < children.length) {\n    const child = children[index];\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName);\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true);\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it\u2019s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Properties} Properties\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n};\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n\n  const attributes = serializeAttributes(state, node.properties);\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  );\n\n  state.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false;\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '');\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1);\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined;\n\n    // In tight mode, don\u2019t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key);\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value);\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  );\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can\u2019t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn\u2019t accept a second argument, but it\u2019s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? stringify$1 : stringify)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value);\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    );\n  }\n\n  // If we don\u2019t want unquoted, or if `value` contains character references when\n  // unquoted\u2026\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative;\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote;\n  }\n\n  // Don\u2019t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&'];\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction root(node, _1, _2, state) {\n  return state.all(node)\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nconst handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n});\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_);\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('stringify-entities').Options} StringifyEntitiesOptions\n */\n\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {};\n\n/** @type {Array<never>} */\nconst emptyChildren = [];\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nfunction toHtml(tree, options) {\n  const options_ = options || emptyOptions;\n  const quote = options_.quote || '\"';\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html$2,\n    quote,\n    alternative\n  };\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = [];\n  const children = (parent && parent.children) || emptyChildren;\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('')\n}\n\n/**\n * Get highlighted code in HTML.\n */\nfunction codeToHtml(internal, code, options) {\n    const context = {\n        meta: {},\n        options,\n        codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n        codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n    };\n    let result = toHtml(codeToHast(internal, code, options, context));\n    for (const transformer of getTransformers(options))\n        result = transformer.postprocess?.call(context, result, options) || result;\n    return result;\n}\n\nasync function main(init) {\n    let wasmMemory;\n    let buffer;\n    const binding = {};\n    function updateGlobalBufferAndViews(buf) {\n        buffer = buf;\n        binding.HEAPU8 = new Uint8Array(buf);\n        binding.HEAPU32 = new Uint32Array(buf);\n    }\n    function _emscripten_get_now() {\n        return typeof performance !== 'undefined' ? performance.now() : Date.now();\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n        binding.HEAPU8.copyWithin(dest, src, src + num);\n    }\n    function getHeapMax() {\n        return 2147483648;\n    }\n    function emscripten_realloc_buffer(size) {\n        try {\n            wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n        }\n        catch (e) { }\n    }\n    function _emscripten_resize_heap(requestedSize) {\n        const oldSize = binding.HEAPU8.length;\n        requestedSize = requestedSize >>> 0;\n        const maxHeapSize = getHeapMax();\n        if (requestedSize > maxHeapSize)\n            return false;\n        const alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n        for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            const replacement = emscripten_realloc_buffer(newSize);\n            if (replacement)\n                return true;\n        }\n        return false;\n    }\n    const asmLibraryArg = {\n        emscripten_get_now: _emscripten_get_now,\n        emscripten_memcpy_big: _emscripten_memcpy_big,\n        emscripten_resize_heap: _emscripten_resize_heap,\n        fd_write: () => 0,\n    };\n    async function createWasm() {\n        const info = {\n            env: asmLibraryArg,\n            wasi_snapshot_preview1: asmLibraryArg,\n        };\n        const exports = await init(info);\n        wasmMemory = exports.memory;\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        Object.assign(binding, exports);\n    }\n    await createWasm();\n    return binding;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\nlet onigBinding = null;\nlet defaultDebugCall = false;\nfunction throwLastOnigError(onigBinding) {\n    throw new ShikiError(onigBinding.UTF8ToString(onigBinding.getLastOnigError()));\n}\nclass UtfString {\n    static _utf8ByteLength(str) {\n        let result = 0;\n        for (let i = 0, len = str.length; i < len; i++) {\n            const charCode = str.charCodeAt(i);\n            let codepoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i + 1 < len) {\n                    const nextCharCode = str.charCodeAt(i + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codepoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (codepoint <= 0x7F)\n                result += 1;\n            else if (codepoint <= 0x7FF)\n                result += 2;\n            else if (codepoint <= 0xFFFF)\n                result += 3;\n            else\n                result += 4;\n            if (wasSurrogatePair)\n                i++;\n        }\n        return result;\n    }\n    utf16Length;\n    utf8Length;\n    utf16Value;\n    utf8Value;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    constructor(str) {\n        const utf16Length = str.length;\n        const utf8Length = UtfString._utf8ByteLength(str);\n        const computeIndicesMapping = (utf8Length !== utf16Length);\n        const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n        if (computeIndicesMapping)\n            utf16OffsetToUtf8[utf16Length] = utf8Length;\n        const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n        if (computeIndicesMapping)\n            utf8OffsetToUtf16[utf8Length] = utf16Length;\n        const utf8Value = new Uint8Array(utf8Length);\n        let i8 = 0;\n        for (let i16 = 0; i16 < utf16Length; i16++) {\n            const charCode = str.charCodeAt(i16);\n            let codePoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i16 + 1 < utf16Length) {\n                    const nextCharCode = str.charCodeAt(i16 + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codePoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (computeIndicesMapping) {\n                utf16OffsetToUtf8[i16] = i8;\n                if (wasSurrogatePair)\n                    utf16OffsetToUtf8[i16 + 1] = i8;\n                if (codePoint <= 0x7F) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                }\n                else if (codePoint <= 0x7FF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                }\n                else if (codePoint <= 0xFFFF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                }\n                else {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                    utf8OffsetToUtf16[i8 + 3] = i16;\n                }\n            }\n            if (codePoint <= 0x7F) {\n                utf8Value[i8++] = codePoint;\n            }\n            else if (codePoint <= 0x7FF) {\n                utf8Value[i8++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else if (codePoint <= 0xFFFF) {\n                utf8Value[i8++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else {\n                utf8Value[i8++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            if (wasSurrogatePair)\n                i16++;\n        }\n        this.utf16Length = utf16Length;\n        this.utf8Length = utf8Length;\n        this.utf16Value = str;\n        this.utf8Value = utf8Value;\n        this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n    }\n    createString(onigBinding) {\n        const result = onigBinding.omalloc(this.utf8Length);\n        onigBinding.HEAPU8.set(this.utf8Value, result);\n        return result;\n    }\n}\nclass OnigString {\n    static LAST_ID = 0;\n    static _sharedPtr = 0; // a pointer to a string of 10000 bytes\n    static _sharedPtrInUse = false;\n    id = (++OnigString.LAST_ID);\n    _onigBinding;\n    content;\n    utf16Length;\n    utf8Length;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    ptr;\n    constructor(str) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        this._onigBinding = onigBinding;\n        this.content = str;\n        const utfString = new UtfString(str);\n        this.utf16Length = utfString.utf16Length;\n        this.utf8Length = utfString.utf8Length;\n        this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n        if (this.utf8Length < 10000 && !OnigString._sharedPtrInUse) {\n            if (!OnigString._sharedPtr)\n                OnigString._sharedPtr = onigBinding.omalloc(10000);\n            OnigString._sharedPtrInUse = true;\n            onigBinding.HEAPU8.set(utfString.utf8Value, OnigString._sharedPtr);\n            this.ptr = OnigString._sharedPtr;\n        }\n        else {\n            this.ptr = utfString.createString(onigBinding);\n        }\n    }\n    convertUtf8OffsetToUtf16(utf8Offset) {\n        if (this.utf8OffsetToUtf16) {\n            if (utf8Offset < 0)\n                return 0;\n            if (utf8Offset > this.utf8Length)\n                return this.utf16Length;\n            return this.utf8OffsetToUtf16[utf8Offset];\n        }\n        return utf8Offset;\n    }\n    convertUtf16OffsetToUtf8(utf16Offset) {\n        if (this.utf16OffsetToUtf8) {\n            if (utf16Offset < 0)\n                return 0;\n            if (utf16Offset > this.utf16Length)\n                return this.utf8Length;\n            return this.utf16OffsetToUtf8[utf16Offset];\n        }\n        return utf16Offset;\n    }\n    dispose() {\n        if (this.ptr === OnigString._sharedPtr)\n            OnigString._sharedPtrInUse = false;\n        else\n            this._onigBinding.ofree(this.ptr);\n    }\n}\nclass OnigScanner {\n    _onigBinding;\n    _ptr;\n    constructor(patterns) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        const strPtrsArr = [];\n        const strLenArr = [];\n        for (let i = 0, len = patterns.length; i < len; i++) {\n            const utfString = new UtfString(patterns[i]);\n            strPtrsArr[i] = utfString.createString(onigBinding);\n            strLenArr[i] = utfString.utf8Length;\n        }\n        const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n        const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n        const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n        for (let i = 0, len = patterns.length; i < len; i++)\n            onigBinding.ofree(strPtrsArr[i]);\n        onigBinding.ofree(strLenPtr);\n        onigBinding.ofree(strPtrsPtr);\n        if (scannerPtr === 0)\n            throwLastOnigError(onigBinding);\n        this._onigBinding = onigBinding;\n        this._ptr = scannerPtr;\n    }\n    dispose() {\n        this._onigBinding.freeOnigScanner(this._ptr);\n    }\n    findNextMatchSync(string, startPosition, arg) {\n        let debugCall = defaultDebugCall;\n        let options = 0 /* FindOption.None */;\n        if (typeof arg === 'number') {\n            if (arg & 8 /* FindOption.DebugCall */)\n                debugCall = true;\n            options = arg;\n        }\n        else if (typeof arg === 'boolean') {\n            debugCall = arg;\n        }\n        if (typeof string === 'string') {\n            string = new OnigString(string);\n            const result = this._findNextMatchSync(string, startPosition, debugCall, options);\n            string.dispose();\n            return result;\n        }\n        return this._findNextMatchSync(string, startPosition, debugCall, options);\n    }\n    _findNextMatchSync(string, startPosition, debugCall, options) {\n        const onigBinding = this._onigBinding;\n        let resultPtr;\n        if (debugCall)\n            resultPtr = onigBinding.findNextOnigScannerMatchDbg(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        else\n            resultPtr = onigBinding.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        if (resultPtr === 0) {\n            // no match\n            return null;\n        }\n        const HEAPU32 = onigBinding.HEAPU32;\n        let offset = resultPtr / 4; // byte offset -> uint32 offset\n        const index = HEAPU32[offset++];\n        const count = HEAPU32[offset++];\n        const captureIndices = [];\n        for (let i = 0; i < count; i++) {\n            const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            captureIndices[i] = {\n                start: beg,\n                end,\n                length: end - beg,\n            };\n        }\n        return {\n            index,\n            captureIndices,\n        };\n    }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.instantiator === 'function');\n}\nfunction isInstantiatorModule(dataOrOptions) {\n    return (typeof dataOrOptions.default === 'function');\n}\nfunction isDataOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.data !== 'undefined');\n}\nfunction isResponse(dataOrOptions) {\n    return (typeof Response !== 'undefined' && dataOrOptions instanceof Response);\n}\nfunction isArrayBuffer(data) {\n    return (typeof ArrayBuffer !== 'undefined' && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)))\n        // eslint-disable-next-line node/prefer-global/buffer\n        || (typeof Buffer !== 'undefined' && Buffer.isBuffer?.(data))\n        || (typeof SharedArrayBuffer !== 'undefined' && data instanceof SharedArrayBuffer)\n        || (typeof Uint32Array !== 'undefined' && data instanceof Uint32Array);\n}\nlet initPromise;\nfunction loadWasm(options) {\n    if (initPromise)\n        return initPromise;\n    async function _load() {\n        onigBinding = await main(async (info) => {\n            let instance = options;\n            instance = await instance;\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (isInstantiatorOptionsObject(instance)) {\n                instance = await instance.instantiator(info);\n            }\n            else if (isInstantiatorModule(instance)) {\n                instance = await instance.default(info);\n            }\n            else {\n                if (isDataOptionsObject(instance))\n                    instance = instance.data;\n                if (isResponse(instance)) {\n                    if (typeof WebAssembly.instantiateStreaming === 'function')\n                        instance = await _makeResponseStreamingLoader(instance)(info);\n                    else\n                        instance = await _makeResponseNonStreamingLoader(instance)(info);\n                }\n                else if (isArrayBuffer(instance)) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                // import(\"shiki/onig.wasm\") returns `{ default: WebAssembly.Module }` on cloudflare workers\n                // https://developers.cloudflare.com/workers/wrangler/bundling/\n                else if (instance instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                else if ('default' in instance && instance.default instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance.default)(info);\n                }\n            }\n            if ('instance' in instance)\n                instance = instance.instance;\n            if ('exports' in instance)\n                instance = instance.exports;\n            return instance;\n        });\n    }\n    initPromise = _load();\n    return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n    return importObject => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n    return importObject => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n    return async (importObject) => {\n        const arrayBuffer = await data.arrayBuffer();\n        return WebAssembly.instantiate(arrayBuffer, importObject);\n    };\n}\nfunction createOnigString(str) {\n    return new OnigString(str);\n}\nfunction createOnigScanner(patterns) {\n    return new OnigScanner(patterns);\n}\n\n/**\n * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268\n */\nconst VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };\nconst RESOLVED_KEY = '__shiki_resolved';\n/**\n * Normalize a textmate theme to shiki theme\n */\nfunction normalizeTheme(rawTheme) {\n    // @ts-expect-error private field\n    if (rawTheme?.[RESOLVED_KEY])\n        return rawTheme;\n    const theme = {\n        ...rawTheme,\n    };\n    // Fallback settings\n    if (theme.tokenColors && !theme.settings) {\n        theme.settings = theme.tokenColors;\n        delete theme.tokenColors;\n    }\n    theme.type ||= 'dark';\n    theme.colorReplacements = { ...theme.colorReplacements };\n    theme.settings ||= [];\n    // Guess fg/bg colors\n    let { bg, fg } = theme;\n    if (!bg || !fg) {\n        /**\n         * First try:\n         * Theme might contain a global `tokenColor` without `name` or `scope`\n         * Used as default value for foreground/background\n         */\n        const globalSetting = theme.settings\n            ? theme.settings.find((s) => !s.name && !s.scope)\n            : undefined;\n        if (globalSetting?.settings?.foreground)\n            fg = globalSetting.settings.foreground;\n        if (globalSetting?.settings?.background)\n            bg = globalSetting.settings.background;\n        /**\n         * Second try:\n         * If there's no global `tokenColor` without `name` or `scope`\n         * Use `editor.foreground` and `editor.background`\n         */\n        if (!fg && theme?.colors?.['editor.foreground'])\n            fg = theme.colors['editor.foreground'];\n        if (!bg && theme?.colors?.['editor.background'])\n            bg = theme.colors['editor.background'];\n        /**\n         * Last try:\n         * If there's no fg/bg color specified in theme, use default\n         */\n        if (!fg)\n            fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n        if (!bg)\n            bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n        theme.fg = fg;\n        theme.bg = bg;\n    }\n    // Push a no-scope setting with fallback colors\n    if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n        theme.settings.unshift({\n            settings: {\n                foreground: theme.fg,\n                background: theme.bg,\n            },\n        });\n    }\n    // Push non-hex colors to color replacements, as `vscode-textmate` doesn't support them\n    let replacementCount = 0;\n    const replacementMap = new Map();\n    function getReplacementColor(value) {\n        if (replacementMap.has(value))\n            return replacementMap.get(value);\n        replacementCount += 1;\n        const hex = `#${replacementCount.toString(16).padStart(8, '0').toLowerCase()}`;\n        if (theme.colorReplacements?.[`#${hex}`]) // already exists\n            return getReplacementColor(value);\n        replacementMap.set(value, hex);\n        return hex;\n    }\n    theme.settings = theme.settings.map((setting) => {\n        const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith('#');\n        const replaceBg = setting.settings?.background && !setting.settings.background.startsWith('#');\n        if (!replaceFg && !replaceBg)\n            return setting;\n        const clone = {\n            ...setting,\n            settings: {\n                ...setting.settings,\n            },\n        };\n        if (replaceFg) {\n            const replacement = getReplacementColor(setting.settings.foreground);\n            theme.colorReplacements[replacement] = setting.settings.foreground;\n            clone.settings.foreground = replacement;\n        }\n        if (replaceBg) {\n            const replacement = getReplacementColor(setting.settings.background);\n            theme.colorReplacements[replacement] = setting.settings.background;\n            clone.settings.background = replacement;\n        }\n        return clone;\n    });\n    for (const key of Object.keys(theme.colors || {})) {\n        // Only patch for known keys\n        if (key === 'editor.foreground' || key === 'editor.background' || key.startsWith('terminal.ansi')) {\n            if (!theme.colors[key]?.startsWith('#')) {\n                const replacement = getReplacementColor(theme.colors[key]);\n                theme.colorReplacements[replacement] = theme.colors[key];\n                theme.colors[key] = replacement;\n            }\n        }\n    }\n    Object.defineProperty(theme, RESOLVED_KEY, {\n        enumerable: false,\n        writable: false,\n        value: true,\n    });\n    return theme;\n}\n\nclass Registry extends Registry$1 {\n    _resolver;\n    _themes;\n    _langs;\n    _alias;\n    _resolvedThemes = {};\n    _resolvedGrammars = {};\n    _langMap = {};\n    _langGraph = new Map();\n    _textmateThemeCache = new WeakMap();\n    _loadedThemesCache = null;\n    _loadedLanguagesCache = null;\n    constructor(_resolver, _themes, _langs, _alias = {}) {\n        super(_resolver);\n        this._resolver = _resolver;\n        this._themes = _themes;\n        this._langs = _langs;\n        this._alias = _alias;\n        _themes.forEach(t => this.loadTheme(t));\n        _langs.forEach(l => this.loadLanguage(l));\n    }\n    getTheme(theme) {\n        if (typeof theme === 'string')\n            return this._resolvedThemes[theme];\n        else\n            return this.loadTheme(theme);\n    }\n    loadTheme(theme) {\n        const _theme = normalizeTheme(theme);\n        if (_theme.name) {\n            this._resolvedThemes[_theme.name] = _theme;\n            // Reset cache\n            this._loadedThemesCache = null;\n        }\n        return _theme;\n    }\n    getLoadedThemes() {\n        if (!this._loadedThemesCache)\n            this._loadedThemesCache = Object.keys(this._resolvedThemes);\n        return this._loadedThemesCache;\n    }\n    // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`\n    // is expensive. Themes can switch often especially for dual-theme support.\n    //\n    // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,\n    // we omit here so it's easier to cache the themes.\n    setTheme(theme) {\n        let textmateTheme = this._textmateThemeCache.get(theme);\n        if (!textmateTheme) {\n            textmateTheme = Theme.createFromRawTheme(theme);\n            this._textmateThemeCache.set(theme, textmateTheme);\n        }\n        // @ts-expect-error Access private `_syncRegistry`, but should work in runtime\n        this._syncRegistry.setTheme(textmateTheme);\n    }\n    getGrammar(name) {\n        if (this._alias[name]) {\n            const resolved = new Set([name]);\n            while (this._alias[name]) {\n                name = this._alias[name];\n                if (resolved.has(name))\n                    throw new ShikiError(`Circular alias \\`${Array.from(resolved).join(' -> ')} -> ${name}\\``);\n                resolved.add(name);\n            }\n        }\n        return this._resolvedGrammars[name];\n    }\n    async loadLanguage(lang) {\n        if (this.getGrammar(lang.name))\n            return;\n        const embeddedLazilyBy = new Set(Object.values(this._langMap).filter(i => i.embeddedLangsLazy?.includes(lang.name)));\n        this._resolver.addLanguage(lang);\n        const grammarConfig = {\n            balancedBracketSelectors: lang.balancedBracketSelectors || ['*'],\n            unbalancedBracketSelectors: lang.unbalancedBracketSelectors || [],\n        };\n        // @ts-expect-error Private members, set this to override the previous grammar (that can be a stub)\n        this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n        const g = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n        this._resolvedGrammars[lang.name] = g;\n        if (lang.aliases) {\n            lang.aliases.forEach((alias) => {\n                this._alias[alias] = lang.name;\n            });\n        }\n        // Reset cache\n        this._loadedLanguagesCache = null;\n        // If there is a language that embeds this language lazily, we need to reload it\n        if (embeddedLazilyBy.size) {\n            for (const e of embeddedLazilyBy) {\n                delete this._resolvedGrammars[e.name];\n                // Reset cache\n                this._loadedLanguagesCache = null;\n                // @ts-expect-error clear cache\n                this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n                // @ts-expect-error clear cache\n                this._syncRegistry?._grammars?.delete(e.scopeName);\n                await this.loadLanguage(this._langMap[e.name]);\n            }\n        }\n    }\n    async init() {\n        this._themes.map(t => this.loadTheme(t));\n        await this.loadLanguages(this._langs);\n    }\n    async loadLanguages(langs) {\n        for (const lang of langs)\n            this.resolveEmbeddedLanguages(lang);\n        const langsGraphArray = Array.from(this._langGraph.entries());\n        const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n        if (missingLangs.length) {\n            const dependents = langsGraphArray\n                .filter(([_, lang]) => lang && lang.embeddedLangs?.some(l => missingLangs.map(([name]) => name).includes(l)))\n                .filter(lang => !missingLangs.includes(lang));\n            throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(', ')}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(', ')}`);\n        }\n        for (const [_, lang] of langsGraphArray)\n            this._resolver.addLanguage(lang);\n        for (const [_, lang] of langsGraphArray)\n            await this.loadLanguage(lang);\n    }\n    getLoadedLanguages() {\n        if (!this._loadedLanguagesCache)\n            this._loadedLanguagesCache = Object.keys({ ...this._resolvedGrammars, ...this._alias });\n        return this._loadedLanguagesCache;\n    }\n    resolveEmbeddedLanguages(lang) {\n        this._langMap[lang.name] = lang;\n        this._langGraph.set(lang.name, lang);\n        if (lang.embeddedLangs) {\n            for (const embeddedLang of lang.embeddedLangs)\n                this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);\n        }\n    }\n}\n\nclass Resolver {\n    _langs = new Map();\n    _scopeToLang = new Map();\n    _injections = new Map();\n    _onigLibPromise;\n    constructor(onigLibPromise, langs) {\n        this._onigLibPromise = onigLibPromise;\n        langs.forEach(i => this.addLanguage(i));\n    }\n    get onigLib() {\n        return this._onigLibPromise;\n    }\n    getLangRegistration(langIdOrAlias) {\n        return this._langs.get(langIdOrAlias);\n    }\n    async loadGrammar(scopeName) {\n        return this._scopeToLang.get(scopeName);\n    }\n    addLanguage(l) {\n        this._langs.set(l.name, l);\n        if (l.aliases) {\n            l.aliases.forEach((a) => {\n                this._langs.set(a, l);\n            });\n        }\n        this._scopeToLang.set(l.scopeName, l);\n        if (l.injectTo) {\n            l.injectTo.forEach((i) => {\n                if (!this._injections.get(i))\n                    this._injections.set(i, []);\n                this._injections.get(i).push(l.scopeName);\n            });\n        }\n    }\n    getInjections(scopeName) {\n        const scopeParts = scopeName.split('.');\n        let injections = [];\n        for (let i = 1; i <= scopeParts.length; i++) {\n            const subScopeName = scopeParts.slice(0, i).join('.');\n            injections = [...injections, ...(this._injections.get(subScopeName) || [])];\n        }\n        return injections;\n    }\n}\n\nlet _defaultWasmLoader;\n/**\n * Set the default wasm loader for `loadWasm`.\n * @internal\n */\nfunction setDefaultWasmLoader(_loader) {\n    _defaultWasmLoader = _loader;\n}\n/**\n * Get the minimal shiki context for rendering.\n */\nasync function getShikiInternal(options = {}) {\n    async function normalizeGetter(p) {\n        return Promise.resolve(typeof p === 'function' ? p() : p).then(r => r.default || r);\n    }\n    async function resolveLangs(langs) {\n        return Array.from(new Set((await Promise.all(langs\n            .filter(l => !isSpecialLang(l))\n            .map(async (lang) => await normalizeGetter(lang).then(r => Array.isArray(r) ? r : [r])))).flat()));\n    }\n    const wasmLoader = options.loadWasm || _defaultWasmLoader;\n    const [themes, langs,] = await Promise.all([\n        Promise.all((options.themes || []).map(normalizeGetter)).then(r => r.map(normalizeTheme)),\n        resolveLangs(options.langs || []),\n        wasmLoader ? loadWasm(wasmLoader) : undefined,\n    ]);\n    const resolver = new Resolver(Promise.resolve({\n        createOnigScanner(patterns) {\n            return createOnigScanner(patterns);\n        },\n        createOnigString(s) {\n            return createOnigString(s);\n        },\n    }), langs);\n    const _registry = new Registry(resolver, themes, langs, options.langAlias);\n    await _registry.init();\n    let _lastTheme;\n    function getLanguage(name) {\n        const _lang = _registry.getGrammar(typeof name === 'string' ? name : name.name);\n        if (!_lang)\n            throw new ShikiError(`Language \\`${name}\\` not found, you may need to load it first`);\n        return _lang;\n    }\n    function getTheme(name) {\n        if (name === 'none')\n            return { bg: '', fg: '', name: 'none', settings: [], type: 'dark' };\n        const _theme = _registry.getTheme(name);\n        if (!_theme)\n            throw new ShikiError(`Theme \\`${name}\\` not found, you may need to load it first`);\n        return _theme;\n    }\n    function setTheme(name) {\n        const theme = getTheme(name);\n        if (_lastTheme !== name) {\n            _registry.setTheme(theme);\n            _lastTheme = name;\n        }\n        const colorMap = _registry.getColorMap();\n        return {\n            theme,\n            colorMap,\n        };\n    }\n    function getLoadedThemes() {\n        return _registry.getLoadedThemes();\n    }\n    function getLoadedLanguages() {\n        return _registry.getLoadedLanguages();\n    }\n    async function loadLanguage(...langs) {\n        await _registry.loadLanguages(await resolveLangs(langs));\n    }\n    async function loadTheme(...themes) {\n        await Promise.all(themes.map(async (theme) => isSpecialTheme(theme)\n            ? null\n            : _registry.loadTheme(await normalizeGetter(theme))));\n    }\n    return {\n        setTheme,\n        getTheme,\n        getLanguage,\n        getLoadedThemes,\n        getLoadedLanguages,\n        loadLanguage,\n        loadTheme,\n    };\n}\n\n/**\n * Create a Shiki core highlighter instance, with no languages or themes bundled.\n * Wasm and each language and theme must be loaded manually.\n *\n * @see http://shiki.style/guide/install#fine-grained-bundle\n */\nasync function getHighlighterCore(options = {}) {\n    const internal = await getShikiInternal(options);\n    return {\n        codeToTokensBase: (code, options) => codeToTokensBase(internal, code, options),\n        codeToTokensWithThemes: (code, options) => codeToTokensWithThemes(internal, code, options),\n        codeToTokens: (code, options) => codeToTokens(internal, code, options),\n        codeToHast: (code, options) => codeToHast(internal, code, options),\n        codeToHtml: (code, options) => codeToHtml(internal, code, options),\n        ...internal,\n        getInternalContext: () => internal,\n    };\n}\n\n/**\n * Create a `getHighlighter` function with bundled themes and languages.\n *\n * @param bundledLanguages\n * @param bundledThemes\n * @param loadWasm\n */\nfunction createdBundledHighlighter(bundledLanguages, bundledThemes, loadWasm) {\n    async function getHighlighter(options) {\n        function resolveLang(lang) {\n            if (typeof lang === 'string') {\n                if (isSpecialLang(lang))\n                    return [];\n                const bundle = bundledLanguages[lang];\n                if (!bundle)\n                    throw new ShikiError(`Language \\`${lang}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return lang;\n        }\n        function resolveTheme(theme) {\n            if (isSpecialTheme(theme))\n                return 'none';\n            if (typeof theme === 'string') {\n                const bundle = bundledThemes[theme];\n                if (!bundle)\n                    throw new ShikiError(`Theme \\`${theme}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return theme;\n        }\n        const _themes = (options.themes ?? []).map(i => resolveTheme(i));\n        const langs = (options.langs ?? [])\n            .map(i => resolveLang(i));\n        const core = await getHighlighterCore({\n            ...options,\n            themes: _themes,\n            langs,\n            loadWasm,\n        });\n        return {\n            ...core,\n            loadLanguage(...langs) {\n                return core.loadLanguage(...langs.map(resolveLang));\n            },\n            loadTheme(...themes) {\n                return core.loadTheme(...themes.map(resolveTheme));\n            },\n        };\n    }\n    return getHighlighter;\n}\nfunction createSingletonShorthands(getHighlighter) {\n    let _shiki;\n    async function _getHighlighter(options = {}) {\n        if (!_shiki) {\n            _shiki = getHighlighter({\n                themes: toArray(options.theme || []),\n                langs: toArray(options.lang || []),\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...toArray(options.theme || [])),\n                s.loadLanguage(...toArray(options.lang || [])),\n            ]);\n            return s;\n        }\n    }\n    return {\n        getSingletonHighlighter: () => _getHighlighter(),\n        async codeToHtml(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHtml(code, options);\n        },\n        async codeToHast(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHast(code, options);\n        },\n        async codeToTokens(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToTokens(code, options);\n        },\n        async codeToTokensBase(code, options) {\n            const shiki = await _getHighlighter(options);\n            return shiki.codeToTokensBase(code, options);\n        },\n        async codeToTokensWithThemes(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: Object.values(options.themes).filter(Boolean),\n            });\n            return shiki.codeToTokensWithThemes(code, options);\n        },\n    };\n}\n\nexport { FontStyle, ShikiError, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createPositionConverter, createSingletonShorthands, createdBundledHighlighter, getHighlighterCore, getShikiInternal, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };\n", "import { LanguageInput, LanguageRegistration } from '@shikijs/core';\n\nexport const lang = {\n  // @ts-ignore\n  $schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json',\n  fileTypes: ['prompt'],\n  name: 'prompt',\n  patterns: [\n    {\n      match: '[,]',\n      name: 'comma',\n    },\n    {\n      match: 'AND',\n      name: 'and',\n    },\n    {\n      match: 'BREAK',\n      name: 'break',\n    },\n    {\n      captures: {\n        0: {\n          name: 'model-bracket',\n        },\n        1: {\n          name: 'model-type',\n        },\n        2: {\n          name: 'model-name',\n        },\n        3: {\n          name: 'number',\n        },\n      },\n      match: '<([^:]+):([^:]+):([^>]+)>',\n    },\n    {\n      match: '[<|>]',\n      name: 'model-bracket',\n    },\n    {\n      match: '[(|)|\\\\[|\\\\]|{|}\\\\\\\\]',\n      name: 'bracket',\n    },\n    {\n      match: ':\\\\d*\\\\.?\\\\d+|:\\\\.\\\\d+',\n      name: 'number',\n    },\n    {\n      match: '[:|]',\n      name: 'func',\n    },\n    {\n      match: '__.*__',\n      name: 'wildcards',\n    },\n  ],\n\n  scopeName: 'source.prompt',\n}  satisfies LanguageRegistration;\n\nexport const prompt = [lang as any as LanguageRegistration] satisfies LanguageInput;\n", "var binary = Uint8Array.from(atob(\"\"), c => c.charCodeAt(0));\n\n// @ts-expect-error this will be compiled to ArrayBuffer\nconst wasmBinary = binary;\nconst getWasmInstance = async (info) => {\n    return WebAssembly.instantiate(wasmBinary, info).then(wasm => wasm.instance.exports);\n};\n\nexport { getWasmInstance as default, getWasmInstance, wasmBinary };\n", "/**\n * Created by user on 2024/5/17.\n */\nimport { getHighlighterCore, HighlighterCore } from 'shiki/core';\nimport { prompt } from './grammar';\nimport getWasm from 'shiki/wasm';\nimport { ThemeInput } from 'shiki';\nimport { IRowConfigOptions } from './row-config';\n\nlet cacheHighlighter: HighlighterCore;\n\nexport async function initHighlighter(): Promise<HighlighterCore>\n{\n\tlet highlighter = cacheHighlighter;\n\n\tif (highlighter) return highlighter;\n\n\thighlighter = await getHighlighterCore({\n\t\t// @ts-ignore\n\t\tlangs: [prompt],\n\t\tthemes: [themeConfig(true), themeConfig(false)],\n\t\tloadWasm: getWasm,\n\t});\n\n\tcacheHighlighter = highlighter;\n\n\treturn highlighter;\n}\n\nfunction themeConfig(isDarkMode: boolean)\n{\n\tconst type = isDarkMode ? 'dark' : 'light';\n\n\tconst colorYellow = '#FFEF5C';\n\tconst colorOrange = '#FFCB47';\n\tconst colorVolcano = '#FF9480';\n\tconst colorGreen = '#C4F042';\n\tconst colorBlue = '#8ae8ff';\n\tconst colorPurple = '#EDC7EE';\n\treturn {\n\t\tcolors: {\n\t\t\t'editor.foreground': colorGreen,\n\t\t},\n\t\tname: type,\n\t\ttokenColors: [\n\t\t\t{\n\t\t\t\tscope: 'comma',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: '#DDDDDD',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: ['and', 'break'],\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorBlue,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'bracket',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorPurple,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'model-type',\n\t\t\t\tsettings: {\n\t\t\t\t\tfontStyle: 'italic',\n\t\t\t\t\tforeground: colorVolcano,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'model-name',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorOrange,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'model-bracket',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorPurple,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'number',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorPurple,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'func',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorPurple,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'wildcards',\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: colorYellow,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\ttype,\n\t} satisfies ThemeInput;\n}\n\nexport async function syntaxHighlighter(code: string, opts: IRowConfigOptions = {})\n{\n\tconst highlighter = await initHighlighter();\n\treturn highlighter.codeToHtml(code, {\n\t\tlang: opts.syntaxLang ?? 'prompt',\n\t\ttheme: 'dark',\n\t\tmergeWhitespaces: true,\n\t\ttransformers: [\n\t\t\t{\n\t\t\t\tcode(node)\n\t\t\t\t{\n\t\t\t\t\tnode.properties['id'] = 'lobe_highlighter';\n\t\t\t\t},\n\t\t\t\tpre(node)\n\t\t\t\t{\n\t\t\t\t\tnode.properties['id'] = 'shiki_infotext_highlighter';\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n", "import { CLASS_PREFIX } from './const';\nimport { RowConfigMap } from './row-config';\nimport { syntaxHighlighter } from './highlighter';\nimport { IRecordInfo } from '@bluelovers/auto1111-pnginfo';\n\nasync function addRow(key: string, value: any, infoData: ILayoutInfoData)\n{\n\tlet opts = RowConfigMap.get(key) ?? {};\n\n\tif (typeof value === 'string' && value?.length)\n\t{\n\t\tlet doEscapeHTML = !opts.disableEscapeHTML;\n\n\t\tif (opts.decode)\n\t\t{\n\t\t\tif (opts.decode === true)\n\t\t\t{\n\t\t\t\tvalue = JSON.parse(value)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = opts.decode(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (opts.syntaxHighlighter)\n\t\t{\n\t\t\tdoEscapeHTML = false;\n\n\t\t\tvalue = await syntaxHighlighter(value, opts);\n\t\t}\n\n\t\tif (doEscapeHTML)\n\t\t{\n\t\t\tvalue = escapeHTML(value);\n\t\t}\n\t}\n\n\tlet sx = opts.full ? '_full' : '';\n\tlet html = `<div class=\"${CLASS_PREFIX}row\">`;\n\thtml += `<div class=\"${CLASS_PREFIX}label_div ${CLASS_PREFIX}label${sx}\" data-key=\"${escapeHTML(key)}\">${key}</div>`;\n\thtml += `<div class=\"${CLASS_PREFIX}value_div ${CLASS_PREFIX}value${sx} bilingual__trans_ignore_deep\">${value}</div>`;\n\thtml += `</div>`;\n\treturn html;\n}\n\nfunction escapeHTML(html: string)\n{\n\treturn html.replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`);\n}\n\nexport function switchBtn(elem: HTMLDivElement)\n{\n\tlet btn = document.createElement('button');\n\n\tbtn.className = `${CLASS_PREFIX}show_hide_btn`;\n\n\tbtn.classList.add('lg');\n\tbtn.classList.add('secondary');\n\tbtn.classList.add('gradio-button');\n\tbtn.classList.add('tool');\n\n\tbtn.innerText = `\u1368`;\n\n\tbtn.addEventListener('click', () => {\n\t\telem.style.display = elem.style.display === 'none' ? 'block' : 'none';\n\t})\n\n\tlet div = document.createElement('div');\n\n\tdiv.className = `${CLASS_PREFIX}show_hide_div`;\n\tdiv.classList.add('bilingual__trans_ignore_deep');\n\n\tdiv.append(btn);\n\n\treturn div\n}\n\ninterface ILayoutInfoData\n{\n\tprompt: string;\n\tnegative_prompt: string;\n\tconfig: Omit<IRecordInfo, 'prompt' | 'negative_prompt'>;\n}\n\nexport async function renderLayout(infoData: ILayoutInfoData)\n{\n\tlet html = '';\n\n\thtml += `<div class=\"${CLASS_PREFIX}main\">`;\n\n\tif (infoData.prompt?.length) html += await addRow('Positive Prompt', infoData.prompt, infoData);\n\tif (infoData.negative_prompt?.length) html += await addRow('Negative Prompt', infoData.negative_prompt, infoData);\n\n\tfor (let [key, value] of Object.entries(infoData.config as Record<string, string>))\n\t{\n\t\thtml += await addRow(key, value, infoData);\n\t}\n\n\thtml += `</div>`\n\n\treturn html\n}\n", "import { parseFromRawInfo } from '@bluelovers/auto1111-pnginfo';\nimport { renderLayout, switchBtn } from './layout';\nimport { CLASS_PREFIX, EXTENSION_NAME, tabs } from './const';\nimport { IOptionsInfoparser } from '@bluelovers/auto1111-pnginfo';\n\nexport async function renderInfo(\n\tparentId: Extract<typeof tabs[number], string> | HTMLDivElement,\n\tisElem?: boolean,\n\topts?: IOptionsInfoparser\n)\n{\n\tconst app = gradioApp();\n\tlet elem: HTMLDivElement;\n\n\tif (typeof parentId === 'string')\n\t{\n\t\tparentId = app.querySelector<HTMLDivElement>(parentId);\n\t}\n\n\tif (isElem)\n\t{\n\t\telem = parentId;\n\t\tparentId = elem.parentNode as HTMLDivElement;\n\t}\n\n\telem ??= parentId.querySelector(`.infotext`);\n\n\tlet infotext = elem.innerText?.replace(/^\\s+|\\s+$/g, '');\n\n\tlet html: string = '';\n\n\tif (infotext?.length)\n\t{\n\t\tlet options = {\n\t\t\t...opts,\n\t\t\tisIncludePrompts: opts?.isIncludePrompts ?? true,\n\t\t};\n\n\t\tlet {\n\t\t\tprompt,\n\t\t\tnegative_prompt,\n\t\t\t...config\n\t\t} = parseFromRawInfo(infotext, options)\n\n\t\tconsole.debug(EXTENSION_NAME, 'parseFromRawInfo', {\n\t\t\tprompt,\n\t\t\tnegative_prompt,\n\t\t\tconfig,\n\t\t\toptions,\n\t\t});\n\n\t\t//if (prompt?.length) prompt = await syntaxHighlighter(prompt);\n\t\t//if (negative_prompt?.length) negative_prompt = await syntaxHighlighter(negative_prompt);\n\n\t\thtml = await renderLayout({\n\t\t\tprompt,\n\t\t\tnegative_prompt,\n\t\t\tconfig,\n\t\t});\n\t}\n\n\tlet target = parentId.querySelector(`.${CLASS_PREFIX}root`) as HTMLDivElement;\n\n\tif (!target)\n\t{\n\t\telem.insertAdjacentHTML('afterend', `<div class=\"prose gradio-html ${CLASS_PREFIX}root\">${html}</div>`);\n\t\ttarget = parentId.querySelector<HTMLDivElement>(`.${CLASS_PREFIX}root`);\n\n\t\tlet btn = switchBtn(elem);\n\t\ttarget.parentNode.insertBefore(btn, target);\n\n\t\tconsole.debug(EXTENSION_NAME, 'switchBtn', {\n\t\t\tparentId,\n\t\t\telem,\n\t\t\ttarget,\n\t\t\tbtn,\n\t\t})\n\t}\n\telse\n\t{\n\t\ttarget.innerHTML = html;\n\t}\n\n\tif (html.length)\n\t{\n\t\telem.style.display = 'none';\n\t\ttarget.style.display = 'block';\n\t}\n\telse\n\t{\n\t\telem.style.display = 'block';\n\t\ttarget.style.display = 'none';\n\t}\n\n\treturn {\n\t\tparentId,\n\t\telem,\n\t\ttarget,\n\t\thtml,\n\t}\n}\n", "export default `.shiki_infotext_root {\n  max-height: 46.5em;\n  overflow-y: auto;\n  margin-bottom: 20px !important;\n}\n.shiki_infotext_root, .shiki_infotext_root .infotext, .shiki_infotext_root #tab_pnginfo .html-log.prose, .shiki_infotext_root #html_info_x_extras.prose, .shiki_infotext_root #html_info_extras.prose, .shiki_infotext_root #html_info_replacer.prose {\n  transition: 0.15s;\n}\n\n.shiki_infotext_show_hide_div {\n  text-align: right;\n  padding: 10px;\n}\n.shiki_infotext_show_hide_div .shiki_infotext_show_hide_btn {\n  border: var(--button-border-width) solid var(--button-secondary-border-color);\n  background: var(--button-secondary-background-fill);\n  color: var(--button-secondary-text-color);\n  position: sticky;\n  top: 0;\n  right: 0;\n}\n\n.shiki_infotext_main {\n  display: flex;\n  flex-direction: column;\n  padding: 5px;\n}\n.shiki_infotext_main .shiki_infotext_row {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 5px;\n}\n.shiki_infotext_main .shiki_infotext_row:hover .shiki_infotext_label_div, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_full {\n  background: var(--button-primary-background-fill-hover);\n  color: var(--button-primary-text-color);\n  border-color: var(--button-primary-border-color);\n}\n.shiki_infotext_main .shiki_infotext_row:hover .shiki_infotext_value {\n  box-shadow: var(--input-shadow-focus);\n  border-color: var(--color-accent);\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_value {\n  margin: 0px 2px;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_full, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_value_full {\n  width: 100%;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_value_full > pre {\n  padding: 10px 5px;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_value_full, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_value_full pre, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_value_full #shiki_infotext_highlighter {\n  white-space: pre-wrap;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label {\n  flex: 1 0 auto;\n  /*white-space: nowrap;*/\n  min-width: 300px;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_value {\n  flex: 4 1 auto;\n  word-wrap: break-word;\n  min-width: 0;\n  margin: auto 2px;\n  border: 1px solid var(--block-border-color);\n  border-radius: 8px;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div {\n  border-radius: 3px;\n  background: var(--button-secondary-background-fill);\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div, .shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div .shiki_infotext_value_div {\n  padding: 3px 5px;\n  min-height: 24px;\n}\n.shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div[data-key=Model], .shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div[data-key=\"TI hashes\"], .shiki_infotext_main .shiki_infotext_row .shiki_infotext_label_div[data-key=\"Lora hashes\"] {\n  background: linear-gradient(to bottom right, #860087, #860087);\n}\n\n.infotext .pending:hover {\n  opacity: 1;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvc2Qtd2VidWktcG5naW5mby1iZWF1dGlmeS9zZC13ZWJ1aS1wbmdpbmZvLWJlYXV0aWZ5L3NyYyIsInNvdXJjZXMiOlsic3R5bGUuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVDO0VBQ0E7RUFDQTs7QUFFQTtFQUVDOzs7QUFJRjtFQUVDO0VBQ0E7O0FBRUE7RUFFQztFQUNBO0VBQ0E7RUFFQTtFQUNBO0VBQ0E7OztBQUtGO0VBRUM7RUFDQTtFQUNBOztBQUVBO0VBRUM7RUFDQTtFQUNBOztBQUVBO0VBRUM7RUFDQTtFQUNBOztBQUdEO0VBRUM7RUFDQTs7QUFHRDtFQUVDOztBQUdEO0VBRUM7O0FBS0E7RUFFQzs7QUFHRDtFQUVDOztBQUlGO0VBRUM7QUFDQTtFQUNBOztBQUdEO0VBRUM7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztBQUdEO0VBRUM7RUFDQTs7QUFFQTtFQUVDO0VBQ0E7O0FBR0Q7RUFFQzs7O0FBTUo7RUFFQyIsInNvdXJjZXNDb250ZW50IjpbIi5zaGlraV9pbmZvdGV4dF9yb290XG57XG5cdG1heC1oZWlnaHQ6IDQ2LjVlbTtcblx0b3ZlcmZsb3cteTogYXV0bztcblx0bWFyZ2luLWJvdHRvbTogMjBweCAhaW1wb3J0YW50O1xuXG5cdCYsIC5pbmZvdGV4dCwgI3RhYl9wbmdpbmZvIC5odG1sLWxvZy5wcm9zZSwgI2h0bWxfaW5mb194X2V4dHJhcy5wcm9zZSwgI2h0bWxfaW5mb19leHRyYXMucHJvc2UsICNodG1sX2luZm9fcmVwbGFjZXIucHJvc2Vcblx0e1xuXHRcdHRyYW5zaXRpb246IC4xNXM7XG5cdH1cbn1cblxuLnNoaWtpX2luZm90ZXh0X3Nob3dfaGlkZV9kaXZcbntcblx0dGV4dC1hbGlnbjogcmlnaHQ7XG5cdHBhZGRpbmc6IDEwcHg7XG5cblx0LnNoaWtpX2luZm90ZXh0X3Nob3dfaGlkZV9idG5cblx0e1xuXHRcdGJvcmRlcjogdmFyKC0tYnV0dG9uLWJvcmRlci13aWR0aCkgc29saWQgdmFyKC0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3IpO1xuXHRcdGJhY2tncm91bmQ6IHZhcigtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1maWxsKTtcblx0XHRjb2xvcjogdmFyKC0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcblxuXHRcdHBvc2l0aW9uOiBzdGlja3k7XG5cdFx0dG9wOiAwO1xuXHRcdHJpZ2h0OiAwO1xuXHR9XG5cbn1cblxuLnNoaWtpX2luZm90ZXh0X21haW5cbntcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0cGFkZGluZzogNXB4O1xuXG5cdC5zaGlraV9pbmZvdGV4dF9yb3dcblx0e1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC13cmFwOiB3cmFwO1xuXHRcdG1hcmdpbi1ib3R0b206IDVweDtcblxuXHRcdCY6aG92ZXIgLnNoaWtpX2luZm90ZXh0X2xhYmVsX2RpdiwgLnNoaWtpX2luZm90ZXh0X2xhYmVsX2Z1bGxcblx0XHR7XG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1idXR0b24tcHJpbWFyeS1iYWNrZ3JvdW5kLWZpbGwtaG92ZXIpO1xuXHRcdFx0Y29sb3I6IHZhcigtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3IpO1xuXHRcdFx0Ym9yZGVyLWNvbG9yOiB2YXIoLS1idXR0b24tcHJpbWFyeS1ib3JkZXItY29sb3IpO1xuXHRcdH1cblxuXHRcdCY6aG92ZXIgLnNoaWtpX2luZm90ZXh0X3ZhbHVlXG5cdFx0e1xuXHRcdFx0Ym94LXNoYWRvdzogdmFyKC0taW5wdXQtc2hhZG93LWZvY3VzKTtcblx0XHRcdGJvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItYWNjZW50KTtcblx0XHR9XG5cblx0XHQuc2hpa2lfaW5mb3RleHRfbGFiZWwsIC5zaGlraV9pbmZvdGV4dF92YWx1ZVxuXHRcdHtcblx0XHRcdG1hcmdpbjogMHB4IDJweDtcblx0XHR9XG5cblx0XHQuc2hpa2lfaW5mb3RleHRfbGFiZWxfZnVsbCwgLnNoaWtpX2luZm90ZXh0X3ZhbHVlX2Z1bGxcblx0XHR7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHR9XG5cblx0XHQuc2hpa2lfaW5mb3RleHRfdmFsdWVfZnVsbFxuXHRcdHtcblx0XHRcdD4gcHJlXG5cdFx0XHR7XG5cdFx0XHRcdHBhZGRpbmc6IDEwcHggNXB4O1xuXHRcdFx0fVxuXG5cdFx0XHQmLCBwcmUsICNzaGlraV9pbmZvdGV4dF9oaWdobGlnaHRlclxuXHRcdFx0e1xuXHRcdFx0XHR3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LnNoaWtpX2luZm90ZXh0X2xhYmVsXG5cdFx0e1xuXHRcdFx0ZmxleDogMSAwIGF1dG87XG5cdFx0XHQvKndoaXRlLXNwYWNlOiBub3dyYXA7Ki9cblx0XHRcdG1pbi13aWR0aDogMzAwcHg7XG5cdFx0fVxuXG5cdFx0LnNoaWtpX2luZm90ZXh0X3ZhbHVlXG5cdFx0e1xuXHRcdFx0ZmxleDogNCAxIGF1dG87XG5cdFx0XHR3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG5cdFx0XHRtaW4td2lkdGg6IDA7XG5cdFx0XHRtYXJnaW46IGF1dG8gMnB4O1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdmFyKC0tYmxvY2stYm9yZGVyLWNvbG9yKTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDhweDtcblx0XHR9XG5cblx0XHQuc2hpa2lfaW5mb3RleHRfbGFiZWxfZGl2XG5cdFx0e1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogM3B4O1xuXHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWZpbGwpO1xuXG5cdFx0XHQmLCAuc2hpa2lfaW5mb3RleHRfdmFsdWVfZGl2XG5cdFx0XHR7XG5cdFx0XHRcdHBhZGRpbmc6IDNweCA1cHg7XG5cdFx0XHRcdG1pbi1oZWlnaHQ6IDI0cHg7XG5cdFx0XHR9XG5cblx0XHRcdCZbZGF0YS1rZXk9XCJNb2RlbFwiXSwgJltkYXRhLWtleT1cIlRJIGhhc2hlc1wiXSwgJltkYXRhLWtleT1cIkxvcmEgaGFzaGVzXCJdXG5cdFx0XHR7XG5cdFx0XHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsICM4NjAwODcsICM4NjAwODcpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4uaW5mb3RleHQgLnBlbmRpbmc6aG92ZXJcbntcblx0b3BhY2l0eTogMTtcbn1cbiJdfQ== */`;\n", "// @ts-ignore\nimport customCSS from './style.scss'\n\nexport function initStyle()\n{\n\tlet $styleEL: HTMLStyleElement = document.getElementById('sd-webui-pnginfo-beautify-style') as any;\n\n\tif (!$styleEL)\n\t{\n\t\t$styleEL = document.createElement('style');\n\t\tgradioApp().appendChild($styleEL);\n\t}\n\n\t$styleEL.id = 'sd-webui-pnginfo-beautify-style';\n\t$styleEL.type = 'text/css';\n\n\t// @ts-ignore\n\tif ($styleEL.styleSheet)\n\t{\n\t\t// @ts-ignore\n\t\t$styleEL.styleSheet.cssText = customCSS;\n\t}\n\telse\n\t{\n\t\t$styleEL.innerHTML = customCSS;\n\t\t//$styleEL.appendChild(document.createTextNode(customCSS));\n\t}\n\n\treturn $styleEL\n}\n", "/**\n * Created by user on 2024/5/17.\n */\n/// <reference types=\"../global.webui.d.ts\" preserve=\"true\"/>\n\nimport { renderInfo } from './render';\nimport { initStyle } from './style';\nimport { EXTENSION_NAME, tabs } from './const';\nimport { IOptionsInfoparser } from '@bluelovers/auto1111-pnginfo';\n\n// @ts-ignore\ntypeof onUiLoaded === 'undefined' && (onUiLoaded = (fn) => {\n\treturn document.addEventListener('DOMContentLoaded', fn)\n});\n\nonUiLoaded(async () =>\n{\n\tinitStyle();\n\tconst app = gradioApp();\n\n\tlet observer = new MutationObserver(async (mutationsList, observer) =>\n\t{\n\t\tfor (let mutation of mutationsList)\n\t\t{\n\t\t\tconst elem = mutation.target as HTMLDivElement;\n\t\t\tconsole.info(EXTENSION_NAME, 'observer:mutation', {\n\t\t\t\ttype: mutation.type,\n\t\t\t\tid: elem?.id,\n\t\t\t\telem,\n\t\t\t\tmutation,\n\t\t\t\t_beautifyOpts: (elem as any)._beautifyOpts,\n\t\t\t})\n\t\t\tawait renderInfo(mutation.target as HTMLDivElement, true, (elem as any)._beautifyOpts)\n\t\t\t\t.catch(e => console.error(EXTENSION_NAME, e))\n\t\t}\n\t});\n\n\tlet temp = [];\n\n\tfor (let parentId of tabs)\n\t{\n\t\tlet isElem: boolean;\n\t\tlet opts: IOptionsInfoparser;\n\t\tif (Array.isArray(parentId))\n\t\t{\n\t\t\t[parentId, isElem, opts] = parentId;\n\t\t}\n\n\t\tawait renderInfo(parentId, isElem, opts)\n\t\t\t.then(({\n\t\t\t\thtml,\n\t\t\t\t...ret\n\t\t\t}) => {\n\t\t\t\ttemp.push({\n\t\t\t\t\t...ret,\n\t\t\t\t\tisElem,\n\t\t\t\t\topts,\n\t\t\t\t});\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tret.elem._beautifyOpts = opts;\n\n\t\t\t\tobserver.observe(ret.elem, {\n\t\t\t\t\t//characterData: true,\n\t\t\t\t\tchildList: true,\n\t\t\t\t\t//subtree: true,\n\t\t\t\t\t//attributes: true,\n\t\t\t\t\t//attributeFilter: ['title', 'placeholder'],\n\t\t\t\t});\n\t\t\t}).catch(e => console.error(EXTENSION_NAME, e))\n\t\t;\n\t}\n\n\tconsole.info(EXTENSION_NAME, `onUiLoaded`, temp)\n})\n"],
  "mappings": "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CN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IA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",
  "names": ["EnumLineBreak", "EnumLineBreakCharCode", "CR", "R_CRLF", "R_CRLF_MATCH", "RegExp", "source", "flags", "crlf", "text", "newline", "replace", "EnumIncludeSeparatorMode", "EnumFindBracketsAction", "once", "fn", "value", "hasValue", "args", "isEmpty", "Array", "isArray", "length", "Object", "keys", "first", "buildIndexesObject", "indexes", "indexesArr", "flat", "filter", "Boolean", "values", "Set", "max", "Math", "count", "hasIndex", "this", "has", "isOverMax", "SearchResults", "constructor", "string", "searchSettings", "prepareSearch", "regExp", "separatorSearch", "bracketsSearch", "lastIndex", "assign", "brackets", "pipe", "currentMentions", "position", "isDone", "freeArea", "start", "end", "lastSeparator", "searchString", "ignoreCase", "toUpperCase", "pipeIsEmpty", "getMentions", "indexFrom", "indexTo", "properMentions", "restMentions", "item", "index", "push", "mention", "trimResultText", "text", "trimResult", "trim", "trimSeparatorText", "trimSeparators", "checkSeparator", "pSeparator", "check", "includePositions", "mentions", "separatorText", "separatorPosition", "searchWithinData", "separatorLength", "lastPosition", "openPosition", "substring", "separator", "open", "close", "isSeparator", "restItems", "isNaN", "tempPosition", "self", "getString", "getTextAfter", "getSeparator", "textAfter", "pushToPipe", "addToPipe", "checked", "includeSeparatorMode", "findBrackets", "searchWithin", "condition", "_searchSettings$menti", "match", "exec", "fragment", "ignoreMode", "searchLevels", "block", "bracketsMap", "bracketData", "pop", "includes", "findSeparator", "stopSearching", "isAdded", "getNext", "shift", "getAll", "getRest", "res", "Symbol", "iterator", "object", "split", "settings", "splitSettings", "merge", "returnIterator", "createSplitFunction", "splitFn", "bind", "getOne", "TypeError", "getFirst", "getIndexes", "getIterator", "getSplitSmartlyArgs", "extraSettings", "RangeError", "arg", "unshift", "RegExp", "screenedSymbols", "prepareSearch", "separators", "settings", "brackets", "mentions", "ignoreInsideQuotes", "includeSeparatorMode", "ignoreCase", "trimResult", "trimSeparators", "defaultBrackets", "init", "Array", "isArray", "mentionsMap", "flat", "filter", "Boolean", "reduce", "map", "keyword", "toUpperCase", "isEmpty", "createBracketsMap", "createBracketsSearch", "createSeparatorsSearch", "this", "merge", "_this", "some", "prop", "arrayToPattern", "arr", "_screenedSymbols", "screenedSymbols", "Set", "split", "s", "RegExp", "source", "has", "join", "createRegExp", "pattern", "_brackets", "slice", "pairText", "pair", "trim", "length", "first", "TypeError", "Object", "entries", "unshift", "bracketsMap", "searchWithin", "open", "close", "args", "undefined", "searchLevels", "ignoreMode", "patternParts", "flatMap", "concat", "keys", "bracketsSearch", "separatorSearch", "_splitSmartlyCore", "splitSettings", "splitFn", "createSplitFunction", "splitSmartly", "str", "getSplitSmartlyArgs", "_normalizeInputRaw", "raw_info", "crlf", "replace", "RE_LINE_SPLIT_BASE", "RE_LINE_SPLIT_PLUS", "_splitRawToLines", "split", "_isRawVersionPlus", "test", "_parseLine", "line", "key", "value", "match", "_parseInfoLine", "infoline", "splitSmartly", "brackets", "trimSeparators", "reduce", "entries", "length", "entry", "push", "extractPromptAndInfoFromRaw", "isPlus", "lines", "prompt", "negative_prompt", "lines_raw", "slice", "_line", "_line2", "TypeError", "pop", "startsWith", "idx", "i", "splice", "join", "infoline_extra", "handleInfoEntries", "entries", "opts", "cast_to_snake", "re", "map", "key", "value", "asNum", "parseFloat", "isNotNum", "test", "isNaN", "toLowerCase", "replace", "parseFromRawInfo", "line", "base", "isIncludePrompts", "prompt", "negative_prompt", "infoline", "extractPromptAndInfoFromRaw", "push", "Object", "fromEntries", "concat", "_parseInfoLine", "key", "text", "FontStyle", "EncodedTokenAttributes", "containsBalancedBrackets", "matcher", "r", "i", "key", "r", "i", "e", "root", "head", "scopeName", "scopes", "i", "lang", "key", "text", "r", "scope", "t", "l", "n", "p", "decorations", "stringify", "root", "one", "all", "increment", "siblings", "head", "onigBinding", "clone", "Registry", "e", "p", "r", "langs", "l", "lang", "Registry", "themes", "options", "key", "html", "html", "prompt", "observer", "e", "html"]
}
